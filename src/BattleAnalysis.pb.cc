// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleAnalysis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleAnalysis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace pb {

void protobuf_ShutdownFile_BattleAnalysis_2eproto() {
  delete BattleAnalysisActorInfo::default_instance_;
  delete BattleAnalysis::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_BattleAnalysis_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_BattleAnalysis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  BattleAnalysisActorInfo::default_instance_ = new BattleAnalysisActorInfo();
  BattleAnalysis::default_instance_ = new BattleAnalysis();
  BattleAnalysisActorInfo::default_instance_->InitAsDefaultInstance();
  BattleAnalysis::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleAnalysis_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_BattleAnalysis_2eproto_once_);
void protobuf_AddDesc_BattleAnalysis_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_BattleAnalysis_2eproto_once_,
                 &protobuf_AddDesc_BattleAnalysis_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleAnalysis_2eproto {
  StaticDescriptorInitializer_BattleAnalysis_2eproto() {
    protobuf_AddDesc_BattleAnalysis_2eproto();
  }
} static_descriptor_initializer_BattleAnalysis_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int BattleAnalysisActorInfo::kLastFieldFieldNumber;
const int BattleAnalysisActorInfo::kPosIndexFieldNumber;
const int BattleAnalysisActorInfo::kAreaIndexFieldNumber;
const int BattleAnalysisActorInfo::kHpInitFieldNumber;
const int BattleAnalysisActorInfo::kHpFieldNumber;
const int BattleAnalysisActorInfo::kDamageFieldNumber;
const int BattleAnalysisActorInfo::kTimesDamageFieldNumber;
const int BattleAnalysisActorInfo::kTimesDamagedFieldNumber;
const int BattleAnalysisActorInfo::kHealFieldNumber;
const int BattleAnalysisActorInfo::kDamageDefaultFieldNumber;
const int BattleAnalysisActorInfo::kTimesDefaultFieldNumber;
const int BattleAnalysisActorInfo::kDamageLegendFieldNumber;
const int BattleAnalysisActorInfo::kTimesLegendFieldNumber;
const int BattleAnalysisActorInfo::kDamageXpFieldNumber;
const int BattleAnalysisActorInfo::kTimesXpFieldNumber;
const int BattleAnalysisActorInfo::kDamageCombineFieldNumber;
const int BattleAnalysisActorInfo::kTimesCombineFieldNumber;
const int BattleAnalysisActorInfo::kTimesStrikeFieldNumber;
const int BattleAnalysisActorInfo::kTimesDodgeFieldNumber;
const int BattleAnalysisActorInfo::kTimesBlockFieldNumber;
const int BattleAnalysisActorInfo::kTimesLifestealFieldNumber;
const int BattleAnalysisActorInfo::kTimesKillFieldNumber;
const int BattleAnalysisActorInfo::kDeadRoundFieldNumber;
#endif  // !_MSC_VER

BattleAnalysisActorInfo::BattleAnalysisActorInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BattleAnalysisActorInfo)
}

void BattleAnalysisActorInfo::InitAsDefaultInstance() {
}

BattleAnalysisActorInfo::BattleAnalysisActorInfo(const BattleAnalysisActorInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BattleAnalysisActorInfo)
}

void BattleAnalysisActorInfo::SharedCtor() {
  _cached_size_ = 0;
  lastfield_ = 0;
  pos_index_ = 0;
  area_index_ = 0;
  hp_init_ = 0;
  hp_ = 0;
  damage_ = 0;
  times_damage_ = 0;
  times_damaged_ = 0;
  heal_ = 0;
  damage_default_ = 0;
  times_default_ = 0;
  damage_legend_ = 0;
  times_legend_ = 0;
  damage_xp_ = 0;
  times_xp_ = 0;
  damage_combine_ = 0;
  times_combine_ = 0;
  times_strike_ = 0;
  times_dodge_ = 0;
  times_block_ = 0;
  times_lifesteal_ = 0;
  times_kill_ = 0;
  dead_round_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleAnalysisActorInfo::~BattleAnalysisActorInfo() {
  // @@protoc_insertion_point(destructor:pb.BattleAnalysisActorInfo)
  SharedDtor();
}

void BattleAnalysisActorInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleAnalysisActorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleAnalysisActorInfo& BattleAnalysisActorInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleAnalysis_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleAnalysis_2eproto();
#endif
  return *default_instance_;
}

BattleAnalysisActorInfo* BattleAnalysisActorInfo::default_instance_ = NULL;

BattleAnalysisActorInfo* BattleAnalysisActorInfo::New() const {
  return new BattleAnalysisActorInfo;
}

void BattleAnalysisActorInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleAnalysisActorInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(lastfield_, times_damaged_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(heal_, damage_combine_);
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(times_combine_, dead_round_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BattleAnalysisActorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:pb.BattleAnalysisActorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lastField = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastfield_)));
          set_has_lastfield();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos_index;
        break;
      }

      // optional int32 pos_index = 2;
      case 2: {
        if (tag == 16) {
         parse_pos_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_index_)));
          set_has_pos_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_area_index;
        break;
      }

      // optional int32 area_index = 3;
      case 3: {
        if (tag == 24) {
         parse_area_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_index_)));
          set_has_area_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hp_init;
        break;
      }

      // optional int32 hp_init = 4;
      case 4: {
        if (tag == 32) {
         parse_hp_init:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_init_)));
          set_has_hp_init();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // optional int32 hp = 5;
      case 5: {
        if (tag == 40) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_damage;
        break;
      }

      // optional int32 damage = 6;
      case 6: {
        if (tag == 48) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_times_damage;
        break;
      }

      // optional int32 times_damage = 7;
      case 7: {
        if (tag == 56) {
         parse_times_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_damage_)));
          set_has_times_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_times_damaged;
        break;
      }

      // optional int32 times_damaged = 8;
      case 8: {
        if (tag == 64) {
         parse_times_damaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_damaged_)));
          set_has_times_damaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_heal;
        break;
      }

      // optional int32 heal = 9;
      case 9: {
        if (tag == 72) {
         parse_heal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heal_)));
          set_has_heal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_damage_default;
        break;
      }

      // optional int32 damage_default = 10;
      case 10: {
        if (tag == 80) {
         parse_damage_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_default_)));
          set_has_damage_default();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_times_default;
        break;
      }

      // optional int32 times_default = 11;
      case 11: {
        if (tag == 88) {
         parse_times_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_default_)));
          set_has_times_default();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_damage_legend;
        break;
      }

      // optional int32 damage_legend = 12;
      case 12: {
        if (tag == 96) {
         parse_damage_legend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_legend_)));
          set_has_damage_legend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_times_legend;
        break;
      }

      // optional int32 times_legend = 13;
      case 13: {
        if (tag == 104) {
         parse_times_legend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_legend_)));
          set_has_times_legend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_damage_xp;
        break;
      }

      // optional int32 damage_xp = 14;
      case 14: {
        if (tag == 112) {
         parse_damage_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_xp_)));
          set_has_damage_xp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_times_xp;
        break;
      }

      // optional int32 times_xp = 15;
      case 15: {
        if (tag == 120) {
         parse_times_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_xp_)));
          set_has_times_xp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_damage_combine;
        break;
      }

      // optional int32 damage_combine = 16;
      case 16: {
        if (tag == 128) {
         parse_damage_combine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_combine_)));
          set_has_damage_combine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_times_combine;
        break;
      }

      // optional int32 times_combine = 17;
      case 17: {
        if (tag == 136) {
         parse_times_combine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_combine_)));
          set_has_times_combine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_times_strike;
        break;
      }

      // optional int32 times_strike = 18;
      case 18: {
        if (tag == 144) {
         parse_times_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_strike_)));
          set_has_times_strike();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_times_dodge;
        break;
      }

      // optional int32 times_dodge = 19;
      case 19: {
        if (tag == 152) {
         parse_times_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_dodge_)));
          set_has_times_dodge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_times_block;
        break;
      }

      // optional int32 times_block = 20;
      case 20: {
        if (tag == 160) {
         parse_times_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_block_)));
          set_has_times_block();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_times_lifesteal;
        break;
      }

      // optional int32 times_lifesteal = 21;
      case 21: {
        if (tag == 168) {
         parse_times_lifesteal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_lifesteal_)));
          set_has_times_lifesteal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_times_kill;
        break;
      }

      // optional int32 times_kill = 22;
      case 22: {
        if (tag == 176) {
         parse_times_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_kill_)));
          set_has_times_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_dead_round;
        break;
      }

      // optional int32 dead_round = 23;
      case 23: {
        if (tag == 184) {
         parse_dead_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dead_round_)));
          set_has_dead_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BattleAnalysisActorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BattleAnalysisActorInfo)
  return false;
#undef DO_
}

void BattleAnalysisActorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BattleAnalysisActorInfo)
  // optional int32 lastField = 1;
  if (has_lastfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lastfield(), output);
  }

  // optional int32 pos_index = 2;
  if (has_pos_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_index(), output);
  }

  // optional int32 area_index = 3;
  if (has_area_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->area_index(), output);
  }

  // optional int32 hp_init = 4;
  if (has_hp_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp_init(), output);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // optional int32 damage = 6;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->damage(), output);
  }

  // optional int32 times_damage = 7;
  if (has_times_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times_damage(), output);
  }

  // optional int32 times_damaged = 8;
  if (has_times_damaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->times_damaged(), output);
  }

  // optional int32 heal = 9;
  if (has_heal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->heal(), output);
  }

  // optional int32 damage_default = 10;
  if (has_damage_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->damage_default(), output);
  }

  // optional int32 times_default = 11;
  if (has_times_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->times_default(), output);
  }

  // optional int32 damage_legend = 12;
  if (has_damage_legend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->damage_legend(), output);
  }

  // optional int32 times_legend = 13;
  if (has_times_legend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->times_legend(), output);
  }

  // optional int32 damage_xp = 14;
  if (has_damage_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->damage_xp(), output);
  }

  // optional int32 times_xp = 15;
  if (has_times_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->times_xp(), output);
  }

  // optional int32 damage_combine = 16;
  if (has_damage_combine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->damage_combine(), output);
  }

  // optional int32 times_combine = 17;
  if (has_times_combine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->times_combine(), output);
  }

  // optional int32 times_strike = 18;
  if (has_times_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->times_strike(), output);
  }

  // optional int32 times_dodge = 19;
  if (has_times_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->times_dodge(), output);
  }

  // optional int32 times_block = 20;
  if (has_times_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->times_block(), output);
  }

  // optional int32 times_lifesteal = 21;
  if (has_times_lifesteal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->times_lifesteal(), output);
  }

  // optional int32 times_kill = 22;
  if (has_times_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->times_kill(), output);
  }

  // optional int32 dead_round = 23;
  if (has_dead_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->dead_round(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:pb.BattleAnalysisActorInfo)
}

int BattleAnalysisActorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lastField = 1;
    if (has_lastfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastfield());
    }

    // optional int32 pos_index = 2;
    if (has_pos_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_index());
    }

    // optional int32 area_index = 3;
    if (has_area_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_index());
    }

    // optional int32 hp_init = 4;
    if (has_hp_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp_init());
    }

    // optional int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 damage = 6;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int32 times_damage = 7;
    if (has_times_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_damage());
    }

    // optional int32 times_damaged = 8;
    if (has_times_damaged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_damaged());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 heal = 9;
    if (has_heal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heal());
    }

    // optional int32 damage_default = 10;
    if (has_damage_default()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_default());
    }

    // optional int32 times_default = 11;
    if (has_times_default()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_default());
    }

    // optional int32 damage_legend = 12;
    if (has_damage_legend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_legend());
    }

    // optional int32 times_legend = 13;
    if (has_times_legend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_legend());
    }

    // optional int32 damage_xp = 14;
    if (has_damage_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_xp());
    }

    // optional int32 times_xp = 15;
    if (has_times_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_xp());
    }

    // optional int32 damage_combine = 16;
    if (has_damage_combine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_combine());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 times_combine = 17;
    if (has_times_combine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_combine());
    }

    // optional int32 times_strike = 18;
    if (has_times_strike()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_strike());
    }

    // optional int32 times_dodge = 19;
    if (has_times_dodge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_dodge());
    }

    // optional int32 times_block = 20;
    if (has_times_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_block());
    }

    // optional int32 times_lifesteal = 21;
    if (has_times_lifesteal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_lifesteal());
    }

    // optional int32 times_kill = 22;
    if (has_times_kill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_kill());
    }

    // optional int32 dead_round = 23;
    if (has_dead_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead_round());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleAnalysisActorInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleAnalysisActorInfo*>(&from));
}

void BattleAnalysisActorInfo::MergeFrom(const BattleAnalysisActorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastfield()) {
      set_lastfield(from.lastfield());
    }
    if (from.has_pos_index()) {
      set_pos_index(from.pos_index());
    }
    if (from.has_area_index()) {
      set_area_index(from.area_index());
    }
    if (from.has_hp_init()) {
      set_hp_init(from.hp_init());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_times_damage()) {
      set_times_damage(from.times_damage());
    }
    if (from.has_times_damaged()) {
      set_times_damaged(from.times_damaged());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_heal()) {
      set_heal(from.heal());
    }
    if (from.has_damage_default()) {
      set_damage_default(from.damage_default());
    }
    if (from.has_times_default()) {
      set_times_default(from.times_default());
    }
    if (from.has_damage_legend()) {
      set_damage_legend(from.damage_legend());
    }
    if (from.has_times_legend()) {
      set_times_legend(from.times_legend());
    }
    if (from.has_damage_xp()) {
      set_damage_xp(from.damage_xp());
    }
    if (from.has_times_xp()) {
      set_times_xp(from.times_xp());
    }
    if (from.has_damage_combine()) {
      set_damage_combine(from.damage_combine());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_times_combine()) {
      set_times_combine(from.times_combine());
    }
    if (from.has_times_strike()) {
      set_times_strike(from.times_strike());
    }
    if (from.has_times_dodge()) {
      set_times_dodge(from.times_dodge());
    }
    if (from.has_times_block()) {
      set_times_block(from.times_block());
    }
    if (from.has_times_lifesteal()) {
      set_times_lifesteal(from.times_lifesteal());
    }
    if (from.has_times_kill()) {
      set_times_kill(from.times_kill());
    }
    if (from.has_dead_round()) {
      set_dead_round(from.dead_round());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BattleAnalysisActorInfo::CopyFrom(const BattleAnalysisActorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleAnalysisActorInfo::IsInitialized() const {

  return true;
}

void BattleAnalysisActorInfo::Swap(BattleAnalysisActorInfo* other) {
  if (other != this) {
    std::swap(lastfield_, other->lastfield_);
    std::swap(pos_index_, other->pos_index_);
    std::swap(area_index_, other->area_index_);
    std::swap(hp_init_, other->hp_init_);
    std::swap(hp_, other->hp_);
    std::swap(damage_, other->damage_);
    std::swap(times_damage_, other->times_damage_);
    std::swap(times_damaged_, other->times_damaged_);
    std::swap(heal_, other->heal_);
    std::swap(damage_default_, other->damage_default_);
    std::swap(times_default_, other->times_default_);
    std::swap(damage_legend_, other->damage_legend_);
    std::swap(times_legend_, other->times_legend_);
    std::swap(damage_xp_, other->damage_xp_);
    std::swap(times_xp_, other->times_xp_);
    std::swap(damage_combine_, other->damage_combine_);
    std::swap(times_combine_, other->times_combine_);
    std::swap(times_strike_, other->times_strike_);
    std::swap(times_dodge_, other->times_dodge_);
    std::swap(times_block_, other->times_block_);
    std::swap(times_lifesteal_, other->times_lifesteal_);
    std::swap(times_kill_, other->times_kill_);
    std::swap(dead_round_, other->dead_round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleAnalysisActorInfo::GetTypeName() const {
  return "pb.BattleAnalysisActorInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleAnalysis::kActorInfosFieldNumber;
#endif  // !_MSC_VER

BattleAnalysis::BattleAnalysis()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BattleAnalysis)
}

void BattleAnalysis::InitAsDefaultInstance() {
}

BattleAnalysis::BattleAnalysis(const BattleAnalysis& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BattleAnalysis)
}

void BattleAnalysis::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleAnalysis::~BattleAnalysis() {
  // @@protoc_insertion_point(destructor:pb.BattleAnalysis)
  SharedDtor();
}

void BattleAnalysis::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleAnalysis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleAnalysis& BattleAnalysis::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleAnalysis_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleAnalysis_2eproto();
#endif
  return *default_instance_;
}

BattleAnalysis* BattleAnalysis::default_instance_ = NULL;

BattleAnalysis* BattleAnalysis::New() const {
  return new BattleAnalysis;
}

void BattleAnalysis::Clear() {
  actor_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BattleAnalysis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:pb.BattleAnalysis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.BattleAnalysisActorInfo actor_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_actor_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actor_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_actor_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BattleAnalysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BattleAnalysis)
  return false;
#undef DO_
}

void BattleAnalysis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BattleAnalysis)
  // repeated .pb.BattleAnalysisActorInfo actor_infos = 1;
  for (int i = 0; i < this->actor_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->actor_infos(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:pb.BattleAnalysis)
}

int BattleAnalysis::ByteSize() const {
  int total_size = 0;

  // repeated .pb.BattleAnalysisActorInfo actor_infos = 1;
  total_size += 1 * this->actor_infos_size();
  for (int i = 0; i < this->actor_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actor_infos(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleAnalysis::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleAnalysis*>(&from));
}

void BattleAnalysis::MergeFrom(const BattleAnalysis& from) {
  GOOGLE_CHECK_NE(&from, this);
  actor_infos_.MergeFrom(from.actor_infos_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BattleAnalysis::CopyFrom(const BattleAnalysis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleAnalysis::IsInitialized() const {

  return true;
}

void BattleAnalysis::Swap(BattleAnalysis* other) {
  if (other != this) {
    actor_infos_.Swap(&other->actor_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleAnalysis::GetTypeName() const {
  return "pb.BattleAnalysis";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
