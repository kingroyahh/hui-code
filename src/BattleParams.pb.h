// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleParams.proto

#ifndef PROTOBUF_BattleParams_2eproto__INCLUDED
#define PROTOBUF_BattleParams_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "BattleCommand.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BattleParams_2eproto();
void protobuf_AssignDesc_BattleParams_2eproto();
void protobuf_ShutdownFile_BattleParams_2eproto();

class InitSkillInfo;
class AttrInfo;
class BuffInfo;
class BattleUserInfo;
class InitActorInfo;
class InitBattleAreaInfo;
class BattleParams;

// ===================================================================

/*FOR2LUA
<Record>
	<name>InitSkillInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleParams.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class InitSkillInfo : public ::google::protobuf::Message {
 public:
  InitSkillInfo();
  virtual ~InitSkillInfo();

  InitSkillInfo(const InitSkillInfo& from);

  inline InitSkillInfo& operator=(const InitSkillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitSkillInfo& default_instance();

  void Swap(InitSkillInfo* other);

  // implements Message ----------------------------------------------

  InitSkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitSkillInfo& from);
  void MergeFrom(const InitSkillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>InitSkillInfo</name>
  	<Function>
  		<name>skill_id</name>
  		<replaceName>skill_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skill_id</name>
  		<replaceName>skill_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skill_id</name>
  		<replaceName>skill_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // optional int32 skill_lv = 2;
  inline bool has_skill_lv() const;
  inline void clear_skill_lv();
  static const int kSkillLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>InitSkillInfo</name>
  	<Function>
  		<name>skill_lv</name>
  		<replaceName>skill_lv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skill_lv</name>
  		<replaceName>skill_lv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skill_lv</name>
  		<replaceName>skill_lv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skill_lv() const;
  inline void set_skill_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.InitSkillInfo)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_lv();
  inline void clear_has_skill_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 skill_lv_;
  friend void  protobuf_AddDesc_BattleParams_2eproto();
  friend void protobuf_AssignDesc_BattleParams_2eproto();
  friend void protobuf_ShutdownFile_BattleParams_2eproto();

  void InitAsDefaultInstance();
  static InitSkillInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>AttrInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleParams.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class AttrInfo : public ::google::protobuf::Message {
 public:
  AttrInfo();
  virtual ~AttrInfo();

  AttrInfo(const AttrInfo& from);

  inline AttrInfo& operator=(const AttrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttrInfo& default_instance();

  void Swap(AttrInfo* other);

  // implements Message ----------------------------------------------

  AttrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttrInfo& from);
  void MergeFrom(const AttrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 attr_id = 1;
  inline bool has_attr_id() const;
  inline void clear_attr_id();
  static const int kAttrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>AttrInfo</name>
  	<Function>
  		<name>attr_id</name>
  		<replaceName>attr_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attr_id</name>
  		<replaceName>attr_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attr_id</name>
  		<replaceName>attr_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 attr_id() const;
  inline void set_attr_id(::google::protobuf::int32 value);

  // optional float attr_value = 2;
  inline bool has_attr_value() const;
  inline void clear_attr_value();
  static const int kAttrValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>AttrInfo</name>
  	<Function>
  		<name>attr_value</name>
  		<replaceName>attr_value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attr_value</name>
  		<replaceName>attr_value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attr_value</name>
  		<replaceName>attr_value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float attr_value() const;
  inline void set_attr_value(float value);

  // @@protoc_insertion_point(class_scope:pb.AttrInfo)
 private:
  inline void set_has_attr_id();
  inline void clear_has_attr_id();
  inline void set_has_attr_value();
  inline void clear_has_attr_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 attr_id_;
  float attr_value_;
  friend void  protobuf_AddDesc_BattleParams_2eproto();
  friend void protobuf_AssignDesc_BattleParams_2eproto();
  friend void protobuf_ShutdownFile_BattleParams_2eproto();

  void InitAsDefaultInstance();
  static AttrInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleParams.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffInfo : public ::google::protobuf::Message {
 public:
  BuffInfo();
  virtual ~BuffInfo();

  BuffInfo(const BuffInfo& from);

  inline BuffInfo& operator=(const BuffInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffInfo& default_instance();

  void Swap(BuffInfo* other);

  // implements Message ----------------------------------------------

  BuffInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffInfo& from);
  void MergeFrom(const BuffInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 buff_id = 1;
  inline bool has_buff_id() const;
  inline void clear_buff_id();
  static const int kBuffIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffInfo</name>
  	<Function>
  		<name>buff_id</name>
  		<replaceName>buff_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buff_id</name>
  		<replaceName>buff_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buff_id</name>
  		<replaceName>buff_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buff_id() const;
  inline void set_buff_id(::google::protobuf::int32 value);

  // optional int32 buff_lv = 2;
  inline bool has_buff_lv() const;
  inline void clear_buff_lv();
  static const int kBuffLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffInfo</name>
  	<Function>
  		<name>buff_lv</name>
  		<replaceName>buff_lv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buff_lv</name>
  		<replaceName>buff_lv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buff_lv</name>
  		<replaceName>buff_lv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buff_lv() const;
  inline void set_buff_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffInfo)
 private:
  inline void set_has_buff_id();
  inline void clear_has_buff_id();
  inline void set_has_buff_lv();
  inline void clear_has_buff_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 buff_id_;
  ::google::protobuf::int32 buff_lv_;
  friend void  protobuf_AddDesc_BattleParams_2eproto();
  friend void protobuf_AssignDesc_BattleParams_2eproto();
  friend void protobuf_ShutdownFile_BattleParams_2eproto();

  void InitAsDefaultInstance();
  static BuffInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BattleUserInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleParams.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BattleUserInfo : public ::google::protobuf::Message {
 public:
  BattleUserInfo();
  virtual ~BattleUserInfo();

  BattleUserInfo(const BattleUserInfo& from);

  inline BattleUserInfo& operator=(const BattleUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleUserInfo& default_instance();

  void Swap(BattleUserInfo* other);

  // implements Message ----------------------------------------------

  BattleUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleUserInfo& from);
  void MergeFrom(const BattleUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 guildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BattleUserInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>guildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>guildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>guildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string guildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BattleUserInfo</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>guildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>guildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>guildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional int32 vipLevel = 3;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BattleUserInfo</name>
  	<Function>
  		<name>viplevel</name>
  		<replaceName>vipLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viplevel</name>
  		<replaceName>vipLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viplevel</name>
  		<replaceName>vipLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 power = 4;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BattleUserInfo</name>
  	<Function>
  		<name>power</name>
  		<replaceName>power</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_power</name>
  		<replaceName>power</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_power</name>
  		<replaceName>power</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BattleUserInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 head = 6;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BattleUserInfo</name>
  	<Function>
  		<name>head</name>
  		<replaceName>head</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_head</name>
  		<replaceName>head</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_head</name>
  		<replaceName>head</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 head() const;
  inline void set_head(::google::protobuf::int32 value);

  // optional int32 headFrame = 7;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>BattleUserInfo</name>
  	<Function>
  		<name>headframe</name>
  		<replaceName>headFrame</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_headframe</name>
  		<replaceName>headFrame</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_headframe</name>
  		<replaceName>headFrame</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BattleUserInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_headframe();
  inline void clear_has_headframe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 power_;
  ::std::string* name_;
  ::google::protobuf::int32 head_;
  ::google::protobuf::int32 headframe_;
  friend void  protobuf_AddDesc_BattleParams_2eproto();
  friend void protobuf_AssignDesc_BattleParams_2eproto();
  friend void protobuf_ShutdownFile_BattleParams_2eproto();

  void InitAsDefaultInstance();
  static BattleUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>InitActorInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleParams.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class InitActorInfo : public ::google::protobuf::Message {
 public:
  InitActorInfo();
  virtual ~InitActorInfo();

  InitActorInfo(const InitActorInfo& from);

  inline InitActorInfo& operator=(const InitActorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitActorInfo& default_instance();

  void Swap(InitActorInfo* other);

  // implements Message ----------------------------------------------

  InitActorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitActorInfo& from);
  void MergeFrom(const InitActorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>hero_id</name>
  		<replaceName>hero_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hero_id</name>
  		<replaceName>hero_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hero_id</name>
  		<replaceName>hero_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hero_id() const;
  inline void set_hero_id(::google::protobuf::int32 value);

  // optional int32 meta_id = 2;
  inline bool has_meta_id() const;
  inline void clear_meta_id();
  static const int kMetaIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>meta_id</name>
  		<replaceName>meta_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_meta_id</name>
  		<replaceName>meta_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_meta_id</name>
  		<replaceName>meta_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 meta_id() const;
  inline void set_meta_id(::google::protobuf::int32 value);

  // optional int32 area_index = 3;
  inline bool has_area_index() const;
  inline void clear_area_index();
  static const int kAreaIndexFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>area_index</name>
  		<replaceName>area_index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_area_index</name>
  		<replaceName>area_index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_area_index</name>
  		<replaceName>area_index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 area_index() const;
  inline void set_area_index(::google::protobuf::int32 value);

  // optional int32 pos_index = 4;
  inline bool has_pos_index() const;
  inline void clear_pos_index();
  static const int kPosIndexFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>pos_index</name>
  		<replaceName>pos_index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos_index</name>
  		<replaceName>pos_index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos_index</name>
  		<replaceName>pos_index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 pos_index() const;
  inline void set_pos_index(::google::protobuf::int32 value);

  // optional .pb.InitSkillInfo default_skill = 5;
  inline bool has_default_skill() const;
  inline void clear_default_skill();
  static const int kDefaultSkillFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>default_skill</name>
  		<replaceName>default_skill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_default_skill</name>
  		<replaceName>default_skill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_default_skill</name>
  		<replaceName>default_skill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::InitSkillInfo& default_skill() const;
  inline ::pb::InitSkillInfo* mutable_default_skill();
  inline ::pb::InitSkillInfo* release_default_skill();
  inline void set_allocated_default_skill(::pb::InitSkillInfo* default_skill);

  // optional .pb.InitSkillInfo legend_skill = 6;
  inline bool has_legend_skill() const;
  inline void clear_legend_skill();
  static const int kLegendSkillFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>legend_skill</name>
  		<replaceName>legend_skill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_legend_skill</name>
  		<replaceName>legend_skill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_legend_skill</name>
  		<replaceName>legend_skill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::InitSkillInfo& legend_skill() const;
  inline ::pb::InitSkillInfo* mutable_legend_skill();
  inline ::pb::InitSkillInfo* release_legend_skill();
  inline void set_allocated_legend_skill(::pb::InitSkillInfo* legend_skill);

  // optional .pb.InitSkillInfo xp_skill = 7;
  inline bool has_xp_skill() const;
  inline void clear_xp_skill();
  static const int kXpSkillFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>xp_skill</name>
  		<replaceName>xp_skill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_xp_skill</name>
  		<replaceName>xp_skill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_xp_skill</name>
  		<replaceName>xp_skill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::InitSkillInfo& xp_skill() const;
  inline ::pb::InitSkillInfo* mutable_xp_skill();
  inline ::pb::InitSkillInfo* release_xp_skill();
  inline void set_allocated_xp_skill(::pb::InitSkillInfo* xp_skill);

  // optional .pb.InitSkillInfo combine_skill = 8;
  inline bool has_combine_skill() const;
  inline void clear_combine_skill();
  static const int kCombineSkillFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>combine_skill</name>
  		<replaceName>combine_skill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_combine_skill</name>
  		<replaceName>combine_skill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_combine_skill</name>
  		<replaceName>combine_skill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::InitSkillInfo& combine_skill() const;
  inline ::pb::InitSkillInfo* mutable_combine_skill();
  inline ::pb::InitSkillInfo* release_combine_skill();
  inline void set_allocated_combine_skill(::pb::InitSkillInfo* combine_skill);

  // repeated .pb.AttrInfo attr_infos = 9;
  inline int attr_infos_size() const;
  inline void clear_attr_infos();
  static const int kAttrInfosFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>attr_infos</name>
  		<replaceName>attr_infos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attr_infos</name>
  		<replaceName>attr_infos</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_attr_infos</name>
  		<replaceName>attr_infos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attr_infos_size</name>
  		<replaceName>attr_infos</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AttrInfo& attr_infos(int index) const;
  inline ::pb::AttrInfo* mutable_attr_infos(int index);
  inline ::pb::AttrInfo* add_attr_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::AttrInfo >&
      attr_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::AttrInfo >*
      mutable_attr_infos();

  // repeated .pb.BuffInfo buff_infos = 10;
  inline int buff_infos_size() const;
  inline void clear_buff_infos();
  static const int kBuffInfosFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>buff_infos</name>
  		<replaceName>buff_infos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buff_infos</name>
  		<replaceName>buff_infos</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_buff_infos</name>
  		<replaceName>buff_infos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buff_infos_size</name>
  		<replaceName>buff_infos</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BuffInfo& buff_infos(int index) const;
  inline ::pb::BuffInfo* mutable_buff_infos(int index);
  inline ::pb::BuffInfo* add_buff_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffInfo >&
      buff_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BuffInfo >*
      mutable_buff_infos();

  // optional string name = 11;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 hp = 12;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>hp</name>
  		<replaceName>hp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hp</name>
  		<replaceName>hp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hp</name>
  		<replaceName>hp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 xp = 13;
  inline bool has_xp() const;
  inline void clear_xp();
  static const int kXpFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>xp</name>
  		<replaceName>xp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_xp</name>
  		<replaceName>xp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_xp</name>
  		<replaceName>xp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 xp() const;
  inline void set_xp(::google::protobuf::int32 value);

  // optional int32 activeRound = 14;
  inline bool has_activeround() const;
  inline void clear_activeround();
  static const int kActiveRoundFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>activeround</name>
  		<replaceName>activeRound</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_activeround</name>
  		<replaceName>activeRound</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activeround</name>
  		<replaceName>activeRound</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 activeround() const;
  inline void set_activeround(::google::protobuf::int32 value);

  // optional int32 fashionId = 15;
  inline bool has_fashionid() const;
  inline void clear_fashionid();
  static const int kFashionIdFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>fashionid</name>
  		<replaceName>fashionId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fashionid</name>
  		<replaceName>fashionId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fashionid</name>
  		<replaceName>fashionId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 fashionid() const;
  inline void set_fashionid(::google::protobuf::int32 value);

  // optional int32 level = 16;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 awake = 17;
  inline bool has_awake() const;
  inline void clear_awake();
  static const int kAwakeFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>awake</name>
  		<replaceName>awake</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_awake</name>
  		<replaceName>awake</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_awake</name>
  		<replaceName>awake</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 awake() const;
  inline void set_awake(::google::protobuf::int32 value);

  // optional int32 advance = 18;
  inline bool has_advance() const;
  inline void clear_advance();
  static const int kAdvanceFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>advance</name>
  		<replaceName>advance</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advance</name>
  		<replaceName>advance</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advance</name>
  		<replaceName>advance</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 advance() const;
  inline void set_advance(::google::protobuf::int32 value);

  // optional int32 halo = 19;
  inline bool has_halo() const;
  inline void clear_halo();
  static const int kHaloFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>InitActorInfo</name>
  	<Function>
  		<name>halo</name>
  		<replaceName>halo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_halo</name>
  		<replaceName>halo</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_halo</name>
  		<replaceName>halo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 halo() const;
  inline void set_halo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.InitActorInfo)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_meta_id();
  inline void clear_has_meta_id();
  inline void set_has_area_index();
  inline void clear_has_area_index();
  inline void set_has_pos_index();
  inline void clear_has_pos_index();
  inline void set_has_default_skill();
  inline void clear_has_default_skill();
  inline void set_has_legend_skill();
  inline void clear_has_legend_skill();
  inline void set_has_xp_skill();
  inline void clear_has_xp_skill();
  inline void set_has_combine_skill();
  inline void clear_has_combine_skill();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_xp();
  inline void clear_has_xp();
  inline void set_has_activeround();
  inline void clear_has_activeround();
  inline void set_has_fashionid();
  inline void clear_has_fashionid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_awake();
  inline void clear_has_awake();
  inline void set_has_advance();
  inline void clear_has_advance();
  inline void set_has_halo();
  inline void clear_has_halo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hero_id_;
  ::google::protobuf::int32 meta_id_;
  ::google::protobuf::int32 area_index_;
  ::google::protobuf::int32 pos_index_;
  ::pb::InitSkillInfo* default_skill_;
  ::pb::InitSkillInfo* legend_skill_;
  ::pb::InitSkillInfo* xp_skill_;
  ::pb::InitSkillInfo* combine_skill_;
  ::google::protobuf::RepeatedPtrField< ::pb::AttrInfo > attr_infos_;
  ::google::protobuf::RepeatedPtrField< ::pb::BuffInfo > buff_infos_;
  ::std::string* name_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 xp_;
  ::google::protobuf::int32 activeround_;
  ::google::protobuf::int32 fashionid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 awake_;
  ::google::protobuf::int32 advance_;
  ::google::protobuf::int32 halo_;
  friend void  protobuf_AddDesc_BattleParams_2eproto();
  friend void protobuf_AssignDesc_BattleParams_2eproto();
  friend void protobuf_ShutdownFile_BattleParams_2eproto();

  void InitAsDefaultInstance();
  static InitActorInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>InitBattleAreaInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleParams.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class InitBattleAreaInfo : public ::google::protobuf::Message {
 public:
  InitBattleAreaInfo();
  virtual ~InitBattleAreaInfo();

  InitBattleAreaInfo(const InitBattleAreaInfo& from);

  inline InitBattleAreaInfo& operator=(const InitBattleAreaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitBattleAreaInfo& default_instance();

  void Swap(InitBattleAreaInfo* other);

  // implements Message ----------------------------------------------

  InitBattleAreaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitBattleAreaInfo& from);
  void MergeFrom(const InitBattleAreaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.InitActorInfo actor_infos = 1;
  inline int actor_infos_size() const;
  inline void clear_actor_infos();
  static const int kActorInfosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>InitBattleAreaInfo</name>
  	<Function>
  		<name>actor_infos</name>
  		<replaceName>actor_infos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_actor_infos</name>
  		<replaceName>actor_infos</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_actor_infos</name>
  		<replaceName>actor_infos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>actor_infos_size</name>
  		<replaceName>actor_infos</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::InitActorInfo& actor_infos(int index) const;
  inline ::pb::InitActorInfo* mutable_actor_infos(int index);
  inline ::pb::InitActorInfo* add_actor_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::InitActorInfo >&
      actor_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::InitActorInfo >*
      mutable_actor_infos();

  // @@protoc_insertion_point(class_scope:pb.InitBattleAreaInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::InitActorInfo > actor_infos_;
  friend void  protobuf_AddDesc_BattleParams_2eproto();
  friend void protobuf_AssignDesc_BattleParams_2eproto();
  friend void protobuf_ShutdownFile_BattleParams_2eproto();

  void InitAsDefaultInstance();
  static InitBattleAreaInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BattleParams</name>
	<Function>
		<name>new</name>
		<replaceName>BattleParams.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BattleParams : public ::google::protobuf::Message {
 public:
  BattleParams();
  virtual ~BattleParams();

  BattleParams(const BattleParams& from);

  inline BattleParams& operator=(const BattleParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleParams& default_instance();

  void Swap(BattleParams* other);

  // implements Message ----------------------------------------------

  BattleParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleParams& from);
  void MergeFrom(const BattleParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_round = 1;
  inline bool has_max_round() const;
  inline void clear_max_round();
  static const int kMaxRoundFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>max_round</name>
  		<replaceName>max_round</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_max_round</name>
  		<replaceName>max_round</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_max_round</name>
  		<replaceName>max_round</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 max_round() const;
  inline void set_max_round(::google::protobuf::int32 value);

  // optional int32 first_attack = 2;
  inline bool has_first_attack() const;
  inline void clear_first_attack();
  static const int kFirstAttackFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>first_attack</name>
  		<replaceName>first_attack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_first_attack</name>
  		<replaceName>first_attack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_first_attack</name>
  		<replaceName>first_attack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 first_attack() const;
  inline void set_first_attack(::google::protobuf::int32 value);

  // optional int32 battle_type = 3;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>battle_type</name>
  		<replaceName>battle_type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battle_type</name>
  		<replaceName>battle_type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battle_type</name>
  		<replaceName>battle_type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 battle_type() const;
  inline void set_battle_type(::google::protobuf::int32 value);

  // optional .pb.InitBattleAreaInfo own_area = 4;
  inline bool has_own_area() const;
  inline void clear_own_area();
  static const int kOwnAreaFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>own_area</name>
  		<replaceName>own_area</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_own_area</name>
  		<replaceName>own_area</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_own_area</name>
  		<replaceName>own_area</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::InitBattleAreaInfo& own_area() const;
  inline ::pb::InitBattleAreaInfo* mutable_own_area();
  inline ::pb::InitBattleAreaInfo* release_own_area();
  inline void set_allocated_own_area(::pb::InitBattleAreaInfo* own_area);

  // repeated .pb.InitBattleAreaInfo opp_area = 5;
  inline int opp_area_size() const;
  inline void clear_opp_area();
  static const int kOppAreaFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>opp_area</name>
  		<replaceName>opp_area</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_opp_area</name>
  		<replaceName>opp_area</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_opp_area</name>
  		<replaceName>opp_area</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>opp_area_size</name>
  		<replaceName>opp_area</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::InitBattleAreaInfo& opp_area(int index) const;
  inline ::pb::InitBattleAreaInfo* mutable_opp_area(int index);
  inline ::pb::InitBattleAreaInfo* add_opp_area();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::InitBattleAreaInfo >&
      opp_area() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::InitBattleAreaInfo >*
      mutable_opp_area();

  // repeated .pb.UserCommand Commands = 6;
  inline int commands_size() const;
  inline void clear_commands();
  static const int kCommandsFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>commands</name>
  		<replaceName>Commands</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_commands</name>
  		<replaceName>Commands</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_commands</name>
  		<replaceName>Commands</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>commands_size</name>
  		<replaceName>Commands</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::UserCommand& commands(int index) const;
  inline ::pb::UserCommand* mutable_commands(int index);
  inline ::pb::UserCommand* add_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::UserCommand >&
      commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::UserCommand >*
      mutable_commands();

  // repeated int32 power = 7;
  inline int power_size() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>power</name>
  		<replaceName>power</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_power</name>
  		<replaceName>power</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_power</name>
  		<replaceName>power</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>power_size</name>
  		<replaceName>power</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 power(int index) const;
  inline void set_power(int index, ::google::protobuf::int32 value);
  inline void add_power(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      power() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_power();

  // repeated string name = 8;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>name_size</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated int32 templateId = 9;
  inline int templateid_size() const;
  inline void clear_templateid();
  static const int kTemplateIdFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>templateid</name>
  		<replaceName>templateId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_templateid</name>
  		<replaceName>templateId</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_templateid</name>
  		<replaceName>templateId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>templateid_size</name>
  		<replaceName>templateId</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 templateid(int index) const;
  inline void set_templateid(int index, ::google::protobuf::int32 value);
  inline void add_templateid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      templateid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_templateid();

  // optional int32 randomSeed = 10;
  inline bool has_randomseed() const;
  inline void clear_randomseed();
  static const int kRandomSeedFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>randomseed</name>
  		<replaceName>randomSeed</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_randomseed</name>
  		<replaceName>randomSeed</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randomseed</name>
  		<replaceName>randomSeed</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 randomseed() const;
  inline void set_randomseed(::google::protobuf::int32 value);

  // optional int32 stage_id = 11;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>stage_id</name>
  		<replaceName>stage_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stage_id</name>
  		<replaceName>stage_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stage_id</name>
  		<replaceName>stage_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 stage_id() const;
  inline void set_stage_id(::google::protobuf::int32 value);

  // repeated .pb.BattleUserInfo userInfo = 12;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>BattleParams</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>userInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userinfo</name>
  		<replaceName>userInfo</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>userInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userinfo_size</name>
  		<replaceName>userInfo</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BattleUserInfo& userinfo(int index) const;
  inline ::pb::BattleUserInfo* mutable_userinfo(int index);
  inline ::pb::BattleUserInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BattleUserInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BattleUserInfo >*
      mutable_userinfo();

  // @@protoc_insertion_point(class_scope:pb.BattleParams)
 private:
  inline void set_has_max_round();
  inline void clear_has_max_round();
  inline void set_has_first_attack();
  inline void clear_has_first_attack();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();
  inline void set_has_own_area();
  inline void clear_has_own_area();
  inline void set_has_randomseed();
  inline void clear_has_randomseed();
  inline void set_has_stage_id();
  inline void clear_has_stage_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 max_round_;
  ::google::protobuf::int32 first_attack_;
  ::pb::InitBattleAreaInfo* own_area_;
  ::google::protobuf::RepeatedPtrField< ::pb::InitBattleAreaInfo > opp_area_;
  ::google::protobuf::RepeatedPtrField< ::pb::UserCommand > commands_;
  ::google::protobuf::int32 battle_type_;
  ::google::protobuf::int32 randomseed_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > power_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > templateid_;
  ::google::protobuf::RepeatedPtrField< ::pb::BattleUserInfo > userinfo_;
  ::google::protobuf::int32 stage_id_;
  friend void  protobuf_AddDesc_BattleParams_2eproto();
  friend void protobuf_AssignDesc_BattleParams_2eproto();
  friend void protobuf_ShutdownFile_BattleParams_2eproto();

  void InitAsDefaultInstance();
  static BattleParams* default_instance_;
};
// ===================================================================


// ===================================================================

// InitSkillInfo

// optional int32 skill_id = 1;
inline bool InitSkillInfo::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitSkillInfo::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitSkillInfo::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitSkillInfo::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 InitSkillInfo::skill_id() const {
  // @@protoc_insertion_point(field_get:pb.InitSkillInfo.skill_id)
  return skill_id_;
}
inline void InitSkillInfo::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:pb.InitSkillInfo.skill_id)
}

// optional int32 skill_lv = 2;
inline bool InitSkillInfo::has_skill_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitSkillInfo::set_has_skill_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitSkillInfo::clear_has_skill_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitSkillInfo::clear_skill_lv() {
  skill_lv_ = 0;
  clear_has_skill_lv();
}
inline ::google::protobuf::int32 InitSkillInfo::skill_lv() const {
  // @@protoc_insertion_point(field_get:pb.InitSkillInfo.skill_lv)
  return skill_lv_;
}
inline void InitSkillInfo::set_skill_lv(::google::protobuf::int32 value) {
  set_has_skill_lv();
  skill_lv_ = value;
  // @@protoc_insertion_point(field_set:pb.InitSkillInfo.skill_lv)
}

// -------------------------------------------------------------------

// AttrInfo

// optional int32 attr_id = 1;
inline bool AttrInfo::has_attr_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttrInfo::set_has_attr_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttrInfo::clear_has_attr_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttrInfo::clear_attr_id() {
  attr_id_ = 0;
  clear_has_attr_id();
}
inline ::google::protobuf::int32 AttrInfo::attr_id() const {
  // @@protoc_insertion_point(field_get:pb.AttrInfo.attr_id)
  return attr_id_;
}
inline void AttrInfo::set_attr_id(::google::protobuf::int32 value) {
  set_has_attr_id();
  attr_id_ = value;
  // @@protoc_insertion_point(field_set:pb.AttrInfo.attr_id)
}

// optional float attr_value = 2;
inline bool AttrInfo::has_attr_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttrInfo::set_has_attr_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttrInfo::clear_has_attr_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttrInfo::clear_attr_value() {
  attr_value_ = 0;
  clear_has_attr_value();
}
inline float AttrInfo::attr_value() const {
  // @@protoc_insertion_point(field_get:pb.AttrInfo.attr_value)
  return attr_value_;
}
inline void AttrInfo::set_attr_value(float value) {
  set_has_attr_value();
  attr_value_ = value;
  // @@protoc_insertion_point(field_set:pb.AttrInfo.attr_value)
}

// -------------------------------------------------------------------

// BuffInfo

// optional int32 buff_id = 1;
inline bool BuffInfo::has_buff_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffInfo::set_has_buff_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffInfo::clear_has_buff_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffInfo::clear_buff_id() {
  buff_id_ = 0;
  clear_has_buff_id();
}
inline ::google::protobuf::int32 BuffInfo::buff_id() const {
  // @@protoc_insertion_point(field_get:pb.BuffInfo.buff_id)
  return buff_id_;
}
inline void BuffInfo::set_buff_id(::google::protobuf::int32 value) {
  set_has_buff_id();
  buff_id_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffInfo.buff_id)
}

// optional int32 buff_lv = 2;
inline bool BuffInfo::has_buff_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffInfo::set_has_buff_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffInfo::clear_has_buff_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffInfo::clear_buff_lv() {
  buff_lv_ = 0;
  clear_has_buff_lv();
}
inline ::google::protobuf::int32 BuffInfo::buff_lv() const {
  // @@protoc_insertion_point(field_get:pb.BuffInfo.buff_lv)
  return buff_lv_;
}
inline void BuffInfo::set_buff_lv(::google::protobuf::int32 value) {
  set_has_buff_lv();
  buff_lv_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffInfo.buff_lv)
}

// -------------------------------------------------------------------

// BattleUserInfo

// optional uint64 guildId = 1;
inline bool BattleUserInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleUserInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleUserInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleUserInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 BattleUserInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.BattleUserInfo.guildId)
  return guildid_;
}
inline void BattleUserInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleUserInfo.guildId)
}

// optional string guildName = 2;
inline bool BattleUserInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleUserInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleUserInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleUserInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& BattleUserInfo::guildname() const {
  // @@protoc_insertion_point(field_get:pb.BattleUserInfo.guildName)
  return *guildname_;
}
inline void BattleUserInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BattleUserInfo.guildName)
}
inline void BattleUserInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BattleUserInfo.guildName)
}
inline void BattleUserInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BattleUserInfo.guildName)
}
inline ::std::string* BattleUserInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BattleUserInfo.guildName)
  return guildname_;
}
inline ::std::string* BattleUserInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BattleUserInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BattleUserInfo.guildName)
}

// optional int32 vipLevel = 3;
inline bool BattleUserInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleUserInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleUserInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleUserInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 BattleUserInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:pb.BattleUserInfo.vipLevel)
  return viplevel_;
}
inline void BattleUserInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleUserInfo.vipLevel)
}

// optional int32 power = 4;
inline bool BattleUserInfo::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleUserInfo::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleUserInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleUserInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 BattleUserInfo::power() const {
  // @@protoc_insertion_point(field_get:pb.BattleUserInfo.power)
  return power_;
}
inline void BattleUserInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleUserInfo.power)
}

// optional string name = 5;
inline bool BattleUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleUserInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BattleUserInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.BattleUserInfo.name)
  return *name_;
}
inline void BattleUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BattleUserInfo.name)
}
inline void BattleUserInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BattleUserInfo.name)
}
inline void BattleUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BattleUserInfo.name)
}
inline ::std::string* BattleUserInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BattleUserInfo.name)
  return name_;
}
inline ::std::string* BattleUserInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BattleUserInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BattleUserInfo.name)
}

// optional int32 head = 6;
inline bool BattleUserInfo::has_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleUserInfo::set_has_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleUserInfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleUserInfo::clear_head() {
  head_ = 0;
  clear_has_head();
}
inline ::google::protobuf::int32 BattleUserInfo::head() const {
  // @@protoc_insertion_point(field_get:pb.BattleUserInfo.head)
  return head_;
}
inline void BattleUserInfo::set_head(::google::protobuf::int32 value) {
  set_has_head();
  head_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleUserInfo.head)
}

// optional int32 headFrame = 7;
inline bool BattleUserInfo::has_headframe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleUserInfo::set_has_headframe() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleUserInfo::clear_has_headframe() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleUserInfo::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 BattleUserInfo::headframe() const {
  // @@protoc_insertion_point(field_get:pb.BattleUserInfo.headFrame)
  return headframe_;
}
inline void BattleUserInfo::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleUserInfo.headFrame)
}

// -------------------------------------------------------------------

// InitActorInfo

// optional int32 hero_id = 1;
inline bool InitActorInfo::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitActorInfo::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitActorInfo::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitActorInfo::clear_hero_id() {
  hero_id_ = 0;
  clear_has_hero_id();
}
inline ::google::protobuf::int32 InitActorInfo::hero_id() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.hero_id)
  return hero_id_;
}
inline void InitActorInfo::set_hero_id(::google::protobuf::int32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.hero_id)
}

// optional int32 meta_id = 2;
inline bool InitActorInfo::has_meta_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitActorInfo::set_has_meta_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitActorInfo::clear_has_meta_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitActorInfo::clear_meta_id() {
  meta_id_ = 0;
  clear_has_meta_id();
}
inline ::google::protobuf::int32 InitActorInfo::meta_id() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.meta_id)
  return meta_id_;
}
inline void InitActorInfo::set_meta_id(::google::protobuf::int32 value) {
  set_has_meta_id();
  meta_id_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.meta_id)
}

// optional int32 area_index = 3;
inline bool InitActorInfo::has_area_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitActorInfo::set_has_area_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitActorInfo::clear_has_area_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitActorInfo::clear_area_index() {
  area_index_ = 0;
  clear_has_area_index();
}
inline ::google::protobuf::int32 InitActorInfo::area_index() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.area_index)
  return area_index_;
}
inline void InitActorInfo::set_area_index(::google::protobuf::int32 value) {
  set_has_area_index();
  area_index_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.area_index)
}

// optional int32 pos_index = 4;
inline bool InitActorInfo::has_pos_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InitActorInfo::set_has_pos_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InitActorInfo::clear_has_pos_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InitActorInfo::clear_pos_index() {
  pos_index_ = 0;
  clear_has_pos_index();
}
inline ::google::protobuf::int32 InitActorInfo::pos_index() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.pos_index)
  return pos_index_;
}
inline void InitActorInfo::set_pos_index(::google::protobuf::int32 value) {
  set_has_pos_index();
  pos_index_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.pos_index)
}

// optional .pb.InitSkillInfo default_skill = 5;
inline bool InitActorInfo::has_default_skill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InitActorInfo::set_has_default_skill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InitActorInfo::clear_has_default_skill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InitActorInfo::clear_default_skill() {
  if (default_skill_ != NULL) default_skill_->::pb::InitSkillInfo::Clear();
  clear_has_default_skill();
}
inline const ::pb::InitSkillInfo& InitActorInfo::default_skill() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.default_skill)
  return default_skill_ != NULL ? *default_skill_ : *default_instance_->default_skill_;
}
inline ::pb::InitSkillInfo* InitActorInfo::mutable_default_skill() {
  set_has_default_skill();
  if (default_skill_ == NULL) default_skill_ = new ::pb::InitSkillInfo;
  // @@protoc_insertion_point(field_mutable:pb.InitActorInfo.default_skill)
  return default_skill_;
}
inline ::pb::InitSkillInfo* InitActorInfo::release_default_skill() {
  clear_has_default_skill();
  ::pb::InitSkillInfo* temp = default_skill_;
  default_skill_ = NULL;
  return temp;
}
inline void InitActorInfo::set_allocated_default_skill(::pb::InitSkillInfo* default_skill) {
  delete default_skill_;
  default_skill_ = default_skill;
  if (default_skill) {
    set_has_default_skill();
  } else {
    clear_has_default_skill();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.InitActorInfo.default_skill)
}

// optional .pb.InitSkillInfo legend_skill = 6;
inline bool InitActorInfo::has_legend_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InitActorInfo::set_has_legend_skill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InitActorInfo::clear_has_legend_skill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InitActorInfo::clear_legend_skill() {
  if (legend_skill_ != NULL) legend_skill_->::pb::InitSkillInfo::Clear();
  clear_has_legend_skill();
}
inline const ::pb::InitSkillInfo& InitActorInfo::legend_skill() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.legend_skill)
  return legend_skill_ != NULL ? *legend_skill_ : *default_instance_->legend_skill_;
}
inline ::pb::InitSkillInfo* InitActorInfo::mutable_legend_skill() {
  set_has_legend_skill();
  if (legend_skill_ == NULL) legend_skill_ = new ::pb::InitSkillInfo;
  // @@protoc_insertion_point(field_mutable:pb.InitActorInfo.legend_skill)
  return legend_skill_;
}
inline ::pb::InitSkillInfo* InitActorInfo::release_legend_skill() {
  clear_has_legend_skill();
  ::pb::InitSkillInfo* temp = legend_skill_;
  legend_skill_ = NULL;
  return temp;
}
inline void InitActorInfo::set_allocated_legend_skill(::pb::InitSkillInfo* legend_skill) {
  delete legend_skill_;
  legend_skill_ = legend_skill;
  if (legend_skill) {
    set_has_legend_skill();
  } else {
    clear_has_legend_skill();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.InitActorInfo.legend_skill)
}

// optional .pb.InitSkillInfo xp_skill = 7;
inline bool InitActorInfo::has_xp_skill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InitActorInfo::set_has_xp_skill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InitActorInfo::clear_has_xp_skill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InitActorInfo::clear_xp_skill() {
  if (xp_skill_ != NULL) xp_skill_->::pb::InitSkillInfo::Clear();
  clear_has_xp_skill();
}
inline const ::pb::InitSkillInfo& InitActorInfo::xp_skill() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.xp_skill)
  return xp_skill_ != NULL ? *xp_skill_ : *default_instance_->xp_skill_;
}
inline ::pb::InitSkillInfo* InitActorInfo::mutable_xp_skill() {
  set_has_xp_skill();
  if (xp_skill_ == NULL) xp_skill_ = new ::pb::InitSkillInfo;
  // @@protoc_insertion_point(field_mutable:pb.InitActorInfo.xp_skill)
  return xp_skill_;
}
inline ::pb::InitSkillInfo* InitActorInfo::release_xp_skill() {
  clear_has_xp_skill();
  ::pb::InitSkillInfo* temp = xp_skill_;
  xp_skill_ = NULL;
  return temp;
}
inline void InitActorInfo::set_allocated_xp_skill(::pb::InitSkillInfo* xp_skill) {
  delete xp_skill_;
  xp_skill_ = xp_skill;
  if (xp_skill) {
    set_has_xp_skill();
  } else {
    clear_has_xp_skill();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.InitActorInfo.xp_skill)
}

// optional .pb.InitSkillInfo combine_skill = 8;
inline bool InitActorInfo::has_combine_skill() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InitActorInfo::set_has_combine_skill() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InitActorInfo::clear_has_combine_skill() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InitActorInfo::clear_combine_skill() {
  if (combine_skill_ != NULL) combine_skill_->::pb::InitSkillInfo::Clear();
  clear_has_combine_skill();
}
inline const ::pb::InitSkillInfo& InitActorInfo::combine_skill() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.combine_skill)
  return combine_skill_ != NULL ? *combine_skill_ : *default_instance_->combine_skill_;
}
inline ::pb::InitSkillInfo* InitActorInfo::mutable_combine_skill() {
  set_has_combine_skill();
  if (combine_skill_ == NULL) combine_skill_ = new ::pb::InitSkillInfo;
  // @@protoc_insertion_point(field_mutable:pb.InitActorInfo.combine_skill)
  return combine_skill_;
}
inline ::pb::InitSkillInfo* InitActorInfo::release_combine_skill() {
  clear_has_combine_skill();
  ::pb::InitSkillInfo* temp = combine_skill_;
  combine_skill_ = NULL;
  return temp;
}
inline void InitActorInfo::set_allocated_combine_skill(::pb::InitSkillInfo* combine_skill) {
  delete combine_skill_;
  combine_skill_ = combine_skill;
  if (combine_skill) {
    set_has_combine_skill();
  } else {
    clear_has_combine_skill();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.InitActorInfo.combine_skill)
}

// repeated .pb.AttrInfo attr_infos = 9;
inline int InitActorInfo::attr_infos_size() const {
  return attr_infos_.size();
}
inline void InitActorInfo::clear_attr_infos() {
  attr_infos_.Clear();
}
inline const ::pb::AttrInfo& InitActorInfo::attr_infos(int index) const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.attr_infos)
  return attr_infos_.Get(index);
}
inline ::pb::AttrInfo* InitActorInfo::mutable_attr_infos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.InitActorInfo.attr_infos)
  return attr_infos_.Mutable(index);
}
inline ::pb::AttrInfo* InitActorInfo::add_attr_infos() {
  // @@protoc_insertion_point(field_add:pb.InitActorInfo.attr_infos)
  return attr_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::AttrInfo >&
InitActorInfo::attr_infos() const {
  // @@protoc_insertion_point(field_list:pb.InitActorInfo.attr_infos)
  return attr_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::AttrInfo >*
InitActorInfo::mutable_attr_infos() {
  // @@protoc_insertion_point(field_mutable_list:pb.InitActorInfo.attr_infos)
  return &attr_infos_;
}

// repeated .pb.BuffInfo buff_infos = 10;
inline int InitActorInfo::buff_infos_size() const {
  return buff_infos_.size();
}
inline void InitActorInfo::clear_buff_infos() {
  buff_infos_.Clear();
}
inline const ::pb::BuffInfo& InitActorInfo::buff_infos(int index) const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.buff_infos)
  return buff_infos_.Get(index);
}
inline ::pb::BuffInfo* InitActorInfo::mutable_buff_infos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.InitActorInfo.buff_infos)
  return buff_infos_.Mutable(index);
}
inline ::pb::BuffInfo* InitActorInfo::add_buff_infos() {
  // @@protoc_insertion_point(field_add:pb.InitActorInfo.buff_infos)
  return buff_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffInfo >&
InitActorInfo::buff_infos() const {
  // @@protoc_insertion_point(field_list:pb.InitActorInfo.buff_infos)
  return buff_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BuffInfo >*
InitActorInfo::mutable_buff_infos() {
  // @@protoc_insertion_point(field_mutable_list:pb.InitActorInfo.buff_infos)
  return &buff_infos_;
}

// optional string name = 11;
inline bool InitActorInfo::has_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InitActorInfo::set_has_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InitActorInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InitActorInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& InitActorInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.name)
  return *name_;
}
inline void InitActorInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.name)
}
inline void InitActorInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.InitActorInfo.name)
}
inline void InitActorInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.InitActorInfo.name)
}
inline ::std::string* InitActorInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.InitActorInfo.name)
  return name_;
}
inline ::std::string* InitActorInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InitActorInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.InitActorInfo.name)
}

// optional int32 hp = 12;
inline bool InitActorInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InitActorInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InitActorInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InitActorInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 InitActorInfo::hp() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.hp)
  return hp_;
}
inline void InitActorInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.hp)
}

// optional int32 xp = 13;
inline bool InitActorInfo::has_xp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InitActorInfo::set_has_xp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void InitActorInfo::clear_has_xp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void InitActorInfo::clear_xp() {
  xp_ = 0;
  clear_has_xp();
}
inline ::google::protobuf::int32 InitActorInfo::xp() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.xp)
  return xp_;
}
inline void InitActorInfo::set_xp(::google::protobuf::int32 value) {
  set_has_xp();
  xp_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.xp)
}

// optional int32 activeRound = 14;
inline bool InitActorInfo::has_activeround() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InitActorInfo::set_has_activeround() {
  _has_bits_[0] |= 0x00002000u;
}
inline void InitActorInfo::clear_has_activeround() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void InitActorInfo::clear_activeround() {
  activeround_ = 0;
  clear_has_activeround();
}
inline ::google::protobuf::int32 InitActorInfo::activeround() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.activeRound)
  return activeround_;
}
inline void InitActorInfo::set_activeround(::google::protobuf::int32 value) {
  set_has_activeround();
  activeround_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.activeRound)
}

// optional int32 fashionId = 15;
inline bool InitActorInfo::has_fashionid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InitActorInfo::set_has_fashionid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void InitActorInfo::clear_has_fashionid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void InitActorInfo::clear_fashionid() {
  fashionid_ = 0;
  clear_has_fashionid();
}
inline ::google::protobuf::int32 InitActorInfo::fashionid() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.fashionId)
  return fashionid_;
}
inline void InitActorInfo::set_fashionid(::google::protobuf::int32 value) {
  set_has_fashionid();
  fashionid_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.fashionId)
}

// optional int32 level = 16;
inline bool InitActorInfo::has_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void InitActorInfo::set_has_level() {
  _has_bits_[0] |= 0x00008000u;
}
inline void InitActorInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void InitActorInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 InitActorInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.level)
  return level_;
}
inline void InitActorInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.level)
}

// optional int32 awake = 17;
inline bool InitActorInfo::has_awake() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void InitActorInfo::set_has_awake() {
  _has_bits_[0] |= 0x00010000u;
}
inline void InitActorInfo::clear_has_awake() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void InitActorInfo::clear_awake() {
  awake_ = 0;
  clear_has_awake();
}
inline ::google::protobuf::int32 InitActorInfo::awake() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.awake)
  return awake_;
}
inline void InitActorInfo::set_awake(::google::protobuf::int32 value) {
  set_has_awake();
  awake_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.awake)
}

// optional int32 advance = 18;
inline bool InitActorInfo::has_advance() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void InitActorInfo::set_has_advance() {
  _has_bits_[0] |= 0x00020000u;
}
inline void InitActorInfo::clear_has_advance() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void InitActorInfo::clear_advance() {
  advance_ = 0;
  clear_has_advance();
}
inline ::google::protobuf::int32 InitActorInfo::advance() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.advance)
  return advance_;
}
inline void InitActorInfo::set_advance(::google::protobuf::int32 value) {
  set_has_advance();
  advance_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.advance)
}

// optional int32 halo = 19;
inline bool InitActorInfo::has_halo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void InitActorInfo::set_has_halo() {
  _has_bits_[0] |= 0x00040000u;
}
inline void InitActorInfo::clear_has_halo() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void InitActorInfo::clear_halo() {
  halo_ = 0;
  clear_has_halo();
}
inline ::google::protobuf::int32 InitActorInfo::halo() const {
  // @@protoc_insertion_point(field_get:pb.InitActorInfo.halo)
  return halo_;
}
inline void InitActorInfo::set_halo(::google::protobuf::int32 value) {
  set_has_halo();
  halo_ = value;
  // @@protoc_insertion_point(field_set:pb.InitActorInfo.halo)
}

// -------------------------------------------------------------------

// InitBattleAreaInfo

// repeated .pb.InitActorInfo actor_infos = 1;
inline int InitBattleAreaInfo::actor_infos_size() const {
  return actor_infos_.size();
}
inline void InitBattleAreaInfo::clear_actor_infos() {
  actor_infos_.Clear();
}
inline const ::pb::InitActorInfo& InitBattleAreaInfo::actor_infos(int index) const {
  // @@protoc_insertion_point(field_get:pb.InitBattleAreaInfo.actor_infos)
  return actor_infos_.Get(index);
}
inline ::pb::InitActorInfo* InitBattleAreaInfo::mutable_actor_infos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.InitBattleAreaInfo.actor_infos)
  return actor_infos_.Mutable(index);
}
inline ::pb::InitActorInfo* InitBattleAreaInfo::add_actor_infos() {
  // @@protoc_insertion_point(field_add:pb.InitBattleAreaInfo.actor_infos)
  return actor_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::InitActorInfo >&
InitBattleAreaInfo::actor_infos() const {
  // @@protoc_insertion_point(field_list:pb.InitBattleAreaInfo.actor_infos)
  return actor_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::InitActorInfo >*
InitBattleAreaInfo::mutable_actor_infos() {
  // @@protoc_insertion_point(field_mutable_list:pb.InitBattleAreaInfo.actor_infos)
  return &actor_infos_;
}

// -------------------------------------------------------------------

// BattleParams

// optional int32 max_round = 1;
inline bool BattleParams::has_max_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleParams::set_has_max_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleParams::clear_has_max_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleParams::clear_max_round() {
  max_round_ = 0;
  clear_has_max_round();
}
inline ::google::protobuf::int32 BattleParams::max_round() const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.max_round)
  return max_round_;
}
inline void BattleParams::set_max_round(::google::protobuf::int32 value) {
  set_has_max_round();
  max_round_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleParams.max_round)
}

// optional int32 first_attack = 2;
inline bool BattleParams::has_first_attack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleParams::set_has_first_attack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleParams::clear_has_first_attack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleParams::clear_first_attack() {
  first_attack_ = 0;
  clear_has_first_attack();
}
inline ::google::protobuf::int32 BattleParams::first_attack() const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.first_attack)
  return first_attack_;
}
inline void BattleParams::set_first_attack(::google::protobuf::int32 value) {
  set_has_first_attack();
  first_attack_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleParams.first_attack)
}

// optional int32 battle_type = 3;
inline bool BattleParams::has_battle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleParams::set_has_battle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleParams::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleParams::clear_battle_type() {
  battle_type_ = 0;
  clear_has_battle_type();
}
inline ::google::protobuf::int32 BattleParams::battle_type() const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.battle_type)
  return battle_type_;
}
inline void BattleParams::set_battle_type(::google::protobuf::int32 value) {
  set_has_battle_type();
  battle_type_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleParams.battle_type)
}

// optional .pb.InitBattleAreaInfo own_area = 4;
inline bool BattleParams::has_own_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleParams::set_has_own_area() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleParams::clear_has_own_area() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleParams::clear_own_area() {
  if (own_area_ != NULL) own_area_->::pb::InitBattleAreaInfo::Clear();
  clear_has_own_area();
}
inline const ::pb::InitBattleAreaInfo& BattleParams::own_area() const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.own_area)
  return own_area_ != NULL ? *own_area_ : *default_instance_->own_area_;
}
inline ::pb::InitBattleAreaInfo* BattleParams::mutable_own_area() {
  set_has_own_area();
  if (own_area_ == NULL) own_area_ = new ::pb::InitBattleAreaInfo;
  // @@protoc_insertion_point(field_mutable:pb.BattleParams.own_area)
  return own_area_;
}
inline ::pb::InitBattleAreaInfo* BattleParams::release_own_area() {
  clear_has_own_area();
  ::pb::InitBattleAreaInfo* temp = own_area_;
  own_area_ = NULL;
  return temp;
}
inline void BattleParams::set_allocated_own_area(::pb::InitBattleAreaInfo* own_area) {
  delete own_area_;
  own_area_ = own_area;
  if (own_area) {
    set_has_own_area();
  } else {
    clear_has_own_area();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BattleParams.own_area)
}

// repeated .pb.InitBattleAreaInfo opp_area = 5;
inline int BattleParams::opp_area_size() const {
  return opp_area_.size();
}
inline void BattleParams::clear_opp_area() {
  opp_area_.Clear();
}
inline const ::pb::InitBattleAreaInfo& BattleParams::opp_area(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.opp_area)
  return opp_area_.Get(index);
}
inline ::pb::InitBattleAreaInfo* BattleParams::mutable_opp_area(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleParams.opp_area)
  return opp_area_.Mutable(index);
}
inline ::pb::InitBattleAreaInfo* BattleParams::add_opp_area() {
  // @@protoc_insertion_point(field_add:pb.BattleParams.opp_area)
  return opp_area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::InitBattleAreaInfo >&
BattleParams::opp_area() const {
  // @@protoc_insertion_point(field_list:pb.BattleParams.opp_area)
  return opp_area_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::InitBattleAreaInfo >*
BattleParams::mutable_opp_area() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleParams.opp_area)
  return &opp_area_;
}

// repeated .pb.UserCommand Commands = 6;
inline int BattleParams::commands_size() const {
  return commands_.size();
}
inline void BattleParams::clear_commands() {
  commands_.Clear();
}
inline const ::pb::UserCommand& BattleParams::commands(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.Commands)
  return commands_.Get(index);
}
inline ::pb::UserCommand* BattleParams::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleParams.Commands)
  return commands_.Mutable(index);
}
inline ::pb::UserCommand* BattleParams::add_commands() {
  // @@protoc_insertion_point(field_add:pb.BattleParams.Commands)
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::UserCommand >&
BattleParams::commands() const {
  // @@protoc_insertion_point(field_list:pb.BattleParams.Commands)
  return commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::UserCommand >*
BattleParams::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleParams.Commands)
  return &commands_;
}

// repeated int32 power = 7;
inline int BattleParams::power_size() const {
  return power_.size();
}
inline void BattleParams::clear_power() {
  power_.Clear();
}
inline ::google::protobuf::int32 BattleParams::power(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.power)
  return power_.Get(index);
}
inline void BattleParams::set_power(int index, ::google::protobuf::int32 value) {
  power_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BattleParams.power)
}
inline void BattleParams::add_power(::google::protobuf::int32 value) {
  power_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BattleParams.power)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattleParams::power() const {
  // @@protoc_insertion_point(field_list:pb.BattleParams.power)
  return power_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattleParams::mutable_power() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleParams.power)
  return &power_;
}

// repeated string name = 8;
inline int BattleParams::name_size() const {
  return name_.size();
}
inline void BattleParams::clear_name() {
  name_.Clear();
}
inline const ::std::string& BattleParams::name(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.name)
  return name_.Get(index);
}
inline ::std::string* BattleParams::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleParams.name)
  return name_.Mutable(index);
}
inline void BattleParams::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.BattleParams.name)
  name_.Mutable(index)->assign(value);
}
inline void BattleParams::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BattleParams.name)
}
inline void BattleParams::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BattleParams.name)
}
inline ::std::string* BattleParams::add_name() {
  return name_.Add();
}
inline void BattleParams::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.BattleParams.name)
}
inline void BattleParams::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.BattleParams.name)
}
inline void BattleParams::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.BattleParams.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BattleParams::name() const {
  // @@protoc_insertion_point(field_list:pb.BattleParams.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BattleParams::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleParams.name)
  return &name_;
}

// repeated int32 templateId = 9;
inline int BattleParams::templateid_size() const {
  return templateid_.size();
}
inline void BattleParams::clear_templateid() {
  templateid_.Clear();
}
inline ::google::protobuf::int32 BattleParams::templateid(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.templateId)
  return templateid_.Get(index);
}
inline void BattleParams::set_templateid(int index, ::google::protobuf::int32 value) {
  templateid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BattleParams.templateId)
}
inline void BattleParams::add_templateid(::google::protobuf::int32 value) {
  templateid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BattleParams.templateId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattleParams::templateid() const {
  // @@protoc_insertion_point(field_list:pb.BattleParams.templateId)
  return templateid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattleParams::mutable_templateid() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleParams.templateId)
  return &templateid_;
}

// optional int32 randomSeed = 10;
inline bool BattleParams::has_randomseed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BattleParams::set_has_randomseed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BattleParams::clear_has_randomseed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BattleParams::clear_randomseed() {
  randomseed_ = 0;
  clear_has_randomseed();
}
inline ::google::protobuf::int32 BattleParams::randomseed() const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.randomSeed)
  return randomseed_;
}
inline void BattleParams::set_randomseed(::google::protobuf::int32 value) {
  set_has_randomseed();
  randomseed_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleParams.randomSeed)
}

// optional int32 stage_id = 11;
inline bool BattleParams::has_stage_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BattleParams::set_has_stage_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BattleParams::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BattleParams::clear_stage_id() {
  stage_id_ = 0;
  clear_has_stage_id();
}
inline ::google::protobuf::int32 BattleParams::stage_id() const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.stage_id)
  return stage_id_;
}
inline void BattleParams::set_stage_id(::google::protobuf::int32 value) {
  set_has_stage_id();
  stage_id_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleParams.stage_id)
}

// repeated .pb.BattleUserInfo userInfo = 12;
inline int BattleParams::userinfo_size() const {
  return userinfo_.size();
}
inline void BattleParams::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::pb::BattleUserInfo& BattleParams::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleParams.userInfo)
  return userinfo_.Get(index);
}
inline ::pb::BattleUserInfo* BattleParams::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleParams.userInfo)
  return userinfo_.Mutable(index);
}
inline ::pb::BattleUserInfo* BattleParams::add_userinfo() {
  // @@protoc_insertion_point(field_add:pb.BattleParams.userInfo)
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BattleUserInfo >&
BattleParams::userinfo() const {
  // @@protoc_insertion_point(field_list:pb.BattleParams.userInfo)
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BattleUserInfo >*
BattleParams::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleParams.userInfo)
  return &userinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BattleParams_2eproto__INCLUDED
