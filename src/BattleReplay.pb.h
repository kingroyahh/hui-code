// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleReplay.proto

#ifndef PROTOBUF_BattleReplay_2eproto__INCLUDED
#define PROTOBUF_BattleReplay_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BattleParams.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BattleReplay_2eproto();
void protobuf_AssignDesc_BattleReplay_2eproto();
void protobuf_ShutdownFile_BattleReplay_2eproto();

class EffectDetachBuff;
class EffectAttachBuff;
class EffectUpdateXp;
class EffectShield;
class EffectUpdateHp;
class EffectCmd;
class SkillCmd;
class ReplayCmd;
class RoundCmd;
class ActorInfo;
class BattleReplay;
class BattleReplayList;

enum XpRecoveryType {
  Normal = 1,
  Heal = 2,
  Damage = 3,
  Hit = 4,
  EnemySlain = 5,
  AllySlain = 6,
  KillEnemy = 7,
  RoundBegin = 8,
  Skill = 9,
  Attack = 10
};
bool XpRecoveryType_IsValid(int value);
const XpRecoveryType XpRecoveryType_MIN = Normal;
const XpRecoveryType XpRecoveryType_MAX = Attack;
const int XpRecoveryType_ARRAYSIZE = XpRecoveryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* XpRecoveryType_descriptor();
inline const ::std::string& XpRecoveryType_Name(XpRecoveryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    XpRecoveryType_descriptor(), value);
}
inline bool XpRecoveryType_Parse(
    const ::std::string& name, XpRecoveryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<XpRecoveryType>(
    XpRecoveryType_descriptor(), name, value);
}
enum EffectType {
  Default = 1,
  Strike = 2,
  Dodge = 3,
  Block = 4,
  Immune = 5
};
bool EffectType_IsValid(int value);
const EffectType EffectType_MIN = Default;
const EffectType EffectType_MAX = Immune;
const int EffectType_ARRAYSIZE = EffectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EffectType_descriptor();
inline const ::std::string& EffectType_Name(EffectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EffectType_descriptor(), value);
}
inline bool EffectType_Parse(
    const ::std::string& name, EffectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EffectType>(
    EffectType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>EffectDetachBuff</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class EffectDetachBuff : public ::google::protobuf::Message {
 public:
  EffectDetachBuff();
  virtual ~EffectDetachBuff();

  EffectDetachBuff(const EffectDetachBuff& from);

  inline EffectDetachBuff& operator=(const EffectDetachBuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectDetachBuff& default_instance();

  void Swap(EffectDetachBuff* other);

  // implements Message ----------------------------------------------

  EffectDetachBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectDetachBuff& from);
  void MergeFrom(const EffectDetachBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 buff_meta_id = 1;
  inline bool has_buff_meta_id() const;
  inline void clear_buff_meta_id();
  static const int kBuffMetaIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>EffectDetachBuff</name>
  	<Function>
  		<name>buff_meta_id</name>
  		<replaceName>buff_meta_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buff_meta_id</name>
  		<replaceName>buff_meta_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buff_meta_id</name>
  		<replaceName>buff_meta_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buff_meta_id() const;
  inline void set_buff_meta_id(::google::protobuf::int32 value);

  // optional int32 vanish_Type = 2;
  inline bool has_vanish_type() const;
  inline void clear_vanish_type();
  static const int kVanishTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>EffectDetachBuff</name>
  	<Function>
  		<name>vanish_type</name>
  		<replaceName>vanish_Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_vanish_type</name>
  		<replaceName>vanish_Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_vanish_type</name>
  		<replaceName>vanish_Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 vanish_type() const;
  inline void set_vanish_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.EffectDetachBuff)
 private:
  inline void set_has_buff_meta_id();
  inline void clear_has_buff_meta_id();
  inline void set_has_vanish_type();
  inline void clear_has_vanish_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 buff_meta_id_;
  ::google::protobuf::int32 vanish_type_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static EffectDetachBuff* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>EffectAttachBuff</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class EffectAttachBuff : public ::google::protobuf::Message {
 public:
  EffectAttachBuff();
  virtual ~EffectAttachBuff();

  EffectAttachBuff(const EffectAttachBuff& from);

  inline EffectAttachBuff& operator=(const EffectAttachBuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectAttachBuff& default_instance();

  void Swap(EffectAttachBuff* other);

  // implements Message ----------------------------------------------

  EffectAttachBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectAttachBuff& from);
  void MergeFrom(const EffectAttachBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 buff_meta_id = 1;
  inline bool has_buff_meta_id() const;
  inline void clear_buff_meta_id();
  static const int kBuffMetaIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>EffectAttachBuff</name>
  	<Function>
  		<name>buff_meta_id</name>
  		<replaceName>buff_meta_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buff_meta_id</name>
  		<replaceName>buff_meta_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buff_meta_id</name>
  		<replaceName>buff_meta_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buff_meta_id() const;
  inline void set_buff_meta_id(::google::protobuf::int32 value);

  // optional int32 layer_count = 2;
  inline bool has_layer_count() const;
  inline void clear_layer_count();
  static const int kLayerCountFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>EffectAttachBuff</name>
  	<Function>
  		<name>layer_count</name>
  		<replaceName>layer_count</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layer_count</name>
  		<replaceName>layer_count</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layer_count</name>
  		<replaceName>layer_count</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 layer_count() const;
  inline void set_layer_count(::google::protobuf::int32 value);

  // optional bool result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>EffectAttachBuff</name>
  	<Function>
  		<name>result</name>
  		<replaceName>result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_result</name>
  		<replaceName>result</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_result</name>
  		<replaceName>result</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:pb.EffectAttachBuff)
 private:
  inline void set_has_buff_meta_id();
  inline void clear_has_buff_meta_id();
  inline void set_has_layer_count();
  inline void clear_has_layer_count();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 buff_meta_id_;
  ::google::protobuf::int32 layer_count_;
  bool result_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static EffectAttachBuff* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>EffectUpdateXp</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class EffectUpdateXp : public ::google::protobuf::Message {
 public:
  EffectUpdateXp();
  virtual ~EffectUpdateXp();

  EffectUpdateXp(const EffectUpdateXp& from);

  inline EffectUpdateXp& operator=(const EffectUpdateXp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectUpdateXp& default_instance();

  void Swap(EffectUpdateXp* other);

  // implements Message ----------------------------------------------

  EffectUpdateXp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectUpdateXp& from);
  void MergeFrom(const EffectUpdateXp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 update_xp = 1;
  inline bool has_update_xp() const;
  inline void clear_update_xp();
  static const int kUpdateXpFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateXp</name>
  	<Function>
  		<name>update_xp</name>
  		<replaceName>update_xp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_update_xp</name>
  		<replaceName>update_xp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_update_xp</name>
  		<replaceName>update_xp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 update_xp() const;
  inline void set_update_xp(::google::protobuf::int32 value);

  // optional bool is_show = 2;
  inline bool has_is_show() const;
  inline void clear_is_show();
  static const int kIsShowFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateXp</name>
  	<Function>
  		<name>is_show</name>
  		<replaceName>is_show</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_is_show</name>
  		<replaceName>is_show</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_is_show</name>
  		<replaceName>is_show</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool is_show() const;
  inline void set_is_show(bool value);

  // optional .pb.XpRecoveryType recoveryType = 3;
  inline bool has_recoverytype() const;
  inline void clear_recoverytype();
  static const int kRecoveryTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateXp</name>
  	<Function>
  		<name>recoverytype</name>
  		<replaceName>recoveryType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recoverytype</name>
  		<replaceName>recoveryType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recoverytype</name>
  		<replaceName>recoveryType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::XpRecoveryType recoverytype() const;
  inline void set_recoverytype(::pb::XpRecoveryType value);

  // optional int32 slainActorID = 4;
  inline bool has_slainactorid() const;
  inline void clear_slainactorid();
  static const int kSlainActorIDFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateXp</name>
  	<Function>
  		<name>slainactorid</name>
  		<replaceName>slainActorID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slainactorid</name>
  		<replaceName>slainActorID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slainactorid</name>
  		<replaceName>slainActorID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 slainactorid() const;
  inline void set_slainactorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.EffectUpdateXp)
 private:
  inline void set_has_update_xp();
  inline void clear_has_update_xp();
  inline void set_has_is_show();
  inline void clear_has_is_show();
  inline void set_has_recoverytype();
  inline void clear_has_recoverytype();
  inline void set_has_slainactorid();
  inline void clear_has_slainactorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 update_xp_;
  bool is_show_;
  int recoverytype_;
  ::google::protobuf::int32 slainactorid_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static EffectUpdateXp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>EffectShield</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class EffectShield : public ::google::protobuf::Message {
 public:
  EffectShield();
  virtual ~EffectShield();

  EffectShield(const EffectShield& from);

  inline EffectShield& operator=(const EffectShield& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectShield& default_instance();

  void Swap(EffectShield* other);

  // implements Message ----------------------------------------------

  EffectShield* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectShield& from);
  void MergeFrom(const EffectShield& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 buff_id = 1;
  inline bool has_buff_id() const;
  inline void clear_buff_id();
  static const int kBuffIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>EffectShield</name>
  	<Function>
  		<name>buff_id</name>
  		<replaceName>buff_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buff_id</name>
  		<replaceName>buff_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buff_id</name>
  		<replaceName>buff_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buff_id() const;
  inline void set_buff_id(::google::protobuf::int32 value);

  // optional int32 damage_absorb = 2;
  inline bool has_damage_absorb() const;
  inline void clear_damage_absorb();
  static const int kDamageAbsorbFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>EffectShield</name>
  	<Function>
  		<name>damage_absorb</name>
  		<replaceName>damage_absorb</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage_absorb</name>
  		<replaceName>damage_absorb</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage_absorb</name>
  		<replaceName>damage_absorb</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damage_absorb() const;
  inline void set_damage_absorb(::google::protobuf::int32 value);

  // optional bool is_over = 3;
  inline bool has_is_over() const;
  inline void clear_is_over();
  static const int kIsOverFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>EffectShield</name>
  	<Function>
  		<name>is_over</name>
  		<replaceName>is_over</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_is_over</name>
  		<replaceName>is_over</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_is_over</name>
  		<replaceName>is_over</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool is_over() const;
  inline void set_is_over(bool value);

  // @@protoc_insertion_point(class_scope:pb.EffectShield)
 private:
  inline void set_has_buff_id();
  inline void clear_has_buff_id();
  inline void set_has_damage_absorb();
  inline void clear_has_damage_absorb();
  inline void set_has_is_over();
  inline void clear_has_is_over();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 buff_id_;
  ::google::protobuf::int32 damage_absorb_;
  bool is_over_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static EffectShield* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>EffectUpdateHp</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class EffectUpdateHp : public ::google::protobuf::Message {
 public:
  EffectUpdateHp();
  virtual ~EffectUpdateHp();

  EffectUpdateHp(const EffectUpdateHp& from);

  inline EffectUpdateHp& operator=(const EffectUpdateHp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectUpdateHp& default_instance();

  void Swap(EffectUpdateHp* other);

  // implements Message ----------------------------------------------

  EffectUpdateHp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectUpdateHp& from);
  void MergeFrom(const EffectUpdateHp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 update_hp = 1;
  inline bool has_update_hp() const;
  inline void clear_update_hp();
  static const int kUpdateHpFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>update_hp</name>
  		<replaceName>update_hp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_update_hp</name>
  		<replaceName>update_hp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_update_hp</name>
  		<replaceName>update_hp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 update_hp() const;
  inline void set_update_hp(::google::protobuf::int32 value);

  // optional bool is_dead = 2;
  inline bool has_is_dead() const;
  inline void clear_is_dead();
  static const int kIsDeadFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>is_dead</name>
  		<replaceName>is_dead</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_is_dead</name>
  		<replaceName>is_dead</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_is_dead</name>
  		<replaceName>is_dead</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool is_dead() const;
  inline void set_is_dead(bool value);

  // optional int32 resilience_hp = 3;
  inline bool has_resilience_hp() const;
  inline void clear_resilience_hp();
  static const int kResilienceHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>resilience_hp</name>
  		<replaceName>resilience_hp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resilience_hp</name>
  		<replaceName>resilience_hp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resilience_hp</name>
  		<replaceName>resilience_hp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 resilience_hp() const;
  inline void set_resilience_hp(::google::protobuf::int32 value);

  // optional int32 blood_drinking = 4;
  inline bool has_blood_drinking() const;
  inline void clear_blood_drinking();
  static const int kBloodDrinkingFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>blood_drinking</name>
  		<replaceName>blood_drinking</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_blood_drinking</name>
  		<replaceName>blood_drinking</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_blood_drinking</name>
  		<replaceName>blood_drinking</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 blood_drinking() const;
  inline void set_blood_drinking(::google::protobuf::int32 value);

  // repeated .pb.EffectShield shield_infos = 5;
  inline int shield_infos_size() const;
  inline void clear_shield_infos();
  static const int kShieldInfosFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>shield_infos</name>
  		<replaceName>shield_infos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_shield_infos</name>
  		<replaceName>shield_infos</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_shield_infos</name>
  		<replaceName>shield_infos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>shield_infos_size</name>
  		<replaceName>shield_infos</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::EffectShield& shield_infos(int index) const;
  inline ::pb::EffectShield* mutable_shield_infos(int index);
  inline ::pb::EffectShield* add_shield_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::EffectShield >&
      shield_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::EffectShield >*
      mutable_shield_infos();

  // optional int32 blockTherapy = 6;
  inline bool has_blocktherapy() const;
  inline void clear_blocktherapy();
  static const int kBlockTherapyFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>blocktherapy</name>
  		<replaceName>blockTherapy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_blocktherapy</name>
  		<replaceName>blockTherapy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_blocktherapy</name>
  		<replaceName>blockTherapy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 blocktherapy() const;
  inline void set_blocktherapy(::google::protobuf::int32 value);

  // optional int32 strikeTherapy = 7;
  inline bool has_striketherapy() const;
  inline void clear_striketherapy();
  static const int kStrikeTherapyFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>striketherapy</name>
  		<replaceName>strikeTherapy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_striketherapy</name>
  		<replaceName>strikeTherapy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_striketherapy</name>
  		<replaceName>strikeTherapy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 striketherapy() const;
  inline void set_striketherapy(::google::protobuf::int32 value);

  // optional int32 s_damageTherapy = 8;
  inline bool has_s_damagetherapy() const;
  inline void clear_s_damagetherapy();
  static const int kSDamageTherapyFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>s_damagetherapy</name>
  		<replaceName>s_damageTherapy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_s_damagetherapy</name>
  		<replaceName>s_damageTherapy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_s_damagetherapy</name>
  		<replaceName>s_damageTherapy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 s_damagetherapy() const;
  inline void set_s_damagetherapy(::google::protobuf::int32 value);

  // optional int32 s_blockTherapy = 9;
  inline bool has_s_blocktherapy() const;
  inline void clear_s_blocktherapy();
  static const int kSBlockTherapyFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>s_blocktherapy</name>
  		<replaceName>s_blockTherapy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_s_blocktherapy</name>
  		<replaceName>s_blockTherapy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_s_blocktherapy</name>
  		<replaceName>s_blockTherapy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 s_blocktherapy() const;
  inline void set_s_blocktherapy(::google::protobuf::int32 value);

  // optional int32 s_strikeTherapy = 10;
  inline bool has_s_striketherapy() const;
  inline void clear_s_striketherapy();
  static const int kSStrikeTherapyFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>s_striketherapy</name>
  		<replaceName>s_strikeTherapy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_s_striketherapy</name>
  		<replaceName>s_strikeTherapy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_s_striketherapy</name>
  		<replaceName>s_strikeTherapy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 s_striketherapy() const;
  inline void set_s_striketherapy(::google::protobuf::int32 value);

  // optional bool is_show = 11;
  inline bool has_is_show() const;
  inline void clear_is_show();
  static const int kIsShowFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>EffectUpdateHp</name>
  	<Function>
  		<name>is_show</name>
  		<replaceName>is_show</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_is_show</name>
  		<replaceName>is_show</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_is_show</name>
  		<replaceName>is_show</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool is_show() const;
  inline void set_is_show(bool value);

  // @@protoc_insertion_point(class_scope:pb.EffectUpdateHp)
 private:
  inline void set_has_update_hp();
  inline void clear_has_update_hp();
  inline void set_has_is_dead();
  inline void clear_has_is_dead();
  inline void set_has_resilience_hp();
  inline void clear_has_resilience_hp();
  inline void set_has_blood_drinking();
  inline void clear_has_blood_drinking();
  inline void set_has_blocktherapy();
  inline void clear_has_blocktherapy();
  inline void set_has_striketherapy();
  inline void clear_has_striketherapy();
  inline void set_has_s_damagetherapy();
  inline void clear_has_s_damagetherapy();
  inline void set_has_s_blocktherapy();
  inline void clear_has_s_blocktherapy();
  inline void set_has_s_striketherapy();
  inline void clear_has_s_striketherapy();
  inline void set_has_is_show();
  inline void clear_has_is_show();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 update_hp_;
  ::google::protobuf::int32 resilience_hp_;
  ::google::protobuf::RepeatedPtrField< ::pb::EffectShield > shield_infos_;
  ::google::protobuf::int32 blood_drinking_;
  ::google::protobuf::int32 blocktherapy_;
  bool is_dead_;
  bool is_show_;
  ::google::protobuf::int32 striketherapy_;
  ::google::protobuf::int32 s_damagetherapy_;
  ::google::protobuf::int32 s_blocktherapy_;
  ::google::protobuf::int32 s_striketherapy_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static EffectUpdateHp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>EffectCmd</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class EffectCmd : public ::google::protobuf::Message {
 public:
  EffectCmd();
  virtual ~EffectCmd();

  EffectCmd(const EffectCmd& from);

  inline EffectCmd& operator=(const EffectCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectCmd& default_instance();

  void Swap(EffectCmd* other);

  // implements Message ----------------------------------------------

  EffectCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectCmd& from);
  void MergeFrom(const EffectCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>target_id</name>
  		<replaceName>target_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_target_id</name>
  		<replaceName>target_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_target_id</name>
  		<replaceName>target_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 target_id() const;
  inline void set_target_id(::google::protobuf::int32 value);

  // optional int32 subEffect_id = 2;
  inline bool has_subeffect_id() const;
  inline void clear_subeffect_id();
  static const int kSubEffectIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>subeffect_id</name>
  		<replaceName>subEffect_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_subeffect_id</name>
  		<replaceName>subEffect_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subeffect_id</name>
  		<replaceName>subEffect_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 subeffect_id() const;
  inline void set_subeffect_id(::google::protobuf::int32 value);

  // optional int32 order = 3;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>order</name>
  		<replaceName>order</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_order</name>
  		<replaceName>order</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_order</name>
  		<replaceName>order</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // optional int32 buff_meta_id = 4;
  inline bool has_buff_meta_id() const;
  inline void clear_buff_meta_id();
  static const int kBuffMetaIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>buff_meta_id</name>
  		<replaceName>buff_meta_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buff_meta_id</name>
  		<replaceName>buff_meta_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buff_meta_id</name>
  		<replaceName>buff_meta_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buff_meta_id() const;
  inline void set_buff_meta_id(::google::protobuf::int32 value);

  // optional .pb.EffectType effect_type = 5;
  inline bool has_effect_type() const;
  inline void clear_effect_type();
  static const int kEffectTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>effect_type</name>
  		<replaceName>effect_type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effect_type</name>
  		<replaceName>effect_type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effect_type</name>
  		<replaceName>effect_type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EffectType effect_type() const;
  inline void set_effect_type(::pb::EffectType value);

  // optional .pb.EffectUpdateXp update_xp = 6;
  inline bool has_update_xp() const;
  inline void clear_update_xp();
  static const int kUpdateXpFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>update_xp</name>
  		<replaceName>update_xp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_update_xp</name>
  		<replaceName>update_xp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_update_xp</name>
  		<replaceName>update_xp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::EffectUpdateXp& update_xp() const;
  inline ::pb::EffectUpdateXp* mutable_update_xp();
  inline ::pb::EffectUpdateXp* release_update_xp();
  inline void set_allocated_update_xp(::pb::EffectUpdateXp* update_xp);

  // optional .pb.EffectUpdateHp update_hp = 7;
  inline bool has_update_hp() const;
  inline void clear_update_hp();
  static const int kUpdateHpFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>update_hp</name>
  		<replaceName>update_hp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_update_hp</name>
  		<replaceName>update_hp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_update_hp</name>
  		<replaceName>update_hp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::EffectUpdateHp& update_hp() const;
  inline ::pb::EffectUpdateHp* mutable_update_hp();
  inline ::pb::EffectUpdateHp* release_update_hp();
  inline void set_allocated_update_hp(::pb::EffectUpdateHp* update_hp);

  // optional .pb.EffectAttachBuff attach_buff = 8;
  inline bool has_attach_buff() const;
  inline void clear_attach_buff();
  static const int kAttachBuffFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>attach_buff</name>
  		<replaceName>attach_buff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attach_buff</name>
  		<replaceName>attach_buff</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attach_buff</name>
  		<replaceName>attach_buff</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::EffectAttachBuff& attach_buff() const;
  inline ::pb::EffectAttachBuff* mutable_attach_buff();
  inline ::pb::EffectAttachBuff* release_attach_buff();
  inline void set_allocated_attach_buff(::pb::EffectAttachBuff* attach_buff);

  // optional .pb.EffectDetachBuff detach_buff = 9;
  inline bool has_detach_buff() const;
  inline void clear_detach_buff();
  static const int kDetachBuffFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>detach_buff</name>
  		<replaceName>detach_buff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_detach_buff</name>
  		<replaceName>detach_buff</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_detach_buff</name>
  		<replaceName>detach_buff</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::EffectDetachBuff& detach_buff() const;
  inline ::pb::EffectDetachBuff* mutable_detach_buff();
  inline ::pb::EffectDetachBuff* release_detach_buff();
  inline void set_allocated_detach_buff(::pb::EffectDetachBuff* detach_buff);

  // optional int32 triggerEvt = 10;
  inline bool has_triggerevt() const;
  inline void clear_triggerevt();
  static const int kTriggerEvtFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>triggerevt</name>
  		<replaceName>triggerEvt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggerevt</name>
  		<replaceName>triggerEvt</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerevt</name>
  		<replaceName>triggerEvt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerevt() const;
  inline void set_triggerevt(::google::protobuf::int32 value);

  // optional int32 triggerCaster_id = 11;
  inline bool has_triggercaster_id() const;
  inline void clear_triggercaster_id();
  static const int kTriggerCasterIdFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>triggercaster_id</name>
  		<replaceName>triggerCaster_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggercaster_id</name>
  		<replaceName>triggerCaster_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggercaster_id</name>
  		<replaceName>triggerCaster_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggercaster_id() const;
  inline void set_triggercaster_id(::google::protobuf::int32 value);

  // optional int32 trigger_id = 12;
  inline bool has_trigger_id() const;
  inline void clear_trigger_id();
  static const int kTriggerIdFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>trigger_id</name>
  		<replaceName>trigger_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_trigger_id</name>
  		<replaceName>trigger_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_trigger_id</name>
  		<replaceName>trigger_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 trigger_id() const;
  inline void set_trigger_id(::google::protobuf::int32 value);

  // optional int32 triggerDeadActor_id = 13;
  inline bool has_triggerdeadactor_id() const;
  inline void clear_triggerdeadactor_id();
  static const int kTriggerDeadActorIdFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>triggerdeadactor_id</name>
  		<replaceName>triggerDeadActor_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggerdeadactor_id</name>
  		<replaceName>triggerDeadActor_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerdeadactor_id</name>
  		<replaceName>triggerDeadActor_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerdeadactor_id() const;
  inline void set_triggerdeadactor_id(::google::protobuf::int32 value);

  // optional int32 caster_id = 14;
  inline bool has_caster_id() const;
  inline void clear_caster_id();
  static const int kCasterIdFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>caster_id</name>
  		<replaceName>caster_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_caster_id</name>
  		<replaceName>caster_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_caster_id</name>
  		<replaceName>caster_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 caster_id() const;
  inline void set_caster_id(::google::protobuf::int32 value);

  // optional bool only_trigger = 15;
  inline bool has_only_trigger() const;
  inline void clear_only_trigger();
  static const int kOnlyTriggerFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>EffectCmd</name>
  	<Function>
  		<name>only_trigger</name>
  		<replaceName>only_trigger</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_only_trigger</name>
  		<replaceName>only_trigger</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_only_trigger</name>
  		<replaceName>only_trigger</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool only_trigger() const;
  inline void set_only_trigger(bool value);

  // @@protoc_insertion_point(class_scope:pb.EffectCmd)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_subeffect_id();
  inline void clear_has_subeffect_id();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_buff_meta_id();
  inline void clear_has_buff_meta_id();
  inline void set_has_effect_type();
  inline void clear_has_effect_type();
  inline void set_has_update_xp();
  inline void clear_has_update_xp();
  inline void set_has_update_hp();
  inline void clear_has_update_hp();
  inline void set_has_attach_buff();
  inline void clear_has_attach_buff();
  inline void set_has_detach_buff();
  inline void clear_has_detach_buff();
  inline void set_has_triggerevt();
  inline void clear_has_triggerevt();
  inline void set_has_triggercaster_id();
  inline void clear_has_triggercaster_id();
  inline void set_has_trigger_id();
  inline void clear_has_trigger_id();
  inline void set_has_triggerdeadactor_id();
  inline void clear_has_triggerdeadactor_id();
  inline void set_has_caster_id();
  inline void clear_has_caster_id();
  inline void set_has_only_trigger();
  inline void clear_has_only_trigger();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 target_id_;
  ::google::protobuf::int32 subeffect_id_;
  ::google::protobuf::int32 order_;
  ::google::protobuf::int32 buff_meta_id_;
  ::pb::EffectUpdateXp* update_xp_;
  ::pb::EffectUpdateHp* update_hp_;
  int effect_type_;
  ::google::protobuf::int32 triggerevt_;
  ::pb::EffectAttachBuff* attach_buff_;
  ::pb::EffectDetachBuff* detach_buff_;
  ::google::protobuf::int32 triggercaster_id_;
  ::google::protobuf::int32 trigger_id_;
  ::google::protobuf::int32 triggerdeadactor_id_;
  ::google::protobuf::int32 caster_id_;
  bool only_trigger_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static EffectCmd* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillCmd</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillCmd : public ::google::protobuf::Message {
 public:
  SkillCmd();
  virtual ~SkillCmd();

  SkillCmd(const SkillCmd& from);

  inline SkillCmd& operator=(const SkillCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillCmd& default_instance();

  void Swap(SkillCmd* other);

  // implements Message ----------------------------------------------

  SkillCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillCmd& from);
  void MergeFrom(const SkillCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 caster_id = 1;
  inline bool has_caster_id() const;
  inline void clear_caster_id();
  static const int kCasterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillCmd</name>
  	<Function>
  		<name>caster_id</name>
  		<replaceName>caster_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_caster_id</name>
  		<replaceName>caster_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_caster_id</name>
  		<replaceName>caster_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 caster_id() const;
  inline void set_caster_id(::google::protobuf::int32 value);

  // optional int32 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillCmd</name>
  	<Function>
  		<name>target_id</name>
  		<replaceName>target_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_target_id</name>
  		<replaceName>target_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_target_id</name>
  		<replaceName>target_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 target_id() const;
  inline void set_target_id(::google::protobuf::int32 value);

  // optional int32 skill_meta_id = 3;
  inline bool has_skill_meta_id() const;
  inline void clear_skill_meta_id();
  static const int kSkillMetaIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillCmd</name>
  	<Function>
  		<name>skill_meta_id</name>
  		<replaceName>skill_meta_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skill_meta_id</name>
  		<replaceName>skill_meta_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skill_meta_id</name>
  		<replaceName>skill_meta_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skill_meta_id() const;
  inline void set_skill_meta_id(::google::protobuf::int32 value);

  // optional int32 doubleHitRank = 4;
  inline bool has_doublehitrank() const;
  inline void clear_doublehitrank();
  static const int kDoubleHitRankFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillCmd</name>
  	<Function>
  		<name>doublehitrank</name>
  		<replaceName>doubleHitRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_doublehitrank</name>
  		<replaceName>doubleHitRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_doublehitrank</name>
  		<replaceName>doubleHitRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 doublehitrank() const;
  inline void set_doublehitrank(::google::protobuf::int32 value);

  // repeated .pb.EffectCmd effect_cmds = 5;
  inline int effect_cmds_size() const;
  inline void clear_effect_cmds();
  static const int kEffectCmdsFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillCmd</name>
  	<Function>
  		<name>effect_cmds</name>
  		<replaceName>effect_cmds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_effect_cmds</name>
  		<replaceName>effect_cmds</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_effect_cmds</name>
  		<replaceName>effect_cmds</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>effect_cmds_size</name>
  		<replaceName>effect_cmds</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::EffectCmd& effect_cmds(int index) const;
  inline ::pb::EffectCmd* mutable_effect_cmds(int index);
  inline ::pb::EffectCmd* add_effect_cmds();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >&
      effect_cmds() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >*
      mutable_effect_cmds();

  // @@protoc_insertion_point(class_scope:pb.SkillCmd)
 private:
  inline void set_has_caster_id();
  inline void clear_has_caster_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_skill_meta_id();
  inline void clear_has_skill_meta_id();
  inline void set_has_doublehitrank();
  inline void clear_has_doublehitrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 caster_id_;
  ::google::protobuf::int32 target_id_;
  ::google::protobuf::int32 skill_meta_id_;
  ::google::protobuf::int32 doublehitrank_;
  ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd > effect_cmds_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static SkillCmd* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>ReplayCmd</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class ReplayCmd : public ::google::protobuf::Message {
 public:
  ReplayCmd();
  virtual ~ReplayCmd();

  ReplayCmd(const ReplayCmd& from);

  inline ReplayCmd& operator=(const ReplayCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplayCmd& default_instance();

  void Swap(ReplayCmd* other);

  // implements Message ----------------------------------------------

  ReplayCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplayCmd& from);
  void MergeFrom(const ReplayCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.SkillCmd skill_cmd = 1;
  inline bool has_skill_cmd() const;
  inline void clear_skill_cmd();
  static const int kSkillCmdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>ReplayCmd</name>
  	<Function>
  		<name>skill_cmd</name>
  		<replaceName>skill_cmd</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skill_cmd</name>
  		<replaceName>skill_cmd</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skill_cmd</name>
  		<replaceName>skill_cmd</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillCmd& skill_cmd() const;
  inline ::pb::SkillCmd* mutable_skill_cmd();
  inline ::pb::SkillCmd* release_skill_cmd();
  inline void set_allocated_skill_cmd(::pb::SkillCmd* skill_cmd);

  // optional int32 triggerTime = 2;
  inline bool has_triggertime() const;
  inline void clear_triggertime();
  static const int kTriggerTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>ReplayCmd</name>
  	<Function>
  		<name>triggertime</name>
  		<replaceName>triggerTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggertime</name>
  		<replaceName>triggerTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggertime</name>
  		<replaceName>triggerTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggertime() const;
  inline void set_triggertime(::google::protobuf::int32 value);

  // optional bool redo = 3;
  inline bool has_redo() const;
  inline void clear_redo();
  static const int kRedoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>ReplayCmd</name>
  	<Function>
  		<name>redo</name>
  		<replaceName>redo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_redo</name>
  		<replaceName>redo</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_redo</name>
  		<replaceName>redo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool redo() const;
  inline void set_redo(bool value);

  // @@protoc_insertion_point(class_scope:pb.ReplayCmd)
 private:
  inline void set_has_skill_cmd();
  inline void clear_has_skill_cmd();
  inline void set_has_triggertime();
  inline void clear_has_triggertime();
  inline void set_has_redo();
  inline void clear_has_redo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::SkillCmd* skill_cmd_;
  ::google::protobuf::int32 triggertime_;
  bool redo_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static ReplayCmd* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>RoundCmd</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class RoundCmd : public ::google::protobuf::Message {
 public:
  RoundCmd();
  virtual ~RoundCmd();

  RoundCmd(const RoundCmd& from);

  inline RoundCmd& operator=(const RoundCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoundCmd& default_instance();

  void Swap(RoundCmd* other);

  // implements Message ----------------------------------------------

  RoundCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoundCmd& from);
  void MergeFrom(const RoundCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.EffectCmd prev_effect_cmds = 1;
  inline int prev_effect_cmds_size() const;
  inline void clear_prev_effect_cmds();
  static const int kPrevEffectCmdsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>RoundCmd</name>
  	<Function>
  		<name>prev_effect_cmds</name>
  		<replaceName>prev_effect_cmds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_prev_effect_cmds</name>
  		<replaceName>prev_effect_cmds</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_prev_effect_cmds</name>
  		<replaceName>prev_effect_cmds</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>prev_effect_cmds_size</name>
  		<replaceName>prev_effect_cmds</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::EffectCmd& prev_effect_cmds(int index) const;
  inline ::pb::EffectCmd* mutable_prev_effect_cmds(int index);
  inline ::pb::EffectCmd* add_prev_effect_cmds();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >&
      prev_effect_cmds() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >*
      mutable_prev_effect_cmds();

  // repeated .pb.ReplayCmd replayList = 2;
  inline int replaylist_size() const;
  inline void clear_replaylist();
  static const int kReplayListFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>RoundCmd</name>
  	<Function>
  		<name>replaylist</name>
  		<replaceName>replayList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_replaylist</name>
  		<replaceName>replayList</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_replaylist</name>
  		<replaceName>replayList</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>replaylist_size</name>
  		<replaceName>replayList</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::ReplayCmd& replaylist(int index) const;
  inline ::pb::ReplayCmd* mutable_replaylist(int index);
  inline ::pb::ReplayCmd* add_replaylist();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::ReplayCmd >&
      replaylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::ReplayCmd >*
      mutable_replaylist();

  // repeated .pb.EffectCmd post_effect_cmds = 3;
  inline int post_effect_cmds_size() const;
  inline void clear_post_effect_cmds();
  static const int kPostEffectCmdsFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>RoundCmd</name>
  	<Function>
  		<name>post_effect_cmds</name>
  		<replaceName>post_effect_cmds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_post_effect_cmds</name>
  		<replaceName>post_effect_cmds</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_post_effect_cmds</name>
  		<replaceName>post_effect_cmds</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>post_effect_cmds_size</name>
  		<replaceName>post_effect_cmds</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::EffectCmd& post_effect_cmds(int index) const;
  inline ::pb::EffectCmd* mutable_post_effect_cmds(int index);
  inline ::pb::EffectCmd* add_post_effect_cmds();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >&
      post_effect_cmds() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >*
      mutable_post_effect_cmds();

  // @@protoc_insertion_point(class_scope:pb.RoundCmd)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd > prev_effect_cmds_;
  ::google::protobuf::RepeatedPtrField< ::pb::ReplayCmd > replaylist_;
  ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd > post_effect_cmds_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static RoundCmd* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>ActorInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class ActorInfo : public ::google::protobuf::Message {
 public:
  ActorInfo();
  virtual ~ActorInfo();

  ActorInfo(const ActorInfo& from);

  inline ActorInfo& operator=(const ActorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActorInfo& default_instance();

  void Swap(ActorInfo* other);

  // implements Message ----------------------------------------------

  ActorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActorInfo& from);
  void MergeFrom(const ActorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 actor_id = 1;
  inline bool has_actor_id() const;
  inline void clear_actor_id();
  static const int kActorIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>actor_id</name>
  		<replaceName>actor_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actor_id</name>
  		<replaceName>actor_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actor_id</name>
  		<replaceName>actor_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 actor_id() const;
  inline void set_actor_id(::google::protobuf::int32 value);

  // optional int32 meta_id = 2;
  inline bool has_meta_id() const;
  inline void clear_meta_id();
  static const int kMetaIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>meta_id</name>
  		<replaceName>meta_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_meta_id</name>
  		<replaceName>meta_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_meta_id</name>
  		<replaceName>meta_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 meta_id() const;
  inline void set_meta_id(::google::protobuf::int32 value);

  // optional int32 pos_index = 3;
  inline bool has_pos_index() const;
  inline void clear_pos_index();
  static const int kPosIndexFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>pos_index</name>
  		<replaceName>pos_index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos_index</name>
  		<replaceName>pos_index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos_index</name>
  		<replaceName>pos_index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 pos_index() const;
  inline void set_pos_index(::google::protobuf::int32 value);

  // optional int32 area_index = 4;
  inline bool has_area_index() const;
  inline void clear_area_index();
  static const int kAreaIndexFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>area_index</name>
  		<replaceName>area_index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_area_index</name>
  		<replaceName>area_index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_area_index</name>
  		<replaceName>area_index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 area_index() const;
  inline void set_area_index(::google::protobuf::int32 value);

  // optional int32 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>hp</name>
  		<replaceName>hp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hp</name>
  		<replaceName>hp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hp</name>
  		<replaceName>hp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 xp = 6;
  inline bool has_xp() const;
  inline void clear_xp();
  static const int kXpFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>xp</name>
  		<replaceName>xp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_xp</name>
  		<replaceName>xp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_xp</name>
  		<replaceName>xp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 xp() const;
  inline void set_xp(::google::protobuf::int32 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 hpMax = 8;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpMaxFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>hpmax</name>
  		<replaceName>hpMax</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hpmax</name>
  		<replaceName>hpMax</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hpmax</name>
  		<replaceName>hpMax</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // optional int32 hero_id = 9;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>hero_id</name>
  		<replaceName>hero_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hero_id</name>
  		<replaceName>hero_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hero_id</name>
  		<replaceName>hero_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hero_id() const;
  inline void set_hero_id(::google::protobuf::int32 value);

  // optional int32 xpMax = 10;
  inline bool has_xpmax() const;
  inline void clear_xpmax();
  static const int kXpMaxFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>xpmax</name>
  		<replaceName>xpMax</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_xpmax</name>
  		<replaceName>xpMax</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_xpmax</name>
  		<replaceName>xpMax</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 xpmax() const;
  inline void set_xpmax(::google::protobuf::int32 value);

  // optional int32 activeRound = 11;
  inline bool has_activeround() const;
  inline void clear_activeround();
  static const int kActiveRoundFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>activeround</name>
  		<replaceName>activeRound</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_activeround</name>
  		<replaceName>activeRound</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activeround</name>
  		<replaceName>activeRound</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 activeround() const;
  inline void set_activeround(::google::protobuf::int32 value);

  // optional int32 fashionId = 12;
  inline bool has_fashionid() const;
  inline void clear_fashionid();
  static const int kFashionIdFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>fashionid</name>
  		<replaceName>fashionId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fashionid</name>
  		<replaceName>fashionId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fashionid</name>
  		<replaceName>fashionId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 fashionid() const;
  inline void set_fashionid(::google::protobuf::int32 value);

  // optional int32 level = 13;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 awake = 14;
  inline bool has_awake() const;
  inline void clear_awake();
  static const int kAwakeFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>awake</name>
  		<replaceName>awake</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_awake</name>
  		<replaceName>awake</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_awake</name>
  		<replaceName>awake</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 awake() const;
  inline void set_awake(::google::protobuf::int32 value);

  // optional int32 advance = 15;
  inline bool has_advance() const;
  inline void clear_advance();
  static const int kAdvanceFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>advance</name>
  		<replaceName>advance</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advance</name>
  		<replaceName>advance</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advance</name>
  		<replaceName>advance</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 advance() const;
  inline void set_advance(::google::protobuf::int32 value);

  // optional int32 halo = 16;
  inline bool has_halo() const;
  inline void clear_halo();
  static const int kHaloFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>ActorInfo</name>
  	<Function>
  		<name>halo</name>
  		<replaceName>halo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_halo</name>
  		<replaceName>halo</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_halo</name>
  		<replaceName>halo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 halo() const;
  inline void set_halo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ActorInfo)
 private:
  inline void set_has_actor_id();
  inline void clear_has_actor_id();
  inline void set_has_meta_id();
  inline void clear_has_meta_id();
  inline void set_has_pos_index();
  inline void clear_has_pos_index();
  inline void set_has_area_index();
  inline void clear_has_area_index();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_xp();
  inline void clear_has_xp();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_xpmax();
  inline void clear_has_xpmax();
  inline void set_has_activeround();
  inline void clear_has_activeround();
  inline void set_has_fashionid();
  inline void clear_has_fashionid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_awake();
  inline void clear_has_awake();
  inline void set_has_advance();
  inline void clear_has_advance();
  inline void set_has_halo();
  inline void clear_has_halo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 actor_id_;
  ::google::protobuf::int32 meta_id_;
  ::google::protobuf::int32 pos_index_;
  ::google::protobuf::int32 area_index_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 xp_;
  ::std::string* name_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 hero_id_;
  ::google::protobuf::int32 xpmax_;
  ::google::protobuf::int32 activeround_;
  ::google::protobuf::int32 fashionid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 awake_;
  ::google::protobuf::int32 advance_;
  ::google::protobuf::int32 halo_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static ActorInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BattleReplay</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BattleReplay : public ::google::protobuf::Message {
 public:
  BattleReplay();
  virtual ~BattleReplay();

  BattleReplay(const BattleReplay& from);

  inline BattleReplay& operator=(const BattleReplay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleReplay& default_instance();

  void Swap(BattleReplay* other);

  // implements Message ----------------------------------------------

  BattleReplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleReplay& from);
  void MergeFrom(const BattleReplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 winner = 1;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BattleReplay</name>
  	<Function>
  		<name>winner</name>
  		<replaceName>winner</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winner</name>
  		<replaceName>winner</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winner</name>
  		<replaceName>winner</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 winner() const;
  inline void set_winner(::google::protobuf::int32 value);

  // repeated .pb.ActorInfo init_cells = 2;
  inline int init_cells_size() const;
  inline void clear_init_cells();
  static const int kInitCellsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BattleReplay</name>
  	<Function>
  		<name>init_cells</name>
  		<replaceName>init_cells</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_init_cells</name>
  		<replaceName>init_cells</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_init_cells</name>
  		<replaceName>init_cells</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>init_cells_size</name>
  		<replaceName>init_cells</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::ActorInfo& init_cells(int index) const;
  inline ::pb::ActorInfo* mutable_init_cells(int index);
  inline ::pb::ActorInfo* add_init_cells();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::ActorInfo >&
      init_cells() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::ActorInfo >*
      mutable_init_cells();

  // repeated .pb.ActorInfo over_cells = 3;
  inline int over_cells_size() const;
  inline void clear_over_cells();
  static const int kOverCellsFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BattleReplay</name>
  	<Function>
  		<name>over_cells</name>
  		<replaceName>over_cells</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_over_cells</name>
  		<replaceName>over_cells</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_over_cells</name>
  		<replaceName>over_cells</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>over_cells_size</name>
  		<replaceName>over_cells</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::ActorInfo& over_cells(int index) const;
  inline ::pb::ActorInfo* mutable_over_cells(int index);
  inline ::pb::ActorInfo* add_over_cells();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::ActorInfo >&
      over_cells() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::ActorInfo >*
      mutable_over_cells();

  // repeated .pb.RoundCmd round_cmds = 4;
  inline int round_cmds_size() const;
  inline void clear_round_cmds();
  static const int kRoundCmdsFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BattleReplay</name>
  	<Function>
  		<name>round_cmds</name>
  		<replaceName>round_cmds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_round_cmds</name>
  		<replaceName>round_cmds</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_round_cmds</name>
  		<replaceName>round_cmds</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>round_cmds_size</name>
  		<replaceName>round_cmds</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::RoundCmd& round_cmds(int index) const;
  inline ::pb::RoundCmd* mutable_round_cmds(int index);
  inline ::pb::RoundCmd* add_round_cmds();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::RoundCmd >&
      round_cmds() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::RoundCmd >*
      mutable_round_cmds();

  // optional int32 fail_code = 5;
  inline bool has_fail_code() const;
  inline void clear_fail_code();
  static const int kFailCodeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BattleReplay</name>
  	<Function>
  		<name>fail_code</name>
  		<replaceName>fail_code</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fail_code</name>
  		<replaceName>fail_code</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fail_code</name>
  		<replaceName>fail_code</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 fail_code() const;
  inline void set_fail_code(::google::protobuf::int32 value);

  // optional int32 first_attack = 6;
  inline bool has_first_attack() const;
  inline void clear_first_attack();
  static const int kFirstAttackFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BattleReplay</name>
  	<Function>
  		<name>first_attack</name>
  		<replaceName>first_attack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_first_attack</name>
  		<replaceName>first_attack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_first_attack</name>
  		<replaceName>first_attack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 first_attack() const;
  inline void set_first_attack(::google::protobuf::int32 value);

  // optional int32 max_round = 7;
  inline bool has_max_round() const;
  inline void clear_max_round();
  static const int kMaxRoundFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>BattleReplay</name>
  	<Function>
  		<name>max_round</name>
  		<replaceName>max_round</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_max_round</name>
  		<replaceName>max_round</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_max_round</name>
  		<replaceName>max_round</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 max_round() const;
  inline void set_max_round(::google::protobuf::int32 value);

  // optional int32 stage_id = 8;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>BattleReplay</name>
  	<Function>
  		<name>stage_id</name>
  		<replaceName>stage_id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stage_id</name>
  		<replaceName>stage_id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stage_id</name>
  		<replaceName>stage_id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 stage_id() const;
  inline void set_stage_id(::google::protobuf::int32 value);

  // repeated .pb.BattleUserInfo userInfo = 9;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>BattleReplay</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>userInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userinfo</name>
  		<replaceName>userInfo</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>userInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userinfo_size</name>
  		<replaceName>userInfo</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BattleUserInfo& userinfo(int index) const;
  inline ::pb::BattleUserInfo* mutable_userinfo(int index);
  inline ::pb::BattleUserInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BattleUserInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BattleUserInfo >*
      mutable_userinfo();

  // @@protoc_insertion_point(class_scope:pb.BattleReplay)
 private:
  inline void set_has_winner();
  inline void clear_has_winner();
  inline void set_has_fail_code();
  inline void clear_has_fail_code();
  inline void set_has_first_attack();
  inline void clear_has_first_attack();
  inline void set_has_max_round();
  inline void clear_has_max_round();
  inline void set_has_stage_id();
  inline void clear_has_stage_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::ActorInfo > init_cells_;
  ::google::protobuf::RepeatedPtrField< ::pb::ActorInfo > over_cells_;
  ::google::protobuf::int32 winner_;
  ::google::protobuf::int32 fail_code_;
  ::google::protobuf::RepeatedPtrField< ::pb::RoundCmd > round_cmds_;
  ::google::protobuf::int32 first_attack_;
  ::google::protobuf::int32 max_round_;
  ::google::protobuf::RepeatedPtrField< ::pb::BattleUserInfo > userinfo_;
  ::google::protobuf::int32 stage_id_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static BattleReplay* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BattleReplayList</name>
	<Function>
		<name>new</name>
		<replaceName>BattleReplay.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BattleReplayList : public ::google::protobuf::Message {
 public:
  BattleReplayList();
  virtual ~BattleReplayList();

  BattleReplayList(const BattleReplayList& from);

  inline BattleReplayList& operator=(const BattleReplayList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleReplayList& default_instance();

  void Swap(BattleReplayList* other);

  // implements Message ----------------------------------------------

  BattleReplayList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleReplayList& from);
  void MergeFrom(const BattleReplayList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.BattleReplay battle_replays = 1;
  inline int battle_replays_size() const;
  inline void clear_battle_replays();
  static const int kBattleReplaysFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BattleReplayList</name>
  	<Function>
  		<name>battle_replays</name>
  		<replaceName>battle_replays</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battle_replays</name>
  		<replaceName>battle_replays</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_battle_replays</name>
  		<replaceName>battle_replays</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battle_replays_size</name>
  		<replaceName>battle_replays</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BattleReplay& battle_replays(int index) const;
  inline ::pb::BattleReplay* mutable_battle_replays(int index);
  inline ::pb::BattleReplay* add_battle_replays();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BattleReplay >&
      battle_replays() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BattleReplay >*
      mutable_battle_replays();

  // @@protoc_insertion_point(class_scope:pb.BattleReplayList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::BattleReplay > battle_replays_;
  friend void  protobuf_AddDesc_BattleReplay_2eproto();
  friend void protobuf_AssignDesc_BattleReplay_2eproto();
  friend void protobuf_ShutdownFile_BattleReplay_2eproto();

  void InitAsDefaultInstance();
  static BattleReplayList* default_instance_;
};
// ===================================================================


// ===================================================================

// EffectDetachBuff

// optional int32 buff_meta_id = 1;
inline bool EffectDetachBuff::has_buff_meta_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectDetachBuff::set_has_buff_meta_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectDetachBuff::clear_has_buff_meta_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectDetachBuff::clear_buff_meta_id() {
  buff_meta_id_ = 0;
  clear_has_buff_meta_id();
}
inline ::google::protobuf::int32 EffectDetachBuff::buff_meta_id() const {
  // @@protoc_insertion_point(field_get:pb.EffectDetachBuff.buff_meta_id)
  return buff_meta_id_;
}
inline void EffectDetachBuff::set_buff_meta_id(::google::protobuf::int32 value) {
  set_has_buff_meta_id();
  buff_meta_id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectDetachBuff.buff_meta_id)
}

// optional int32 vanish_Type = 2;
inline bool EffectDetachBuff::has_vanish_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectDetachBuff::set_has_vanish_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectDetachBuff::clear_has_vanish_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectDetachBuff::clear_vanish_type() {
  vanish_type_ = 0;
  clear_has_vanish_type();
}
inline ::google::protobuf::int32 EffectDetachBuff::vanish_type() const {
  // @@protoc_insertion_point(field_get:pb.EffectDetachBuff.vanish_Type)
  return vanish_type_;
}
inline void EffectDetachBuff::set_vanish_type(::google::protobuf::int32 value) {
  set_has_vanish_type();
  vanish_type_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectDetachBuff.vanish_Type)
}

// -------------------------------------------------------------------

// EffectAttachBuff

// optional int32 buff_meta_id = 1;
inline bool EffectAttachBuff::has_buff_meta_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectAttachBuff::set_has_buff_meta_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectAttachBuff::clear_has_buff_meta_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectAttachBuff::clear_buff_meta_id() {
  buff_meta_id_ = 0;
  clear_has_buff_meta_id();
}
inline ::google::protobuf::int32 EffectAttachBuff::buff_meta_id() const {
  // @@protoc_insertion_point(field_get:pb.EffectAttachBuff.buff_meta_id)
  return buff_meta_id_;
}
inline void EffectAttachBuff::set_buff_meta_id(::google::protobuf::int32 value) {
  set_has_buff_meta_id();
  buff_meta_id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectAttachBuff.buff_meta_id)
}

// optional int32 layer_count = 2;
inline bool EffectAttachBuff::has_layer_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectAttachBuff::set_has_layer_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectAttachBuff::clear_has_layer_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectAttachBuff::clear_layer_count() {
  layer_count_ = 0;
  clear_has_layer_count();
}
inline ::google::protobuf::int32 EffectAttachBuff::layer_count() const {
  // @@protoc_insertion_point(field_get:pb.EffectAttachBuff.layer_count)
  return layer_count_;
}
inline void EffectAttachBuff::set_layer_count(::google::protobuf::int32 value) {
  set_has_layer_count();
  layer_count_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectAttachBuff.layer_count)
}

// optional bool result = 3;
inline bool EffectAttachBuff::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectAttachBuff::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectAttachBuff::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectAttachBuff::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool EffectAttachBuff::result() const {
  // @@protoc_insertion_point(field_get:pb.EffectAttachBuff.result)
  return result_;
}
inline void EffectAttachBuff::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectAttachBuff.result)
}

// -------------------------------------------------------------------

// EffectUpdateXp

// optional int32 update_xp = 1;
inline bool EffectUpdateXp::has_update_xp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectUpdateXp::set_has_update_xp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectUpdateXp::clear_has_update_xp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectUpdateXp::clear_update_xp() {
  update_xp_ = 0;
  clear_has_update_xp();
}
inline ::google::protobuf::int32 EffectUpdateXp::update_xp() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateXp.update_xp)
  return update_xp_;
}
inline void EffectUpdateXp::set_update_xp(::google::protobuf::int32 value) {
  set_has_update_xp();
  update_xp_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateXp.update_xp)
}

// optional bool is_show = 2;
inline bool EffectUpdateXp::has_is_show() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectUpdateXp::set_has_is_show() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectUpdateXp::clear_has_is_show() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectUpdateXp::clear_is_show() {
  is_show_ = false;
  clear_has_is_show();
}
inline bool EffectUpdateXp::is_show() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateXp.is_show)
  return is_show_;
}
inline void EffectUpdateXp::set_is_show(bool value) {
  set_has_is_show();
  is_show_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateXp.is_show)
}

// optional .pb.XpRecoveryType recoveryType = 3;
inline bool EffectUpdateXp::has_recoverytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectUpdateXp::set_has_recoverytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectUpdateXp::clear_has_recoverytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectUpdateXp::clear_recoverytype() {
  recoverytype_ = 1;
  clear_has_recoverytype();
}
inline ::pb::XpRecoveryType EffectUpdateXp::recoverytype() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateXp.recoveryType)
  return static_cast< ::pb::XpRecoveryType >(recoverytype_);
}
inline void EffectUpdateXp::set_recoverytype(::pb::XpRecoveryType value) {
  assert(::pb::XpRecoveryType_IsValid(value));
  set_has_recoverytype();
  recoverytype_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateXp.recoveryType)
}

// optional int32 slainActorID = 4;
inline bool EffectUpdateXp::has_slainactorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EffectUpdateXp::set_has_slainactorid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EffectUpdateXp::clear_has_slainactorid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EffectUpdateXp::clear_slainactorid() {
  slainactorid_ = 0;
  clear_has_slainactorid();
}
inline ::google::protobuf::int32 EffectUpdateXp::slainactorid() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateXp.slainActorID)
  return slainactorid_;
}
inline void EffectUpdateXp::set_slainactorid(::google::protobuf::int32 value) {
  set_has_slainactorid();
  slainactorid_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateXp.slainActorID)
}

// -------------------------------------------------------------------

// EffectShield

// optional int32 buff_id = 1;
inline bool EffectShield::has_buff_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectShield::set_has_buff_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectShield::clear_has_buff_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectShield::clear_buff_id() {
  buff_id_ = 0;
  clear_has_buff_id();
}
inline ::google::protobuf::int32 EffectShield::buff_id() const {
  // @@protoc_insertion_point(field_get:pb.EffectShield.buff_id)
  return buff_id_;
}
inline void EffectShield::set_buff_id(::google::protobuf::int32 value) {
  set_has_buff_id();
  buff_id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectShield.buff_id)
}

// optional int32 damage_absorb = 2;
inline bool EffectShield::has_damage_absorb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectShield::set_has_damage_absorb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectShield::clear_has_damage_absorb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectShield::clear_damage_absorb() {
  damage_absorb_ = 0;
  clear_has_damage_absorb();
}
inline ::google::protobuf::int32 EffectShield::damage_absorb() const {
  // @@protoc_insertion_point(field_get:pb.EffectShield.damage_absorb)
  return damage_absorb_;
}
inline void EffectShield::set_damage_absorb(::google::protobuf::int32 value) {
  set_has_damage_absorb();
  damage_absorb_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectShield.damage_absorb)
}

// optional bool is_over = 3;
inline bool EffectShield::has_is_over() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectShield::set_has_is_over() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectShield::clear_has_is_over() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectShield::clear_is_over() {
  is_over_ = false;
  clear_has_is_over();
}
inline bool EffectShield::is_over() const {
  // @@protoc_insertion_point(field_get:pb.EffectShield.is_over)
  return is_over_;
}
inline void EffectShield::set_is_over(bool value) {
  set_has_is_over();
  is_over_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectShield.is_over)
}

// -------------------------------------------------------------------

// EffectUpdateHp

// optional int32 update_hp = 1;
inline bool EffectUpdateHp::has_update_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectUpdateHp::set_has_update_hp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectUpdateHp::clear_has_update_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectUpdateHp::clear_update_hp() {
  update_hp_ = 0;
  clear_has_update_hp();
}
inline ::google::protobuf::int32 EffectUpdateHp::update_hp() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.update_hp)
  return update_hp_;
}
inline void EffectUpdateHp::set_update_hp(::google::protobuf::int32 value) {
  set_has_update_hp();
  update_hp_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateHp.update_hp)
}

// optional bool is_dead = 2;
inline bool EffectUpdateHp::has_is_dead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectUpdateHp::set_has_is_dead() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectUpdateHp::clear_has_is_dead() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectUpdateHp::clear_is_dead() {
  is_dead_ = false;
  clear_has_is_dead();
}
inline bool EffectUpdateHp::is_dead() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.is_dead)
  return is_dead_;
}
inline void EffectUpdateHp::set_is_dead(bool value) {
  set_has_is_dead();
  is_dead_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateHp.is_dead)
}

// optional int32 resilience_hp = 3;
inline bool EffectUpdateHp::has_resilience_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectUpdateHp::set_has_resilience_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectUpdateHp::clear_has_resilience_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectUpdateHp::clear_resilience_hp() {
  resilience_hp_ = 0;
  clear_has_resilience_hp();
}
inline ::google::protobuf::int32 EffectUpdateHp::resilience_hp() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.resilience_hp)
  return resilience_hp_;
}
inline void EffectUpdateHp::set_resilience_hp(::google::protobuf::int32 value) {
  set_has_resilience_hp();
  resilience_hp_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateHp.resilience_hp)
}

// optional int32 blood_drinking = 4;
inline bool EffectUpdateHp::has_blood_drinking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EffectUpdateHp::set_has_blood_drinking() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EffectUpdateHp::clear_has_blood_drinking() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EffectUpdateHp::clear_blood_drinking() {
  blood_drinking_ = 0;
  clear_has_blood_drinking();
}
inline ::google::protobuf::int32 EffectUpdateHp::blood_drinking() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.blood_drinking)
  return blood_drinking_;
}
inline void EffectUpdateHp::set_blood_drinking(::google::protobuf::int32 value) {
  set_has_blood_drinking();
  blood_drinking_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateHp.blood_drinking)
}

// repeated .pb.EffectShield shield_infos = 5;
inline int EffectUpdateHp::shield_infos_size() const {
  return shield_infos_.size();
}
inline void EffectUpdateHp::clear_shield_infos() {
  shield_infos_.Clear();
}
inline const ::pb::EffectShield& EffectUpdateHp::shield_infos(int index) const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.shield_infos)
  return shield_infos_.Get(index);
}
inline ::pb::EffectShield* EffectUpdateHp::mutable_shield_infos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.EffectUpdateHp.shield_infos)
  return shield_infos_.Mutable(index);
}
inline ::pb::EffectShield* EffectUpdateHp::add_shield_infos() {
  // @@protoc_insertion_point(field_add:pb.EffectUpdateHp.shield_infos)
  return shield_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::EffectShield >&
EffectUpdateHp::shield_infos() const {
  // @@protoc_insertion_point(field_list:pb.EffectUpdateHp.shield_infos)
  return shield_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::EffectShield >*
EffectUpdateHp::mutable_shield_infos() {
  // @@protoc_insertion_point(field_mutable_list:pb.EffectUpdateHp.shield_infos)
  return &shield_infos_;
}

// optional int32 blockTherapy = 6;
inline bool EffectUpdateHp::has_blocktherapy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EffectUpdateHp::set_has_blocktherapy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EffectUpdateHp::clear_has_blocktherapy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EffectUpdateHp::clear_blocktherapy() {
  blocktherapy_ = 0;
  clear_has_blocktherapy();
}
inline ::google::protobuf::int32 EffectUpdateHp::blocktherapy() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.blockTherapy)
  return blocktherapy_;
}
inline void EffectUpdateHp::set_blocktherapy(::google::protobuf::int32 value) {
  set_has_blocktherapy();
  blocktherapy_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateHp.blockTherapy)
}

// optional int32 strikeTherapy = 7;
inline bool EffectUpdateHp::has_striketherapy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EffectUpdateHp::set_has_striketherapy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EffectUpdateHp::clear_has_striketherapy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EffectUpdateHp::clear_striketherapy() {
  striketherapy_ = 0;
  clear_has_striketherapy();
}
inline ::google::protobuf::int32 EffectUpdateHp::striketherapy() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.strikeTherapy)
  return striketherapy_;
}
inline void EffectUpdateHp::set_striketherapy(::google::protobuf::int32 value) {
  set_has_striketherapy();
  striketherapy_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateHp.strikeTherapy)
}

// optional int32 s_damageTherapy = 8;
inline bool EffectUpdateHp::has_s_damagetherapy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EffectUpdateHp::set_has_s_damagetherapy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EffectUpdateHp::clear_has_s_damagetherapy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EffectUpdateHp::clear_s_damagetherapy() {
  s_damagetherapy_ = 0;
  clear_has_s_damagetherapy();
}
inline ::google::protobuf::int32 EffectUpdateHp::s_damagetherapy() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.s_damageTherapy)
  return s_damagetherapy_;
}
inline void EffectUpdateHp::set_s_damagetherapy(::google::protobuf::int32 value) {
  set_has_s_damagetherapy();
  s_damagetherapy_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateHp.s_damageTherapy)
}

// optional int32 s_blockTherapy = 9;
inline bool EffectUpdateHp::has_s_blocktherapy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EffectUpdateHp::set_has_s_blocktherapy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EffectUpdateHp::clear_has_s_blocktherapy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EffectUpdateHp::clear_s_blocktherapy() {
  s_blocktherapy_ = 0;
  clear_has_s_blocktherapy();
}
inline ::google::protobuf::int32 EffectUpdateHp::s_blocktherapy() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.s_blockTherapy)
  return s_blocktherapy_;
}
inline void EffectUpdateHp::set_s_blocktherapy(::google::protobuf::int32 value) {
  set_has_s_blocktherapy();
  s_blocktherapy_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateHp.s_blockTherapy)
}

// optional int32 s_strikeTherapy = 10;
inline bool EffectUpdateHp::has_s_striketherapy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EffectUpdateHp::set_has_s_striketherapy() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EffectUpdateHp::clear_has_s_striketherapy() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EffectUpdateHp::clear_s_striketherapy() {
  s_striketherapy_ = 0;
  clear_has_s_striketherapy();
}
inline ::google::protobuf::int32 EffectUpdateHp::s_striketherapy() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.s_strikeTherapy)
  return s_striketherapy_;
}
inline void EffectUpdateHp::set_s_striketherapy(::google::protobuf::int32 value) {
  set_has_s_striketherapy();
  s_striketherapy_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateHp.s_strikeTherapy)
}

// optional bool is_show = 11;
inline bool EffectUpdateHp::has_is_show() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EffectUpdateHp::set_has_is_show() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EffectUpdateHp::clear_has_is_show() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EffectUpdateHp::clear_is_show() {
  is_show_ = false;
  clear_has_is_show();
}
inline bool EffectUpdateHp::is_show() const {
  // @@protoc_insertion_point(field_get:pb.EffectUpdateHp.is_show)
  return is_show_;
}
inline void EffectUpdateHp::set_is_show(bool value) {
  set_has_is_show();
  is_show_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectUpdateHp.is_show)
}

// -------------------------------------------------------------------

// EffectCmd

// optional int32 target_id = 1;
inline bool EffectCmd::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectCmd::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectCmd::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectCmd::clear_target_id() {
  target_id_ = 0;
  clear_has_target_id();
}
inline ::google::protobuf::int32 EffectCmd::target_id() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.target_id)
  return target_id_;
}
inline void EffectCmd::set_target_id(::google::protobuf::int32 value) {
  set_has_target_id();
  target_id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.target_id)
}

// optional int32 subEffect_id = 2;
inline bool EffectCmd::has_subeffect_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectCmd::set_has_subeffect_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectCmd::clear_has_subeffect_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectCmd::clear_subeffect_id() {
  subeffect_id_ = 0;
  clear_has_subeffect_id();
}
inline ::google::protobuf::int32 EffectCmd::subeffect_id() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.subEffect_id)
  return subeffect_id_;
}
inline void EffectCmd::set_subeffect_id(::google::protobuf::int32 value) {
  set_has_subeffect_id();
  subeffect_id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.subEffect_id)
}

// optional int32 order = 3;
inline bool EffectCmd::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectCmd::set_has_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectCmd::clear_has_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectCmd::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 EffectCmd::order() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.order)
  return order_;
}
inline void EffectCmd::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.order)
}

// optional int32 buff_meta_id = 4;
inline bool EffectCmd::has_buff_meta_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EffectCmd::set_has_buff_meta_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EffectCmd::clear_has_buff_meta_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EffectCmd::clear_buff_meta_id() {
  buff_meta_id_ = 0;
  clear_has_buff_meta_id();
}
inline ::google::protobuf::int32 EffectCmd::buff_meta_id() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.buff_meta_id)
  return buff_meta_id_;
}
inline void EffectCmd::set_buff_meta_id(::google::protobuf::int32 value) {
  set_has_buff_meta_id();
  buff_meta_id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.buff_meta_id)
}

// optional .pb.EffectType effect_type = 5;
inline bool EffectCmd::has_effect_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EffectCmd::set_has_effect_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EffectCmd::clear_has_effect_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EffectCmd::clear_effect_type() {
  effect_type_ = 1;
  clear_has_effect_type();
}
inline ::pb::EffectType EffectCmd::effect_type() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.effect_type)
  return static_cast< ::pb::EffectType >(effect_type_);
}
inline void EffectCmd::set_effect_type(::pb::EffectType value) {
  assert(::pb::EffectType_IsValid(value));
  set_has_effect_type();
  effect_type_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.effect_type)
}

// optional .pb.EffectUpdateXp update_xp = 6;
inline bool EffectCmd::has_update_xp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EffectCmd::set_has_update_xp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EffectCmd::clear_has_update_xp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EffectCmd::clear_update_xp() {
  if (update_xp_ != NULL) update_xp_->::pb::EffectUpdateXp::Clear();
  clear_has_update_xp();
}
inline const ::pb::EffectUpdateXp& EffectCmd::update_xp() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.update_xp)
  return update_xp_ != NULL ? *update_xp_ : *default_instance_->update_xp_;
}
inline ::pb::EffectUpdateXp* EffectCmd::mutable_update_xp() {
  set_has_update_xp();
  if (update_xp_ == NULL) update_xp_ = new ::pb::EffectUpdateXp;
  // @@protoc_insertion_point(field_mutable:pb.EffectCmd.update_xp)
  return update_xp_;
}
inline ::pb::EffectUpdateXp* EffectCmd::release_update_xp() {
  clear_has_update_xp();
  ::pb::EffectUpdateXp* temp = update_xp_;
  update_xp_ = NULL;
  return temp;
}
inline void EffectCmd::set_allocated_update_xp(::pb::EffectUpdateXp* update_xp) {
  delete update_xp_;
  update_xp_ = update_xp;
  if (update_xp) {
    set_has_update_xp();
  } else {
    clear_has_update_xp();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.EffectCmd.update_xp)
}

// optional .pb.EffectUpdateHp update_hp = 7;
inline bool EffectCmd::has_update_hp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EffectCmd::set_has_update_hp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EffectCmd::clear_has_update_hp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EffectCmd::clear_update_hp() {
  if (update_hp_ != NULL) update_hp_->::pb::EffectUpdateHp::Clear();
  clear_has_update_hp();
}
inline const ::pb::EffectUpdateHp& EffectCmd::update_hp() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.update_hp)
  return update_hp_ != NULL ? *update_hp_ : *default_instance_->update_hp_;
}
inline ::pb::EffectUpdateHp* EffectCmd::mutable_update_hp() {
  set_has_update_hp();
  if (update_hp_ == NULL) update_hp_ = new ::pb::EffectUpdateHp;
  // @@protoc_insertion_point(field_mutable:pb.EffectCmd.update_hp)
  return update_hp_;
}
inline ::pb::EffectUpdateHp* EffectCmd::release_update_hp() {
  clear_has_update_hp();
  ::pb::EffectUpdateHp* temp = update_hp_;
  update_hp_ = NULL;
  return temp;
}
inline void EffectCmd::set_allocated_update_hp(::pb::EffectUpdateHp* update_hp) {
  delete update_hp_;
  update_hp_ = update_hp;
  if (update_hp) {
    set_has_update_hp();
  } else {
    clear_has_update_hp();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.EffectCmd.update_hp)
}

// optional .pb.EffectAttachBuff attach_buff = 8;
inline bool EffectCmd::has_attach_buff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EffectCmd::set_has_attach_buff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EffectCmd::clear_has_attach_buff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EffectCmd::clear_attach_buff() {
  if (attach_buff_ != NULL) attach_buff_->::pb::EffectAttachBuff::Clear();
  clear_has_attach_buff();
}
inline const ::pb::EffectAttachBuff& EffectCmd::attach_buff() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.attach_buff)
  return attach_buff_ != NULL ? *attach_buff_ : *default_instance_->attach_buff_;
}
inline ::pb::EffectAttachBuff* EffectCmd::mutable_attach_buff() {
  set_has_attach_buff();
  if (attach_buff_ == NULL) attach_buff_ = new ::pb::EffectAttachBuff;
  // @@protoc_insertion_point(field_mutable:pb.EffectCmd.attach_buff)
  return attach_buff_;
}
inline ::pb::EffectAttachBuff* EffectCmd::release_attach_buff() {
  clear_has_attach_buff();
  ::pb::EffectAttachBuff* temp = attach_buff_;
  attach_buff_ = NULL;
  return temp;
}
inline void EffectCmd::set_allocated_attach_buff(::pb::EffectAttachBuff* attach_buff) {
  delete attach_buff_;
  attach_buff_ = attach_buff;
  if (attach_buff) {
    set_has_attach_buff();
  } else {
    clear_has_attach_buff();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.EffectCmd.attach_buff)
}

// optional .pb.EffectDetachBuff detach_buff = 9;
inline bool EffectCmd::has_detach_buff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EffectCmd::set_has_detach_buff() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EffectCmd::clear_has_detach_buff() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EffectCmd::clear_detach_buff() {
  if (detach_buff_ != NULL) detach_buff_->::pb::EffectDetachBuff::Clear();
  clear_has_detach_buff();
}
inline const ::pb::EffectDetachBuff& EffectCmd::detach_buff() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.detach_buff)
  return detach_buff_ != NULL ? *detach_buff_ : *default_instance_->detach_buff_;
}
inline ::pb::EffectDetachBuff* EffectCmd::mutable_detach_buff() {
  set_has_detach_buff();
  if (detach_buff_ == NULL) detach_buff_ = new ::pb::EffectDetachBuff;
  // @@protoc_insertion_point(field_mutable:pb.EffectCmd.detach_buff)
  return detach_buff_;
}
inline ::pb::EffectDetachBuff* EffectCmd::release_detach_buff() {
  clear_has_detach_buff();
  ::pb::EffectDetachBuff* temp = detach_buff_;
  detach_buff_ = NULL;
  return temp;
}
inline void EffectCmd::set_allocated_detach_buff(::pb::EffectDetachBuff* detach_buff) {
  delete detach_buff_;
  detach_buff_ = detach_buff;
  if (detach_buff) {
    set_has_detach_buff();
  } else {
    clear_has_detach_buff();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.EffectCmd.detach_buff)
}

// optional int32 triggerEvt = 10;
inline bool EffectCmd::has_triggerevt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EffectCmd::set_has_triggerevt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EffectCmd::clear_has_triggerevt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EffectCmd::clear_triggerevt() {
  triggerevt_ = 0;
  clear_has_triggerevt();
}
inline ::google::protobuf::int32 EffectCmd::triggerevt() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.triggerEvt)
  return triggerevt_;
}
inline void EffectCmd::set_triggerevt(::google::protobuf::int32 value) {
  set_has_triggerevt();
  triggerevt_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.triggerEvt)
}

// optional int32 triggerCaster_id = 11;
inline bool EffectCmd::has_triggercaster_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EffectCmd::set_has_triggercaster_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EffectCmd::clear_has_triggercaster_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EffectCmd::clear_triggercaster_id() {
  triggercaster_id_ = 0;
  clear_has_triggercaster_id();
}
inline ::google::protobuf::int32 EffectCmd::triggercaster_id() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.triggerCaster_id)
  return triggercaster_id_;
}
inline void EffectCmd::set_triggercaster_id(::google::protobuf::int32 value) {
  set_has_triggercaster_id();
  triggercaster_id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.triggerCaster_id)
}

// optional int32 trigger_id = 12;
inline bool EffectCmd::has_trigger_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EffectCmd::set_has_trigger_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EffectCmd::clear_has_trigger_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EffectCmd::clear_trigger_id() {
  trigger_id_ = 0;
  clear_has_trigger_id();
}
inline ::google::protobuf::int32 EffectCmd::trigger_id() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.trigger_id)
  return trigger_id_;
}
inline void EffectCmd::set_trigger_id(::google::protobuf::int32 value) {
  set_has_trigger_id();
  trigger_id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.trigger_id)
}

// optional int32 triggerDeadActor_id = 13;
inline bool EffectCmd::has_triggerdeadactor_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EffectCmd::set_has_triggerdeadactor_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EffectCmd::clear_has_triggerdeadactor_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EffectCmd::clear_triggerdeadactor_id() {
  triggerdeadactor_id_ = 0;
  clear_has_triggerdeadactor_id();
}
inline ::google::protobuf::int32 EffectCmd::triggerdeadactor_id() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.triggerDeadActor_id)
  return triggerdeadactor_id_;
}
inline void EffectCmd::set_triggerdeadactor_id(::google::protobuf::int32 value) {
  set_has_triggerdeadactor_id();
  triggerdeadactor_id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.triggerDeadActor_id)
}

// optional int32 caster_id = 14;
inline bool EffectCmd::has_caster_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EffectCmd::set_has_caster_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EffectCmd::clear_has_caster_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EffectCmd::clear_caster_id() {
  caster_id_ = 0;
  clear_has_caster_id();
}
inline ::google::protobuf::int32 EffectCmd::caster_id() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.caster_id)
  return caster_id_;
}
inline void EffectCmd::set_caster_id(::google::protobuf::int32 value) {
  set_has_caster_id();
  caster_id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.caster_id)
}

// optional bool only_trigger = 15;
inline bool EffectCmd::has_only_trigger() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EffectCmd::set_has_only_trigger() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EffectCmd::clear_has_only_trigger() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EffectCmd::clear_only_trigger() {
  only_trigger_ = false;
  clear_has_only_trigger();
}
inline bool EffectCmd::only_trigger() const {
  // @@protoc_insertion_point(field_get:pb.EffectCmd.only_trigger)
  return only_trigger_;
}
inline void EffectCmd::set_only_trigger(bool value) {
  set_has_only_trigger();
  only_trigger_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectCmd.only_trigger)
}

// -------------------------------------------------------------------

// SkillCmd

// optional int32 caster_id = 1;
inline bool SkillCmd::has_caster_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillCmd::set_has_caster_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillCmd::clear_has_caster_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillCmd::clear_caster_id() {
  caster_id_ = 0;
  clear_has_caster_id();
}
inline ::google::protobuf::int32 SkillCmd::caster_id() const {
  // @@protoc_insertion_point(field_get:pb.SkillCmd.caster_id)
  return caster_id_;
}
inline void SkillCmd::set_caster_id(::google::protobuf::int32 value) {
  set_has_caster_id();
  caster_id_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCmd.caster_id)
}

// optional int32 target_id = 2;
inline bool SkillCmd::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillCmd::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillCmd::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillCmd::clear_target_id() {
  target_id_ = 0;
  clear_has_target_id();
}
inline ::google::protobuf::int32 SkillCmd::target_id() const {
  // @@protoc_insertion_point(field_get:pb.SkillCmd.target_id)
  return target_id_;
}
inline void SkillCmd::set_target_id(::google::protobuf::int32 value) {
  set_has_target_id();
  target_id_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCmd.target_id)
}

// optional int32 skill_meta_id = 3;
inline bool SkillCmd::has_skill_meta_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillCmd::set_has_skill_meta_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillCmd::clear_has_skill_meta_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillCmd::clear_skill_meta_id() {
  skill_meta_id_ = 0;
  clear_has_skill_meta_id();
}
inline ::google::protobuf::int32 SkillCmd::skill_meta_id() const {
  // @@protoc_insertion_point(field_get:pb.SkillCmd.skill_meta_id)
  return skill_meta_id_;
}
inline void SkillCmd::set_skill_meta_id(::google::protobuf::int32 value) {
  set_has_skill_meta_id();
  skill_meta_id_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCmd.skill_meta_id)
}

// optional int32 doubleHitRank = 4;
inline bool SkillCmd::has_doublehitrank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillCmd::set_has_doublehitrank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillCmd::clear_has_doublehitrank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillCmd::clear_doublehitrank() {
  doublehitrank_ = 0;
  clear_has_doublehitrank();
}
inline ::google::protobuf::int32 SkillCmd::doublehitrank() const {
  // @@protoc_insertion_point(field_get:pb.SkillCmd.doubleHitRank)
  return doublehitrank_;
}
inline void SkillCmd::set_doublehitrank(::google::protobuf::int32 value) {
  set_has_doublehitrank();
  doublehitrank_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCmd.doubleHitRank)
}

// repeated .pb.EffectCmd effect_cmds = 5;
inline int SkillCmd::effect_cmds_size() const {
  return effect_cmds_.size();
}
inline void SkillCmd::clear_effect_cmds() {
  effect_cmds_.Clear();
}
inline const ::pb::EffectCmd& SkillCmd::effect_cmds(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillCmd.effect_cmds)
  return effect_cmds_.Get(index);
}
inline ::pb::EffectCmd* SkillCmd::mutable_effect_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SkillCmd.effect_cmds)
  return effect_cmds_.Mutable(index);
}
inline ::pb::EffectCmd* SkillCmd::add_effect_cmds() {
  // @@protoc_insertion_point(field_add:pb.SkillCmd.effect_cmds)
  return effect_cmds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >&
SkillCmd::effect_cmds() const {
  // @@protoc_insertion_point(field_list:pb.SkillCmd.effect_cmds)
  return effect_cmds_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >*
SkillCmd::mutable_effect_cmds() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillCmd.effect_cmds)
  return &effect_cmds_;
}

// -------------------------------------------------------------------

// ReplayCmd

// optional .pb.SkillCmd skill_cmd = 1;
inline bool ReplayCmd::has_skill_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplayCmd::set_has_skill_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplayCmd::clear_has_skill_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplayCmd::clear_skill_cmd() {
  if (skill_cmd_ != NULL) skill_cmd_->::pb::SkillCmd::Clear();
  clear_has_skill_cmd();
}
inline const ::pb::SkillCmd& ReplayCmd::skill_cmd() const {
  // @@protoc_insertion_point(field_get:pb.ReplayCmd.skill_cmd)
  return skill_cmd_ != NULL ? *skill_cmd_ : *default_instance_->skill_cmd_;
}
inline ::pb::SkillCmd* ReplayCmd::mutable_skill_cmd() {
  set_has_skill_cmd();
  if (skill_cmd_ == NULL) skill_cmd_ = new ::pb::SkillCmd;
  // @@protoc_insertion_point(field_mutable:pb.ReplayCmd.skill_cmd)
  return skill_cmd_;
}
inline ::pb::SkillCmd* ReplayCmd::release_skill_cmd() {
  clear_has_skill_cmd();
  ::pb::SkillCmd* temp = skill_cmd_;
  skill_cmd_ = NULL;
  return temp;
}
inline void ReplayCmd::set_allocated_skill_cmd(::pb::SkillCmd* skill_cmd) {
  delete skill_cmd_;
  skill_cmd_ = skill_cmd;
  if (skill_cmd) {
    set_has_skill_cmd();
  } else {
    clear_has_skill_cmd();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ReplayCmd.skill_cmd)
}

// optional int32 triggerTime = 2;
inline bool ReplayCmd::has_triggertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplayCmd::set_has_triggertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplayCmd::clear_has_triggertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplayCmd::clear_triggertime() {
  triggertime_ = 0;
  clear_has_triggertime();
}
inline ::google::protobuf::int32 ReplayCmd::triggertime() const {
  // @@protoc_insertion_point(field_get:pb.ReplayCmd.triggerTime)
  return triggertime_;
}
inline void ReplayCmd::set_triggertime(::google::protobuf::int32 value) {
  set_has_triggertime();
  triggertime_ = value;
  // @@protoc_insertion_point(field_set:pb.ReplayCmd.triggerTime)
}

// optional bool redo = 3;
inline bool ReplayCmd::has_redo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplayCmd::set_has_redo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplayCmd::clear_has_redo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplayCmd::clear_redo() {
  redo_ = false;
  clear_has_redo();
}
inline bool ReplayCmd::redo() const {
  // @@protoc_insertion_point(field_get:pb.ReplayCmd.redo)
  return redo_;
}
inline void ReplayCmd::set_redo(bool value) {
  set_has_redo();
  redo_ = value;
  // @@protoc_insertion_point(field_set:pb.ReplayCmd.redo)
}

// -------------------------------------------------------------------

// RoundCmd

// repeated .pb.EffectCmd prev_effect_cmds = 1;
inline int RoundCmd::prev_effect_cmds_size() const {
  return prev_effect_cmds_.size();
}
inline void RoundCmd::clear_prev_effect_cmds() {
  prev_effect_cmds_.Clear();
}
inline const ::pb::EffectCmd& RoundCmd::prev_effect_cmds(int index) const {
  // @@protoc_insertion_point(field_get:pb.RoundCmd.prev_effect_cmds)
  return prev_effect_cmds_.Get(index);
}
inline ::pb::EffectCmd* RoundCmd::mutable_prev_effect_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RoundCmd.prev_effect_cmds)
  return prev_effect_cmds_.Mutable(index);
}
inline ::pb::EffectCmd* RoundCmd::add_prev_effect_cmds() {
  // @@protoc_insertion_point(field_add:pb.RoundCmd.prev_effect_cmds)
  return prev_effect_cmds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >&
RoundCmd::prev_effect_cmds() const {
  // @@protoc_insertion_point(field_list:pb.RoundCmd.prev_effect_cmds)
  return prev_effect_cmds_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >*
RoundCmd::mutable_prev_effect_cmds() {
  // @@protoc_insertion_point(field_mutable_list:pb.RoundCmd.prev_effect_cmds)
  return &prev_effect_cmds_;
}

// repeated .pb.ReplayCmd replayList = 2;
inline int RoundCmd::replaylist_size() const {
  return replaylist_.size();
}
inline void RoundCmd::clear_replaylist() {
  replaylist_.Clear();
}
inline const ::pb::ReplayCmd& RoundCmd::replaylist(int index) const {
  // @@protoc_insertion_point(field_get:pb.RoundCmd.replayList)
  return replaylist_.Get(index);
}
inline ::pb::ReplayCmd* RoundCmd::mutable_replaylist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RoundCmd.replayList)
  return replaylist_.Mutable(index);
}
inline ::pb::ReplayCmd* RoundCmd::add_replaylist() {
  // @@protoc_insertion_point(field_add:pb.RoundCmd.replayList)
  return replaylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ReplayCmd >&
RoundCmd::replaylist() const {
  // @@protoc_insertion_point(field_list:pb.RoundCmd.replayList)
  return replaylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ReplayCmd >*
RoundCmd::mutable_replaylist() {
  // @@protoc_insertion_point(field_mutable_list:pb.RoundCmd.replayList)
  return &replaylist_;
}

// repeated .pb.EffectCmd post_effect_cmds = 3;
inline int RoundCmd::post_effect_cmds_size() const {
  return post_effect_cmds_.size();
}
inline void RoundCmd::clear_post_effect_cmds() {
  post_effect_cmds_.Clear();
}
inline const ::pb::EffectCmd& RoundCmd::post_effect_cmds(int index) const {
  // @@protoc_insertion_point(field_get:pb.RoundCmd.post_effect_cmds)
  return post_effect_cmds_.Get(index);
}
inline ::pb::EffectCmd* RoundCmd::mutable_post_effect_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RoundCmd.post_effect_cmds)
  return post_effect_cmds_.Mutable(index);
}
inline ::pb::EffectCmd* RoundCmd::add_post_effect_cmds() {
  // @@protoc_insertion_point(field_add:pb.RoundCmd.post_effect_cmds)
  return post_effect_cmds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >&
RoundCmd::post_effect_cmds() const {
  // @@protoc_insertion_point(field_list:pb.RoundCmd.post_effect_cmds)
  return post_effect_cmds_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::EffectCmd >*
RoundCmd::mutable_post_effect_cmds() {
  // @@protoc_insertion_point(field_mutable_list:pb.RoundCmd.post_effect_cmds)
  return &post_effect_cmds_;
}

// -------------------------------------------------------------------

// ActorInfo

// optional int32 actor_id = 1;
inline bool ActorInfo::has_actor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActorInfo::set_has_actor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActorInfo::clear_has_actor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActorInfo::clear_actor_id() {
  actor_id_ = 0;
  clear_has_actor_id();
}
inline ::google::protobuf::int32 ActorInfo::actor_id() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.actor_id)
  return actor_id_;
}
inline void ActorInfo::set_actor_id(::google::protobuf::int32 value) {
  set_has_actor_id();
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.actor_id)
}

// optional int32 meta_id = 2;
inline bool ActorInfo::has_meta_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActorInfo::set_has_meta_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActorInfo::clear_has_meta_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActorInfo::clear_meta_id() {
  meta_id_ = 0;
  clear_has_meta_id();
}
inline ::google::protobuf::int32 ActorInfo::meta_id() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.meta_id)
  return meta_id_;
}
inline void ActorInfo::set_meta_id(::google::protobuf::int32 value) {
  set_has_meta_id();
  meta_id_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.meta_id)
}

// optional int32 pos_index = 3;
inline bool ActorInfo::has_pos_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActorInfo::set_has_pos_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActorInfo::clear_has_pos_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActorInfo::clear_pos_index() {
  pos_index_ = 0;
  clear_has_pos_index();
}
inline ::google::protobuf::int32 ActorInfo::pos_index() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.pos_index)
  return pos_index_;
}
inline void ActorInfo::set_pos_index(::google::protobuf::int32 value) {
  set_has_pos_index();
  pos_index_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.pos_index)
}

// optional int32 area_index = 4;
inline bool ActorInfo::has_area_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActorInfo::set_has_area_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActorInfo::clear_has_area_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActorInfo::clear_area_index() {
  area_index_ = 0;
  clear_has_area_index();
}
inline ::google::protobuf::int32 ActorInfo::area_index() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.area_index)
  return area_index_;
}
inline void ActorInfo::set_area_index(::google::protobuf::int32 value) {
  set_has_area_index();
  area_index_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.area_index)
}

// optional int32 hp = 5;
inline bool ActorInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActorInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActorInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActorInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 ActorInfo::hp() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.hp)
  return hp_;
}
inline void ActorInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.hp)
}

// optional int32 xp = 6;
inline bool ActorInfo::has_xp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActorInfo::set_has_xp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ActorInfo::clear_has_xp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ActorInfo::clear_xp() {
  xp_ = 0;
  clear_has_xp();
}
inline ::google::protobuf::int32 ActorInfo::xp() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.xp)
  return xp_;
}
inline void ActorInfo::set_xp(::google::protobuf::int32 value) {
  set_has_xp();
  xp_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.xp)
}

// optional string name = 7;
inline bool ActorInfo::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActorInfo::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ActorInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ActorInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ActorInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.name)
  return *name_;
}
inline void ActorInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.ActorInfo.name)
}
inline void ActorInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.ActorInfo.name)
}
inline void ActorInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.ActorInfo.name)
}
inline ::std::string* ActorInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.ActorInfo.name)
  return name_;
}
inline ::std::string* ActorInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActorInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ActorInfo.name)
}

// optional int32 hpMax = 8;
inline bool ActorInfo::has_hpmax() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ActorInfo::set_has_hpmax() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ActorInfo::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ActorInfo::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 ActorInfo::hpmax() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.hpMax)
  return hpmax_;
}
inline void ActorInfo::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.hpMax)
}

// optional int32 hero_id = 9;
inline bool ActorInfo::has_hero_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ActorInfo::set_has_hero_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ActorInfo::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ActorInfo::clear_hero_id() {
  hero_id_ = 0;
  clear_has_hero_id();
}
inline ::google::protobuf::int32 ActorInfo::hero_id() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.hero_id)
  return hero_id_;
}
inline void ActorInfo::set_hero_id(::google::protobuf::int32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.hero_id)
}

// optional int32 xpMax = 10;
inline bool ActorInfo::has_xpmax() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ActorInfo::set_has_xpmax() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ActorInfo::clear_has_xpmax() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ActorInfo::clear_xpmax() {
  xpmax_ = 0;
  clear_has_xpmax();
}
inline ::google::protobuf::int32 ActorInfo::xpmax() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.xpMax)
  return xpmax_;
}
inline void ActorInfo::set_xpmax(::google::protobuf::int32 value) {
  set_has_xpmax();
  xpmax_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.xpMax)
}

// optional int32 activeRound = 11;
inline bool ActorInfo::has_activeround() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ActorInfo::set_has_activeround() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ActorInfo::clear_has_activeround() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ActorInfo::clear_activeround() {
  activeround_ = 0;
  clear_has_activeround();
}
inline ::google::protobuf::int32 ActorInfo::activeround() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.activeRound)
  return activeround_;
}
inline void ActorInfo::set_activeround(::google::protobuf::int32 value) {
  set_has_activeround();
  activeround_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.activeRound)
}

// optional int32 fashionId = 12;
inline bool ActorInfo::has_fashionid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ActorInfo::set_has_fashionid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ActorInfo::clear_has_fashionid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ActorInfo::clear_fashionid() {
  fashionid_ = 0;
  clear_has_fashionid();
}
inline ::google::protobuf::int32 ActorInfo::fashionid() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.fashionId)
  return fashionid_;
}
inline void ActorInfo::set_fashionid(::google::protobuf::int32 value) {
  set_has_fashionid();
  fashionid_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.fashionId)
}

// optional int32 level = 13;
inline bool ActorInfo::has_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ActorInfo::set_has_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ActorInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ActorInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ActorInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.level)
  return level_;
}
inline void ActorInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.level)
}

// optional int32 awake = 14;
inline bool ActorInfo::has_awake() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ActorInfo::set_has_awake() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ActorInfo::clear_has_awake() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ActorInfo::clear_awake() {
  awake_ = 0;
  clear_has_awake();
}
inline ::google::protobuf::int32 ActorInfo::awake() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.awake)
  return awake_;
}
inline void ActorInfo::set_awake(::google::protobuf::int32 value) {
  set_has_awake();
  awake_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.awake)
}

// optional int32 advance = 15;
inline bool ActorInfo::has_advance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ActorInfo::set_has_advance() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ActorInfo::clear_has_advance() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ActorInfo::clear_advance() {
  advance_ = 0;
  clear_has_advance();
}
inline ::google::protobuf::int32 ActorInfo::advance() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.advance)
  return advance_;
}
inline void ActorInfo::set_advance(::google::protobuf::int32 value) {
  set_has_advance();
  advance_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.advance)
}

// optional int32 halo = 16;
inline bool ActorInfo::has_halo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ActorInfo::set_has_halo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ActorInfo::clear_has_halo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ActorInfo::clear_halo() {
  halo_ = 0;
  clear_has_halo();
}
inline ::google::protobuf::int32 ActorInfo::halo() const {
  // @@protoc_insertion_point(field_get:pb.ActorInfo.halo)
  return halo_;
}
inline void ActorInfo::set_halo(::google::protobuf::int32 value) {
  set_has_halo();
  halo_ = value;
  // @@protoc_insertion_point(field_set:pb.ActorInfo.halo)
}

// -------------------------------------------------------------------

// BattleReplay

// optional int32 winner = 1;
inline bool BattleReplay::has_winner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleReplay::set_has_winner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleReplay::clear_has_winner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleReplay::clear_winner() {
  winner_ = 0;
  clear_has_winner();
}
inline ::google::protobuf::int32 BattleReplay::winner() const {
  // @@protoc_insertion_point(field_get:pb.BattleReplay.winner)
  return winner_;
}
inline void BattleReplay::set_winner(::google::protobuf::int32 value) {
  set_has_winner();
  winner_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleReplay.winner)
}

// repeated .pb.ActorInfo init_cells = 2;
inline int BattleReplay::init_cells_size() const {
  return init_cells_.size();
}
inline void BattleReplay::clear_init_cells() {
  init_cells_.Clear();
}
inline const ::pb::ActorInfo& BattleReplay::init_cells(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleReplay.init_cells)
  return init_cells_.Get(index);
}
inline ::pb::ActorInfo* BattleReplay::mutable_init_cells(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleReplay.init_cells)
  return init_cells_.Mutable(index);
}
inline ::pb::ActorInfo* BattleReplay::add_init_cells() {
  // @@protoc_insertion_point(field_add:pb.BattleReplay.init_cells)
  return init_cells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ActorInfo >&
BattleReplay::init_cells() const {
  // @@protoc_insertion_point(field_list:pb.BattleReplay.init_cells)
  return init_cells_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ActorInfo >*
BattleReplay::mutable_init_cells() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleReplay.init_cells)
  return &init_cells_;
}

// repeated .pb.ActorInfo over_cells = 3;
inline int BattleReplay::over_cells_size() const {
  return over_cells_.size();
}
inline void BattleReplay::clear_over_cells() {
  over_cells_.Clear();
}
inline const ::pb::ActorInfo& BattleReplay::over_cells(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleReplay.over_cells)
  return over_cells_.Get(index);
}
inline ::pb::ActorInfo* BattleReplay::mutable_over_cells(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleReplay.over_cells)
  return over_cells_.Mutable(index);
}
inline ::pb::ActorInfo* BattleReplay::add_over_cells() {
  // @@protoc_insertion_point(field_add:pb.BattleReplay.over_cells)
  return over_cells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ActorInfo >&
BattleReplay::over_cells() const {
  // @@protoc_insertion_point(field_list:pb.BattleReplay.over_cells)
  return over_cells_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ActorInfo >*
BattleReplay::mutable_over_cells() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleReplay.over_cells)
  return &over_cells_;
}

// repeated .pb.RoundCmd round_cmds = 4;
inline int BattleReplay::round_cmds_size() const {
  return round_cmds_.size();
}
inline void BattleReplay::clear_round_cmds() {
  round_cmds_.Clear();
}
inline const ::pb::RoundCmd& BattleReplay::round_cmds(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleReplay.round_cmds)
  return round_cmds_.Get(index);
}
inline ::pb::RoundCmd* BattleReplay::mutable_round_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleReplay.round_cmds)
  return round_cmds_.Mutable(index);
}
inline ::pb::RoundCmd* BattleReplay::add_round_cmds() {
  // @@protoc_insertion_point(field_add:pb.BattleReplay.round_cmds)
  return round_cmds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::RoundCmd >&
BattleReplay::round_cmds() const {
  // @@protoc_insertion_point(field_list:pb.BattleReplay.round_cmds)
  return round_cmds_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::RoundCmd >*
BattleReplay::mutable_round_cmds() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleReplay.round_cmds)
  return &round_cmds_;
}

// optional int32 fail_code = 5;
inline bool BattleReplay::has_fail_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleReplay::set_has_fail_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleReplay::clear_has_fail_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleReplay::clear_fail_code() {
  fail_code_ = 0;
  clear_has_fail_code();
}
inline ::google::protobuf::int32 BattleReplay::fail_code() const {
  // @@protoc_insertion_point(field_get:pb.BattleReplay.fail_code)
  return fail_code_;
}
inline void BattleReplay::set_fail_code(::google::protobuf::int32 value) {
  set_has_fail_code();
  fail_code_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleReplay.fail_code)
}

// optional int32 first_attack = 6;
inline bool BattleReplay::has_first_attack() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleReplay::set_has_first_attack() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleReplay::clear_has_first_attack() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleReplay::clear_first_attack() {
  first_attack_ = 0;
  clear_has_first_attack();
}
inline ::google::protobuf::int32 BattleReplay::first_attack() const {
  // @@protoc_insertion_point(field_get:pb.BattleReplay.first_attack)
  return first_attack_;
}
inline void BattleReplay::set_first_attack(::google::protobuf::int32 value) {
  set_has_first_attack();
  first_attack_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleReplay.first_attack)
}

// optional int32 max_round = 7;
inline bool BattleReplay::has_max_round() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleReplay::set_has_max_round() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleReplay::clear_has_max_round() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleReplay::clear_max_round() {
  max_round_ = 0;
  clear_has_max_round();
}
inline ::google::protobuf::int32 BattleReplay::max_round() const {
  // @@protoc_insertion_point(field_get:pb.BattleReplay.max_round)
  return max_round_;
}
inline void BattleReplay::set_max_round(::google::protobuf::int32 value) {
  set_has_max_round();
  max_round_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleReplay.max_round)
}

// optional int32 stage_id = 8;
inline bool BattleReplay::has_stage_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleReplay::set_has_stage_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleReplay::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleReplay::clear_stage_id() {
  stage_id_ = 0;
  clear_has_stage_id();
}
inline ::google::protobuf::int32 BattleReplay::stage_id() const {
  // @@protoc_insertion_point(field_get:pb.BattleReplay.stage_id)
  return stage_id_;
}
inline void BattleReplay::set_stage_id(::google::protobuf::int32 value) {
  set_has_stage_id();
  stage_id_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleReplay.stage_id)
}

// repeated .pb.BattleUserInfo userInfo = 9;
inline int BattleReplay::userinfo_size() const {
  return userinfo_.size();
}
inline void BattleReplay::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::pb::BattleUserInfo& BattleReplay::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleReplay.userInfo)
  return userinfo_.Get(index);
}
inline ::pb::BattleUserInfo* BattleReplay::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleReplay.userInfo)
  return userinfo_.Mutable(index);
}
inline ::pb::BattleUserInfo* BattleReplay::add_userinfo() {
  // @@protoc_insertion_point(field_add:pb.BattleReplay.userInfo)
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BattleUserInfo >&
BattleReplay::userinfo() const {
  // @@protoc_insertion_point(field_list:pb.BattleReplay.userInfo)
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BattleUserInfo >*
BattleReplay::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleReplay.userInfo)
  return &userinfo_;
}

// -------------------------------------------------------------------

// BattleReplayList

// repeated .pb.BattleReplay battle_replays = 1;
inline int BattleReplayList::battle_replays_size() const {
  return battle_replays_.size();
}
inline void BattleReplayList::clear_battle_replays() {
  battle_replays_.Clear();
}
inline const ::pb::BattleReplay& BattleReplayList::battle_replays(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleReplayList.battle_replays)
  return battle_replays_.Get(index);
}
inline ::pb::BattleReplay* BattleReplayList::mutable_battle_replays(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleReplayList.battle_replays)
  return battle_replays_.Mutable(index);
}
inline ::pb::BattleReplay* BattleReplayList::add_battle_replays() {
  // @@protoc_insertion_point(field_add:pb.BattleReplayList.battle_replays)
  return battle_replays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BattleReplay >&
BattleReplayList::battle_replays() const {
  // @@protoc_insertion_point(field_list:pb.BattleReplayList.battle_replays)
  return battle_replays_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BattleReplay >*
BattleReplayList::mutable_battle_replays() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleReplayList.battle_replays)
  return &battle_replays_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::XpRecoveryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::XpRecoveryType>() {
  return ::pb::XpRecoveryType_descriptor();
}
template <> struct is_proto_enum< ::pb::EffectType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EffectType>() {
  return ::pb::EffectType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BattleReplay_2eproto__INCLUDED
