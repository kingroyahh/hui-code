// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleStatistics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleStatistics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* StActorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StActorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StAreaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StAreaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StDoubleHitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StDoubleHitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleStatistics_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleStatistics_2eproto() {
  protobuf_AddDesc_BattleStatistics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleStatistics.proto");
  GOOGLE_CHECK(file != NULL);
  StActorInfo_descriptor_ = file->message_type(0);
  static const int StActorInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StActorInfo, actorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StActorInfo, hpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StActorInfo, hppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StActorInfo, xpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StActorInfo, deltahp_),
  };
  StActorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StActorInfo_descriptor_,
      StActorInfo::default_instance_,
      StActorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StActorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StActorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StActorInfo));
  StAreaInfo_descriptor_ = file->message_type(1);
  static const int StAreaInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StAreaInfo, areaindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StAreaInfo, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StAreaInfo, hppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StAreaInfo, actorinfo_),
  };
  StAreaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StAreaInfo_descriptor_,
      StAreaInfo::default_instance_,
      StAreaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StAreaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StAreaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StAreaInfo));
  StDoubleHitInfo_descriptor_ = file->message_type(2);
  static const int StDoubleHitInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StDoubleHitInfo, fair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StDoubleHitInfo, good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StDoubleHitInfo, fine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StDoubleHitInfo, excellent_),
  };
  StDoubleHitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StDoubleHitInfo_descriptor_,
      StDoubleHitInfo::default_instance_,
      StDoubleHitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StDoubleHitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StDoubleHitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StDoubleHitInfo));
  BattleStatistics_descriptor_ = file->message_type(3);
  static const int BattleStatistics_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStatistics, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStatistics, round_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStatistics, areainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStatistics, fail_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStatistics, doublehit_),
  };
  BattleStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleStatistics_descriptor_,
      BattleStatistics::default_instance_,
      BattleStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleStatistics));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleStatistics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StActorInfo_descriptor_, &StActorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StAreaInfo_descriptor_, &StAreaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StDoubleHitInfo_descriptor_, &StDoubleHitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleStatistics_descriptor_, &BattleStatistics::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleStatistics_2eproto() {
  delete StActorInfo::default_instance_;
  delete StActorInfo_reflection_;
  delete StAreaInfo::default_instance_;
  delete StAreaInfo_reflection_;
  delete StDoubleHitInfo::default_instance_;
  delete StDoubleHitInfo_reflection_;
  delete BattleStatistics::default_instance_;
  delete BattleStatistics_reflection_;
}

void protobuf_AddDesc_BattleStatistics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026BattleStatistics.proto\022\002pb\"`\n\013StActorI"
    "nfo\022\017\n\007actorId\030\001 \001(\005\022\r\n\005hpNum\030\002 \001(\005\022\021\n\th"
    "pPercent\030\003 \001(\002\022\r\n\005xpNum\030\004 \001(\005\022\017\n\007deltaHp"
    "\030\005 \001(\005\"f\n\nStAreaInfo\022\021\n\tareaIndex\030\001 \001(\005\022"
    "\016\n\006damage\030\002 \001(\005\022\021\n\thpPercent\030\003 \001(\002\022\"\n\tac"
    "torInfo\030\004 \003(\0132\017.pb.StActorInfo\"N\n\017StDoub"
    "leHitInfo\022\014\n\004fair\030\001 \001(\005\022\014\n\004good\030\002 \001(\005\022\014\n"
    "\004fine\030\003 \001(\005\022\021\n\texcellent\030\004 \001(\005\"\224\001\n\020Battl"
    "eStatistics\022\016\n\006winner\030\001 \001(\005\022\023\n\013round_cou"
    "nt\030\002 \001(\005\022 \n\010areaInfo\030\003 \003(\0132\016.pb.StAreaIn"
    "fo\022\021\n\tfail_code\030\004 \001(\005\022&\n\tdoubleHit\030\005 \001(\013"
    "2\023.pb.StDoubleHitInfo", 461);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleStatistics.proto", &protobuf_RegisterTypes);
  StActorInfo::default_instance_ = new StActorInfo();
  StAreaInfo::default_instance_ = new StAreaInfo();
  StDoubleHitInfo::default_instance_ = new StDoubleHitInfo();
  BattleStatistics::default_instance_ = new BattleStatistics();
  StActorInfo::default_instance_->InitAsDefaultInstance();
  StAreaInfo::default_instance_->InitAsDefaultInstance();
  StDoubleHitInfo::default_instance_->InitAsDefaultInstance();
  BattleStatistics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleStatistics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleStatistics_2eproto {
  StaticDescriptorInitializer_BattleStatistics_2eproto() {
    protobuf_AddDesc_BattleStatistics_2eproto();
  }
} static_descriptor_initializer_BattleStatistics_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StActorInfo::kActorIdFieldNumber;
const int StActorInfo::kHpNumFieldNumber;
const int StActorInfo::kHpPercentFieldNumber;
const int StActorInfo::kXpNumFieldNumber;
const int StActorInfo::kDeltaHpFieldNumber;
#endif  // !_MSC_VER

StActorInfo::StActorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.StActorInfo)
}

void StActorInfo::InitAsDefaultInstance() {
}

StActorInfo::StActorInfo(const StActorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.StActorInfo)
}

void StActorInfo::SharedCtor() {
  _cached_size_ = 0;
  actorid_ = 0;
  hpnum_ = 0;
  hppercent_ = 0;
  xpnum_ = 0;
  deltahp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StActorInfo::~StActorInfo() {
  // @@protoc_insertion_point(destructor:pb.StActorInfo)
  SharedDtor();
}

void StActorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StActorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StActorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StActorInfo_descriptor_;
}

const StActorInfo& StActorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleStatistics_2eproto();
  return *default_instance_;
}

StActorInfo* StActorInfo::default_instance_ = NULL;

StActorInfo* StActorInfo::New() const {
  return new StActorInfo;
}

void StActorInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StActorInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(actorid_, deltahp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StActorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.StActorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actorId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actorid_)));
          set_has_actorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hpNum;
        break;
      }

      // optional int32 hpNum = 2;
      case 2: {
        if (tag == 16) {
         parse_hpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpnum_)));
          set_has_hpnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_hpPercent;
        break;
      }

      // optional float hpPercent = 3;
      case 3: {
        if (tag == 29) {
         parse_hpPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hppercent_)));
          set_has_hppercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_xpNum;
        break;
      }

      // optional int32 xpNum = 4;
      case 4: {
        if (tag == 32) {
         parse_xpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpnum_)));
          set_has_xpnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deltaHp;
        break;
      }

      // optional int32 deltaHp = 5;
      case 5: {
        if (tag == 40) {
         parse_deltaHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deltahp_)));
          set_has_deltahp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.StActorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.StActorInfo)
  return false;
#undef DO_
}

void StActorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.StActorInfo)
  // optional int32 actorId = 1;
  if (has_actorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actorid(), output);
  }

  // optional int32 hpNum = 2;
  if (has_hpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hpnum(), output);
  }

  // optional float hpPercent = 3;
  if (has_hppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->hppercent(), output);
  }

  // optional int32 xpNum = 4;
  if (has_xpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->xpnum(), output);
  }

  // optional int32 deltaHp = 5;
  if (has_deltahp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deltahp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.StActorInfo)
}

::google::protobuf::uint8* StActorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StActorInfo)
  // optional int32 actorId = 1;
  if (has_actorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actorid(), target);
  }

  // optional int32 hpNum = 2;
  if (has_hpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hpnum(), target);
  }

  // optional float hpPercent = 3;
  if (has_hppercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->hppercent(), target);
  }

  // optional int32 xpNum = 4;
  if (has_xpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->xpnum(), target);
  }

  // optional int32 deltaHp = 5;
  if (has_deltahp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->deltahp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StActorInfo)
  return target;
}

int StActorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 actorId = 1;
    if (has_actorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actorid());
    }

    // optional int32 hpNum = 2;
    if (has_hpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpnum());
    }

    // optional float hpPercent = 3;
    if (has_hppercent()) {
      total_size += 1 + 4;
    }

    // optional int32 xpNum = 4;
    if (has_xpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpnum());
    }

    // optional int32 deltaHp = 5;
    if (has_deltahp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deltahp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StActorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StActorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StActorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StActorInfo::MergeFrom(const StActorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actorid()) {
      set_actorid(from.actorid());
    }
    if (from.has_hpnum()) {
      set_hpnum(from.hpnum());
    }
    if (from.has_hppercent()) {
      set_hppercent(from.hppercent());
    }
    if (from.has_xpnum()) {
      set_xpnum(from.xpnum());
    }
    if (from.has_deltahp()) {
      set_deltahp(from.deltahp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StActorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StActorInfo::CopyFrom(const StActorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StActorInfo::IsInitialized() const {

  return true;
}

void StActorInfo::Swap(StActorInfo* other) {
  if (other != this) {
    std::swap(actorid_, other->actorid_);
    std::swap(hpnum_, other->hpnum_);
    std::swap(hppercent_, other->hppercent_);
    std::swap(xpnum_, other->xpnum_);
    std::swap(deltahp_, other->deltahp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StActorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StActorInfo_descriptor_;
  metadata.reflection = StActorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StAreaInfo::kAreaIndexFieldNumber;
const int StAreaInfo::kDamageFieldNumber;
const int StAreaInfo::kHpPercentFieldNumber;
const int StAreaInfo::kActorInfoFieldNumber;
#endif  // !_MSC_VER

StAreaInfo::StAreaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.StAreaInfo)
}

void StAreaInfo::InitAsDefaultInstance() {
}

StAreaInfo::StAreaInfo(const StAreaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.StAreaInfo)
}

void StAreaInfo::SharedCtor() {
  _cached_size_ = 0;
  areaindex_ = 0;
  damage_ = 0;
  hppercent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StAreaInfo::~StAreaInfo() {
  // @@protoc_insertion_point(destructor:pb.StAreaInfo)
  SharedDtor();
}

void StAreaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StAreaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StAreaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StAreaInfo_descriptor_;
}

const StAreaInfo& StAreaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleStatistics_2eproto();
  return *default_instance_;
}

StAreaInfo* StAreaInfo::default_instance_ = NULL;

StAreaInfo* StAreaInfo::New() const {
  return new StAreaInfo;
}

void StAreaInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StAreaInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(areaindex_, damage_);
    hppercent_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  actorinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StAreaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.StAreaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 areaIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaindex_)));
          set_has_areaindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional int32 damage = 2;
      case 2: {
        if (tag == 16) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_hpPercent;
        break;
      }

      // optional float hpPercent = 3;
      case 3: {
        if (tag == 29) {
         parse_hpPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hppercent_)));
          set_has_hppercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_actorInfo;
        break;
      }

      // repeated .pb.StActorInfo actorInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_actorInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actorinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_actorInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.StAreaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.StAreaInfo)
  return false;
#undef DO_
}

void StAreaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.StAreaInfo)
  // optional int32 areaIndex = 1;
  if (has_areaindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaindex(), output);
  }

  // optional int32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }

  // optional float hpPercent = 3;
  if (has_hppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->hppercent(), output);
  }

  // repeated .pb.StActorInfo actorInfo = 4;
  for (int i = 0; i < this->actorinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->actorinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.StAreaInfo)
}

::google::protobuf::uint8* StAreaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StAreaInfo)
  // optional int32 areaIndex = 1;
  if (has_areaindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaindex(), target);
  }

  // optional int32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage(), target);
  }

  // optional float hpPercent = 3;
  if (has_hppercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->hppercent(), target);
  }

  // repeated .pb.StActorInfo actorInfo = 4;
  for (int i = 0; i < this->actorinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->actorinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StAreaInfo)
  return target;
}

int StAreaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 areaIndex = 1;
    if (has_areaindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaindex());
    }

    // optional int32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional float hpPercent = 3;
    if (has_hppercent()) {
      total_size += 1 + 4;
    }

  }
  // repeated .pb.StActorInfo actorInfo = 4;
  total_size += 1 * this->actorinfo_size();
  for (int i = 0; i < this->actorinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actorinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StAreaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StAreaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StAreaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StAreaInfo::MergeFrom(const StAreaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  actorinfo_.MergeFrom(from.actorinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaindex()) {
      set_areaindex(from.areaindex());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_hppercent()) {
      set_hppercent(from.hppercent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StAreaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StAreaInfo::CopyFrom(const StAreaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StAreaInfo::IsInitialized() const {

  return true;
}

void StAreaInfo::Swap(StAreaInfo* other) {
  if (other != this) {
    std::swap(areaindex_, other->areaindex_);
    std::swap(damage_, other->damage_);
    std::swap(hppercent_, other->hppercent_);
    actorinfo_.Swap(&other->actorinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StAreaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StAreaInfo_descriptor_;
  metadata.reflection = StAreaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StDoubleHitInfo::kFairFieldNumber;
const int StDoubleHitInfo::kGoodFieldNumber;
const int StDoubleHitInfo::kFineFieldNumber;
const int StDoubleHitInfo::kExcellentFieldNumber;
#endif  // !_MSC_VER

StDoubleHitInfo::StDoubleHitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.StDoubleHitInfo)
}

void StDoubleHitInfo::InitAsDefaultInstance() {
}

StDoubleHitInfo::StDoubleHitInfo(const StDoubleHitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.StDoubleHitInfo)
}

void StDoubleHitInfo::SharedCtor() {
  _cached_size_ = 0;
  fair_ = 0;
  good_ = 0;
  fine_ = 0;
  excellent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StDoubleHitInfo::~StDoubleHitInfo() {
  // @@protoc_insertion_point(destructor:pb.StDoubleHitInfo)
  SharedDtor();
}

void StDoubleHitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StDoubleHitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StDoubleHitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StDoubleHitInfo_descriptor_;
}

const StDoubleHitInfo& StDoubleHitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleStatistics_2eproto();
  return *default_instance_;
}

StDoubleHitInfo* StDoubleHitInfo::default_instance_ = NULL;

StDoubleHitInfo* StDoubleHitInfo::New() const {
  return new StDoubleHitInfo;
}

void StDoubleHitInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StDoubleHitInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fair_, excellent_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StDoubleHitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.StDoubleHitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fair = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fair_)));
          set_has_fair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_good;
        break;
      }

      // optional int32 good = 2;
      case 2: {
        if (tag == 16) {
         parse_good:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &good_)));
          set_has_good();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fine;
        break;
      }

      // optional int32 fine = 3;
      case 3: {
        if (tag == 24) {
         parse_fine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fine_)));
          set_has_fine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_excellent;
        break;
      }

      // optional int32 excellent = 4;
      case 4: {
        if (tag == 32) {
         parse_excellent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &excellent_)));
          set_has_excellent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.StDoubleHitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.StDoubleHitInfo)
  return false;
#undef DO_
}

void StDoubleHitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.StDoubleHitInfo)
  // optional int32 fair = 1;
  if (has_fair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fair(), output);
  }

  // optional int32 good = 2;
  if (has_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->good(), output);
  }

  // optional int32 fine = 3;
  if (has_fine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fine(), output);
  }

  // optional int32 excellent = 4;
  if (has_excellent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->excellent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.StDoubleHitInfo)
}

::google::protobuf::uint8* StDoubleHitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StDoubleHitInfo)
  // optional int32 fair = 1;
  if (has_fair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fair(), target);
  }

  // optional int32 good = 2;
  if (has_good()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->good(), target);
  }

  // optional int32 fine = 3;
  if (has_fine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fine(), target);
  }

  // optional int32 excellent = 4;
  if (has_excellent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->excellent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StDoubleHitInfo)
  return target;
}

int StDoubleHitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fair = 1;
    if (has_fair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fair());
    }

    // optional int32 good = 2;
    if (has_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->good());
    }

    // optional int32 fine = 3;
    if (has_fine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fine());
    }

    // optional int32 excellent = 4;
    if (has_excellent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->excellent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StDoubleHitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StDoubleHitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StDoubleHitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StDoubleHitInfo::MergeFrom(const StDoubleHitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fair()) {
      set_fair(from.fair());
    }
    if (from.has_good()) {
      set_good(from.good());
    }
    if (from.has_fine()) {
      set_fine(from.fine());
    }
    if (from.has_excellent()) {
      set_excellent(from.excellent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StDoubleHitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StDoubleHitInfo::CopyFrom(const StDoubleHitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StDoubleHitInfo::IsInitialized() const {

  return true;
}

void StDoubleHitInfo::Swap(StDoubleHitInfo* other) {
  if (other != this) {
    std::swap(fair_, other->fair_);
    std::swap(good_, other->good_);
    std::swap(fine_, other->fine_);
    std::swap(excellent_, other->excellent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StDoubleHitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StDoubleHitInfo_descriptor_;
  metadata.reflection = StDoubleHitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleStatistics::kWinnerFieldNumber;
const int BattleStatistics::kRoundCountFieldNumber;
const int BattleStatistics::kAreaInfoFieldNumber;
const int BattleStatistics::kFailCodeFieldNumber;
const int BattleStatistics::kDoubleHitFieldNumber;
#endif  // !_MSC_VER

BattleStatistics::BattleStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BattleStatistics)
}

void BattleStatistics::InitAsDefaultInstance() {
  doublehit_ = const_cast< ::pb::StDoubleHitInfo*>(&::pb::StDoubleHitInfo::default_instance());
}

BattleStatistics::BattleStatistics(const BattleStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BattleStatistics)
}

void BattleStatistics::SharedCtor() {
  _cached_size_ = 0;
  winner_ = 0;
  round_count_ = 0;
  fail_code_ = 0;
  doublehit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleStatistics::~BattleStatistics() {
  // @@protoc_insertion_point(destructor:pb.BattleStatistics)
  SharedDtor();
}

void BattleStatistics::SharedDtor() {
  if (this != default_instance_) {
    delete doublehit_;
  }
}

void BattleStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleStatistics_descriptor_;
}

const BattleStatistics& BattleStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleStatistics_2eproto();
  return *default_instance_;
}

BattleStatistics* BattleStatistics::default_instance_ = NULL;

BattleStatistics* BattleStatistics::New() const {
  return new BattleStatistics;
}

void BattleStatistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleStatistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(winner_, round_count_);
    fail_code_ = 0;
    if (has_doublehit()) {
      if (doublehit_ != NULL) doublehit_->::pb::StDoubleHitInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  areainfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BattleStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 winner = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_round_count;
        break;
      }

      // optional int32 round_count = 2;
      case 2: {
        if (tag == 16) {
         parse_round_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_count_)));
          set_has_round_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_areaInfo;
        break;
      }

      // repeated .pb.StAreaInfo areaInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_areaInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areainfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_areaInfo;
        if (input->ExpectTag(32)) goto parse_fail_code;
        break;
      }

      // optional int32 fail_code = 4;
      case 4: {
        if (tag == 32) {
         parse_fail_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_code_)));
          set_has_fail_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_doubleHit;
        break;
      }

      // optional .pb.StDoubleHitInfo doubleHit = 5;
      case 5: {
        if (tag == 42) {
         parse_doubleHit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doublehit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BattleStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BattleStatistics)
  return false;
#undef DO_
}

void BattleStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BattleStatistics)
  // optional int32 winner = 1;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winner(), output);
  }

  // optional int32 round_count = 2;
  if (has_round_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->round_count(), output);
  }

  // repeated .pb.StAreaInfo areaInfo = 3;
  for (int i = 0; i < this->areainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->areainfo(i), output);
  }

  // optional int32 fail_code = 4;
  if (has_fail_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fail_code(), output);
  }

  // optional .pb.StDoubleHitInfo doubleHit = 5;
  if (has_doublehit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->doublehit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BattleStatistics)
}

::google::protobuf::uint8* BattleStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BattleStatistics)
  // optional int32 winner = 1;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winner(), target);
  }

  // optional int32 round_count = 2;
  if (has_round_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->round_count(), target);
  }

  // repeated .pb.StAreaInfo areaInfo = 3;
  for (int i = 0; i < this->areainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->areainfo(i), target);
  }

  // optional int32 fail_code = 4;
  if (has_fail_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fail_code(), target);
  }

  // optional .pb.StDoubleHitInfo doubleHit = 5;
  if (has_doublehit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->doublehit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BattleStatistics)
  return target;
}

int BattleStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 winner = 1;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner());
    }

    // optional int32 round_count = 2;
    if (has_round_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_count());
    }

    // optional int32 fail_code = 4;
    if (has_fail_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail_code());
    }

    // optional .pb.StDoubleHitInfo doubleHit = 5;
    if (has_doublehit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doublehit());
    }

  }
  // repeated .pb.StAreaInfo areaInfo = 3;
  total_size += 1 * this->areainfo_size();
  for (int i = 0; i < this->areainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areainfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleStatistics::MergeFrom(const BattleStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  areainfo_.MergeFrom(from.areainfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner()) {
      set_winner(from.winner());
    }
    if (from.has_round_count()) {
      set_round_count(from.round_count());
    }
    if (from.has_fail_code()) {
      set_fail_code(from.fail_code());
    }
    if (from.has_doublehit()) {
      mutable_doublehit()->::pb::StDoubleHitInfo::MergeFrom(from.doublehit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleStatistics::CopyFrom(const BattleStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleStatistics::IsInitialized() const {

  return true;
}

void BattleStatistics::Swap(BattleStatistics* other) {
  if (other != this) {
    std::swap(winner_, other->winner_);
    std::swap(round_count_, other->round_count_);
    areainfo_.Swap(&other->areainfo_);
    std::swap(fail_code_, other->fail_code_);
    std::swap(doublehit_, other->doublehit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleStatistics_descriptor_;
  metadata.reflection = BattleStatistics_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
