// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleParams.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleParams.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* InitSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitActorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitActorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitBattleAreaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitBattleAreaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleParams_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleParams_2eproto() {
  protobuf_AddDesc_BattleParams_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleParams.proto");
  GOOGLE_CHECK(file != NULL);
  InitSkillInfo_descriptor_ = file->message_type(0);
  static const int InitSkillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSkillInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSkillInfo, skill_lv_),
  };
  InitSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitSkillInfo_descriptor_,
      InitSkillInfo::default_instance_,
      InitSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitSkillInfo));
  AttrInfo_descriptor_ = file->message_type(1);
  static const int AttrInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrInfo, attr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrInfo, attr_value_),
  };
  AttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrInfo_descriptor_,
      AttrInfo::default_instance_,
      AttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrInfo));
  BuffInfo_descriptor_ = file->message_type(2);
  static const int BuffInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, buff_lv_),
  };
  BuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffInfo_descriptor_,
      BuffInfo::default_instance_,
      BuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffInfo));
  BattleUserInfo_descriptor_ = file->message_type(3);
  static const int BattleUserInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUserInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUserInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUserInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUserInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUserInfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUserInfo, headframe_),
  };
  BattleUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleUserInfo_descriptor_,
      BattleUserInfo::default_instance_,
      BattleUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleUserInfo));
  InitActorInfo_descriptor_ = file->message_type(4);
  static const int InitActorInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, meta_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, area_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, pos_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, default_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, legend_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, xp_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, combine_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, attr_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, buff_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, activeround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, awake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, halo_),
  };
  InitActorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitActorInfo_descriptor_,
      InitActorInfo::default_instance_,
      InitActorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitActorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitActorInfo));
  InitBattleAreaInfo_descriptor_ = file->message_type(5);
  static const int InitBattleAreaInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitBattleAreaInfo, actor_infos_),
  };
  InitBattleAreaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitBattleAreaInfo_descriptor_,
      InitBattleAreaInfo::default_instance_,
      InitBattleAreaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitBattleAreaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitBattleAreaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitBattleAreaInfo));
  BattleParams_descriptor_ = file->message_type(6);
  static const int BattleParams_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, max_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, first_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, own_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, opp_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, randomseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, userinfo_),
  };
  BattleParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleParams_descriptor_,
      BattleParams::default_instance_,
      BattleParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleParams));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleParams_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitSkillInfo_descriptor_, &InitSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrInfo_descriptor_, &AttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffInfo_descriptor_, &BuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleUserInfo_descriptor_, &BattleUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitActorInfo_descriptor_, &InitActorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitBattleAreaInfo_descriptor_, &InitBattleAreaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleParams_descriptor_, &BattleParams::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleParams_2eproto() {
  delete InitSkillInfo::default_instance_;
  delete InitSkillInfo_reflection_;
  delete AttrInfo::default_instance_;
  delete AttrInfo_reflection_;
  delete BuffInfo::default_instance_;
  delete BuffInfo_reflection_;
  delete BattleUserInfo::default_instance_;
  delete BattleUserInfo_reflection_;
  delete InitActorInfo::default_instance_;
  delete InitActorInfo_reflection_;
  delete InitBattleAreaInfo::default_instance_;
  delete InitBattleAreaInfo_reflection_;
  delete BattleParams::default_instance_;
  delete BattleParams_reflection_;
}

void protobuf_AddDesc_BattleParams_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_BattleCommand_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022BattleParams.proto\022\002pb\032\023BattleCommand."
    "proto\"3\n\rInitSkillInfo\022\020\n\010skill_id\030\001 \001(\005"
    "\022\020\n\010skill_lv\030\002 \001(\005\"/\n\010AttrInfo\022\017\n\007attr_i"
    "d\030\001 \001(\005\022\022\n\nattr_value\030\002 \001(\002\",\n\010BuffInfo\022"
    "\017\n\007buff_id\030\001 \001(\005\022\017\n\007buff_lv\030\002 \001(\005\"\204\001\n\016Ba"
    "ttleUserInfo\022\017\n\007guildId\030\001 \001(\004\022\021\n\tguildNa"
    "me\030\002 \001(\t\022\020\n\010vipLevel\030\003 \001(\005\022\r\n\005power\030\004 \001("
    "\005\022\014\n\004name\030\005 \001(\t\022\014\n\004head\030\006 \001(\005\022\021\n\theadFra"
    "me\030\007 \001(\005\"\311\003\n\rInitActorInfo\022\017\n\007hero_id\030\001 "
    "\001(\005\022\017\n\007meta_id\030\002 \001(\005\022\022\n\narea_index\030\003 \001(\005"
    "\022\021\n\tpos_index\030\004 \001(\005\022(\n\rdefault_skill\030\005 \001"
    "(\0132\021.pb.InitSkillInfo\022\'\n\014legend_skill\030\006 "
    "\001(\0132\021.pb.InitSkillInfo\022#\n\010xp_skill\030\007 \001(\013"
    "2\021.pb.InitSkillInfo\022(\n\rcombine_skill\030\010 \001"
    "(\0132\021.pb.InitSkillInfo\022 \n\nattr_infos\030\t \003("
    "\0132\014.pb.AttrInfo\022 \n\nbuff_infos\030\n \003(\0132\014.pb"
    ".BuffInfo\022\014\n\004name\030\013 \001(\t\022\n\n\002hp\030\014 \001(\005\022\n\n\002x"
    "p\030\r \001(\005\022\023\n\013activeRound\030\016 \001(\005\022\021\n\tfashionI"
    "d\030\017 \001(\005\022\r\n\005level\030\020 \001(\005\022\r\n\005awake\030\021 \001(\005\022\017\n"
    "\007advance\030\022 \001(\005\022\014\n\004halo\030\023 \001(\005\"<\n\022InitBatt"
    "leAreaInfo\022&\n\013actor_infos\030\001 \003(\0132\021.pb.Ini"
    "tActorInfo\"\300\002\n\014BattleParams\022\021\n\tmax_round"
    "\030\001 \001(\005\022\024\n\014first_attack\030\002 \001(\005\022\023\n\013battle_t"
    "ype\030\003 \001(\005\022(\n\010own_area\030\004 \001(\0132\026.pb.InitBat"
    "tleAreaInfo\022(\n\010opp_area\030\005 \003(\0132\026.pb.InitB"
    "attleAreaInfo\022!\n\010Commands\030\006 \003(\0132\017.pb.Use"
    "rCommand\022\r\n\005power\030\007 \003(\005\022\014\n\004name\030\010 \003(\t\022\022\n"
    "\ntemplateId\030\t \003(\005\022\022\n\nrandomSeed\030\n \001(\005\022\020\n"
    "\010stage_id\030\013 \001(\005\022$\n\010userInfo\030\014 \003(\0132\022.pb.B"
    "attleUserInfo", 1173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleParams.proto", &protobuf_RegisterTypes);
  InitSkillInfo::default_instance_ = new InitSkillInfo();
  AttrInfo::default_instance_ = new AttrInfo();
  BuffInfo::default_instance_ = new BuffInfo();
  BattleUserInfo::default_instance_ = new BattleUserInfo();
  InitActorInfo::default_instance_ = new InitActorInfo();
  InitBattleAreaInfo::default_instance_ = new InitBattleAreaInfo();
  BattleParams::default_instance_ = new BattleParams();
  InitSkillInfo::default_instance_->InitAsDefaultInstance();
  AttrInfo::default_instance_->InitAsDefaultInstance();
  BuffInfo::default_instance_->InitAsDefaultInstance();
  BattleUserInfo::default_instance_->InitAsDefaultInstance();
  InitActorInfo::default_instance_->InitAsDefaultInstance();
  InitBattleAreaInfo::default_instance_->InitAsDefaultInstance();
  BattleParams::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleParams_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleParams_2eproto {
  StaticDescriptorInitializer_BattleParams_2eproto() {
    protobuf_AddDesc_BattleParams_2eproto();
  }
} static_descriptor_initializer_BattleParams_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int InitSkillInfo::kSkillIdFieldNumber;
const int InitSkillInfo::kSkillLvFieldNumber;
#endif  // !_MSC_VER

InitSkillInfo::InitSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InitSkillInfo)
}

void InitSkillInfo::InitAsDefaultInstance() {
}

InitSkillInfo::InitSkillInfo(const InitSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.InitSkillInfo)
}

void InitSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitSkillInfo::~InitSkillInfo() {
  // @@protoc_insertion_point(destructor:pb.InitSkillInfo)
  SharedDtor();
}

void InitSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitSkillInfo_descriptor_;
}

const InitSkillInfo& InitSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleParams_2eproto();
  return *default_instance_;
}

InitSkillInfo* InitSkillInfo::default_instance_ = NULL;

InitSkillInfo* InitSkillInfo::New() const {
  return new InitSkillInfo;
}

void InitSkillInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InitSkillInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skill_id_, skill_lv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InitSkillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skill_lv;
        break;
      }

      // optional int32 skill_lv = 2;
      case 2: {
        if (tag == 16) {
         parse_skill_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_lv_)));
          set_has_skill_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InitSkillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InitSkillInfo)
  return false;
#undef DO_
}

void InitSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InitSkillInfo)
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // optional int32 skill_lv = 2;
  if (has_skill_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.InitSkillInfo)
}

::google::protobuf::uint8* InitSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InitSkillInfo)
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // optional int32 skill_lv = 2;
  if (has_skill_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InitSkillInfo)
  return target;
}

int InitSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_lv = 2;
    if (has_skill_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitSkillInfo::MergeFrom(const InitSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_lv()) {
      set_skill_lv(from.skill_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitSkillInfo::CopyFrom(const InitSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSkillInfo::IsInitialized() const {

  return true;
}

void InitSkillInfo::Swap(InitSkillInfo* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_lv_, other->skill_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitSkillInfo_descriptor_;
  metadata.reflection = InitSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttrInfo::kAttrIdFieldNumber;
const int AttrInfo::kAttrValueFieldNumber;
#endif  // !_MSC_VER

AttrInfo::AttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AttrInfo)
}

void AttrInfo::InitAsDefaultInstance() {
}

AttrInfo::AttrInfo(const AttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AttrInfo)
}

void AttrInfo::SharedCtor() {
  _cached_size_ = 0;
  attr_id_ = 0;
  attr_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrInfo::~AttrInfo() {
  // @@protoc_insertion_point(destructor:pb.AttrInfo)
  SharedDtor();
}

void AttrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrInfo_descriptor_;
}

const AttrInfo& AttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleParams_2eproto();
  return *default_instance_;
}

AttrInfo* AttrInfo::default_instance_ = NULL;

AttrInfo* AttrInfo::New() const {
  return new AttrInfo;
}

void AttrInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AttrInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attr_id_, attr_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AttrInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attr_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_id_)));
          set_has_attr_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_attr_value;
        break;
      }

      // optional float attr_value = 2;
      case 2: {
        if (tag == 21) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attr_value_)));
          set_has_attr_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AttrInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AttrInfo)
  return false;
#undef DO_
}

void AttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AttrInfo)
  // optional int32 attr_id = 1;
  if (has_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attr_id(), output);
  }

  // optional float attr_value = 2;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->attr_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AttrInfo)
}

::google::protobuf::uint8* AttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AttrInfo)
  // optional int32 attr_id = 1;
  if (has_attr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attr_id(), target);
  }

  // optional float attr_value = 2;
  if (has_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->attr_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AttrInfo)
  return target;
}

int AttrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attr_id = 1;
    if (has_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_id());
    }

    // optional float attr_value = 2;
    if (has_attr_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrInfo::MergeFrom(const AttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_id()) {
      set_attr_id(from.attr_id());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrInfo::CopyFrom(const AttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrInfo::IsInitialized() const {

  return true;
}

void AttrInfo::Swap(AttrInfo* other) {
  if (other != this) {
    std::swap(attr_id_, other->attr_id_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrInfo_descriptor_;
  metadata.reflection = AttrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffInfo::kBuffIdFieldNumber;
const int BuffInfo::kBuffLvFieldNumber;
#endif  // !_MSC_VER

BuffInfo::BuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffInfo)
}

void BuffInfo::InitAsDefaultInstance() {
}

BuffInfo::BuffInfo(const BuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffInfo)
}

void BuffInfo::SharedCtor() {
  _cached_size_ = 0;
  buff_id_ = 0;
  buff_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffInfo::~BuffInfo() {
  // @@protoc_insertion_point(destructor:pb.BuffInfo)
  SharedDtor();
}

void BuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffInfo_descriptor_;
}

const BuffInfo& BuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleParams_2eproto();
  return *default_instance_;
}

BuffInfo* BuffInfo::default_instance_ = NULL;

BuffInfo* BuffInfo::New() const {
  return new BuffInfo;
}

void BuffInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buff_id_, buff_lv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buff_lv;
        break;
      }

      // optional int32 buff_lv = 2;
      case 2: {
        if (tag == 16) {
         parse_buff_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_lv_)));
          set_has_buff_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffInfo)
  return false;
#undef DO_
}

void BuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffInfo)
  // optional int32 buff_id = 1;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_id(), output);
  }

  // optional int32 buff_lv = 2;
  if (has_buff_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buff_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffInfo)
}

::google::protobuf::uint8* BuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffInfo)
  // optional int32 buff_id = 1;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_id(), target);
  }

  // optional int32 buff_lv = 2;
  if (has_buff_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buff_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffInfo)
  return target;
}

int BuffInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buff_id = 1;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_id());
    }

    // optional int32 buff_lv = 2;
    if (has_buff_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffInfo::MergeFrom(const BuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_buff_lv()) {
      set_buff_lv(from.buff_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffInfo::CopyFrom(const BuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffInfo::IsInitialized() const {

  return true;
}

void BuffInfo::Swap(BuffInfo* other) {
  if (other != this) {
    std::swap(buff_id_, other->buff_id_);
    std::swap(buff_lv_, other->buff_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffInfo_descriptor_;
  metadata.reflection = BuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleUserInfo::kGuildIdFieldNumber;
const int BattleUserInfo::kGuildNameFieldNumber;
const int BattleUserInfo::kVipLevelFieldNumber;
const int BattleUserInfo::kPowerFieldNumber;
const int BattleUserInfo::kNameFieldNumber;
const int BattleUserInfo::kHeadFieldNumber;
const int BattleUserInfo::kHeadFrameFieldNumber;
#endif  // !_MSC_VER

BattleUserInfo::BattleUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BattleUserInfo)
}

void BattleUserInfo::InitAsDefaultInstance() {
}

BattleUserInfo::BattleUserInfo(const BattleUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BattleUserInfo)
}

void BattleUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viplevel_ = 0;
  power_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = 0;
  headframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleUserInfo::~BattleUserInfo() {
  // @@protoc_insertion_point(destructor:pb.BattleUserInfo)
  SharedDtor();
}

void BattleUserInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BattleUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleUserInfo_descriptor_;
}

const BattleUserInfo& BattleUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleParams_2eproto();
  return *default_instance_;
}

BattleUserInfo* BattleUserInfo::default_instance_ = NULL;

BattleUserInfo* BattleUserInfo::New() const {
  return new BattleUserInfo;
}

void BattleUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(viplevel_, power_);
    ZR_(head_, headframe_);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BattleUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guildName;
        break;
      }

      // optional string guildName = 2;
      case 2: {
        if (tag == 18) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_power;
        break;
      }

      // optional int32 power = 4;
      case 4: {
        if (tag == 32) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_head;
        break;
      }

      // optional int32 head = 6;
      case 6: {
        if (tag == 48) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_headFrame;
        break;
      }

      // optional int32 headFrame = 7;
      case 7: {
        if (tag == 56) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BattleUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BattleUserInfo)
  return false;
#undef DO_
}

void BattleUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BattleUserInfo)
  // optional uint64 guildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string guildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guildname(), output);
  }

  // optional int32 vipLevel = 3;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viplevel(), output);
  }

  // optional int32 power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->power(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional int32 head = 6;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->head(), output);
  }

  // optional int32 headFrame = 7;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->headframe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BattleUserInfo)
}

::google::protobuf::uint8* BattleUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BattleUserInfo)
  // optional uint64 guildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string guildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional int32 vipLevel = 3;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viplevel(), target);
  }

  // optional int32 power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->power(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 head = 6;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->head(), target);
  }

  // optional int32 headFrame = 7;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->headframe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BattleUserInfo)
  return target;
}

int BattleUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional int32 vipLevel = 3;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 head = 6;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional int32 headFrame = 7;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleUserInfo::MergeFrom(const BattleUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleUserInfo::CopyFrom(const BattleUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleUserInfo::IsInitialized() const {

  return true;
}

void BattleUserInfo::Swap(BattleUserInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(power_, other->power_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(headframe_, other->headframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleUserInfo_descriptor_;
  metadata.reflection = BattleUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitActorInfo::kHeroIdFieldNumber;
const int InitActorInfo::kMetaIdFieldNumber;
const int InitActorInfo::kAreaIndexFieldNumber;
const int InitActorInfo::kPosIndexFieldNumber;
const int InitActorInfo::kDefaultSkillFieldNumber;
const int InitActorInfo::kLegendSkillFieldNumber;
const int InitActorInfo::kXpSkillFieldNumber;
const int InitActorInfo::kCombineSkillFieldNumber;
const int InitActorInfo::kAttrInfosFieldNumber;
const int InitActorInfo::kBuffInfosFieldNumber;
const int InitActorInfo::kNameFieldNumber;
const int InitActorInfo::kHpFieldNumber;
const int InitActorInfo::kXpFieldNumber;
const int InitActorInfo::kActiveRoundFieldNumber;
const int InitActorInfo::kFashionIdFieldNumber;
const int InitActorInfo::kLevelFieldNumber;
const int InitActorInfo::kAwakeFieldNumber;
const int InitActorInfo::kAdvanceFieldNumber;
const int InitActorInfo::kHaloFieldNumber;
#endif  // !_MSC_VER

InitActorInfo::InitActorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InitActorInfo)
}

void InitActorInfo::InitAsDefaultInstance() {
  default_skill_ = const_cast< ::pb::InitSkillInfo*>(&::pb::InitSkillInfo::default_instance());
  legend_skill_ = const_cast< ::pb::InitSkillInfo*>(&::pb::InitSkillInfo::default_instance());
  xp_skill_ = const_cast< ::pb::InitSkillInfo*>(&::pb::InitSkillInfo::default_instance());
  combine_skill_ = const_cast< ::pb::InitSkillInfo*>(&::pb::InitSkillInfo::default_instance());
}

InitActorInfo::InitActorInfo(const InitActorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.InitActorInfo)
}

void InitActorInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hero_id_ = 0;
  meta_id_ = 0;
  area_index_ = 0;
  pos_index_ = 0;
  default_skill_ = NULL;
  legend_skill_ = NULL;
  xp_skill_ = NULL;
  combine_skill_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hp_ = 0;
  xp_ = 0;
  activeround_ = 0;
  fashionid_ = 0;
  level_ = 0;
  awake_ = 0;
  advance_ = 0;
  halo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitActorInfo::~InitActorInfo() {
  // @@protoc_insertion_point(destructor:pb.InitActorInfo)
  SharedDtor();
}

void InitActorInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete default_skill_;
    delete legend_skill_;
    delete xp_skill_;
    delete combine_skill_;
  }
}

void InitActorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitActorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitActorInfo_descriptor_;
}

const InitActorInfo& InitActorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleParams_2eproto();
  return *default_instance_;
}

InitActorInfo* InitActorInfo::default_instance_ = NULL;

InitActorInfo* InitActorInfo::New() const {
  return new InitActorInfo;
}

void InitActorInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InitActorInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hero_id_, pos_index_);
    if (has_default_skill()) {
      if (default_skill_ != NULL) default_skill_->::pb::InitSkillInfo::Clear();
    }
    if (has_legend_skill()) {
      if (legend_skill_ != NULL) legend_skill_->::pb::InitSkillInfo::Clear();
    }
    if (has_xp_skill()) {
      if (xp_skill_ != NULL) xp_skill_->::pb::InitSkillInfo::Clear();
    }
    if (has_combine_skill()) {
      if (combine_skill_ != NULL) combine_skill_->::pb::InitSkillInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 64512) {
    ZR_(hp_, level_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ZR_(awake_, halo_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attr_infos_.Clear();
  buff_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitActorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InitActorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_meta_id;
        break;
      }

      // optional int32 meta_id = 2;
      case 2: {
        if (tag == 16) {
         parse_meta_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meta_id_)));
          set_has_meta_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_area_index;
        break;
      }

      // optional int32 area_index = 3;
      case 3: {
        if (tag == 24) {
         parse_area_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_index_)));
          set_has_area_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_index;
        break;
      }

      // optional int32 pos_index = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_index_)));
          set_has_pos_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_default_skill;
        break;
      }

      // optional .pb.InitSkillInfo default_skill = 5;
      case 5: {
        if (tag == 42) {
         parse_default_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_legend_skill;
        break;
      }

      // optional .pb.InitSkillInfo legend_skill = 6;
      case 6: {
        if (tag == 50) {
         parse_legend_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legend_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_xp_skill;
        break;
      }

      // optional .pb.InitSkillInfo xp_skill = 7;
      case 7: {
        if (tag == 58) {
         parse_xp_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xp_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_combine_skill;
        break;
      }

      // optional .pb.InitSkillInfo combine_skill = 8;
      case 8: {
        if (tag == 66) {
         parse_combine_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combine_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_attr_infos;
        break;
      }

      // repeated .pb.AttrInfo attr_infos = 9;
      case 9: {
        if (tag == 74) {
         parse_attr_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_attr_infos;
        if (input->ExpectTag(82)) goto parse_buff_infos;
        break;
      }

      // repeated .pb.BuffInfo buff_infos = 10;
      case 10: {
        if (tag == 82) {
         parse_buff_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_buff_infos;
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // optional string name = 11;
      case 11: {
        if (tag == 90) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_hp;
        break;
      }

      // optional int32 hp = 12;
      case 12: {
        if (tag == 96) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_xp;
        break;
      }

      // optional int32 xp = 13;
      case 13: {
        if (tag == 104) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_)));
          set_has_xp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_activeRound;
        break;
      }

      // optional int32 activeRound = 14;
      case 14: {
        if (tag == 112) {
         parse_activeRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activeround_)));
          set_has_activeround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_fashionId;
        break;
      }

      // optional int32 fashionId = 15;
      case 15: {
        if (tag == 120) {
         parse_fashionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_level;
        break;
      }

      // optional int32 level = 16;
      case 16: {
        if (tag == 128) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_awake;
        break;
      }

      // optional int32 awake = 17;
      case 17: {
        if (tag == 136) {
         parse_awake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awake_)));
          set_has_awake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_advance;
        break;
      }

      // optional int32 advance = 18;
      case 18: {
        if (tag == 144) {
         parse_advance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_halo;
        break;
      }

      // optional int32 halo = 19;
      case 19: {
        if (tag == 152) {
         parse_halo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &halo_)));
          set_has_halo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InitActorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InitActorInfo)
  return false;
#undef DO_
}

void InitActorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InitActorInfo)
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero_id(), output);
  }

  // optional int32 meta_id = 2;
  if (has_meta_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->meta_id(), output);
  }

  // optional int32 area_index = 3;
  if (has_area_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->area_index(), output);
  }

  // optional int32 pos_index = 4;
  if (has_pos_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_index(), output);
  }

  // optional .pb.InitSkillInfo default_skill = 5;
  if (has_default_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->default_skill(), output);
  }

  // optional .pb.InitSkillInfo legend_skill = 6;
  if (has_legend_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->legend_skill(), output);
  }

  // optional .pb.InitSkillInfo xp_skill = 7;
  if (has_xp_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->xp_skill(), output);
  }

  // optional .pb.InitSkillInfo combine_skill = 8;
  if (has_combine_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->combine_skill(), output);
  }

  // repeated .pb.AttrInfo attr_infos = 9;
  for (int i = 0; i < this->attr_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attr_infos(i), output);
  }

  // repeated .pb.BuffInfo buff_infos = 10;
  for (int i = 0; i < this->buff_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->buff_infos(i), output);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->name(), output);
  }

  // optional int32 hp = 12;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hp(), output);
  }

  // optional int32 xp = 13;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->xp(), output);
  }

  // optional int32 activeRound = 14;
  if (has_activeround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->activeround(), output);
  }

  // optional int32 fashionId = 15;
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->fashionid(), output);
  }

  // optional int32 level = 16;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->level(), output);
  }

  // optional int32 awake = 17;
  if (has_awake()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->awake(), output);
  }

  // optional int32 advance = 18;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->advance(), output);
  }

  // optional int32 halo = 19;
  if (has_halo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->halo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.InitActorInfo)
}

::google::protobuf::uint8* InitActorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InitActorInfo)
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero_id(), target);
  }

  // optional int32 meta_id = 2;
  if (has_meta_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->meta_id(), target);
  }

  // optional int32 area_index = 3;
  if (has_area_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->area_index(), target);
  }

  // optional int32 pos_index = 4;
  if (has_pos_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_index(), target);
  }

  // optional .pb.InitSkillInfo default_skill = 5;
  if (has_default_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->default_skill(), target);
  }

  // optional .pb.InitSkillInfo legend_skill = 6;
  if (has_legend_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->legend_skill(), target);
  }

  // optional .pb.InitSkillInfo xp_skill = 7;
  if (has_xp_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->xp_skill(), target);
  }

  // optional .pb.InitSkillInfo combine_skill = 8;
  if (has_combine_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->combine_skill(), target);
  }

  // repeated .pb.AttrInfo attr_infos = 9;
  for (int i = 0; i < this->attr_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attr_infos(i), target);
  }

  // repeated .pb.BuffInfo buff_infos = 10;
  for (int i = 0; i < this->buff_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->buff_infos(i), target);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }

  // optional int32 hp = 12;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hp(), target);
  }

  // optional int32 xp = 13;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->xp(), target);
  }

  // optional int32 activeRound = 14;
  if (has_activeround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->activeround(), target);
  }

  // optional int32 fashionId = 15;
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->fashionid(), target);
  }

  // optional int32 level = 16;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->level(), target);
  }

  // optional int32 awake = 17;
  if (has_awake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->awake(), target);
  }

  // optional int32 advance = 18;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->advance(), target);
  }

  // optional int32 halo = 19;
  if (has_halo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->halo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InitActorInfo)
  return target;
}

int InitActorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // optional int32 meta_id = 2;
    if (has_meta_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meta_id());
    }

    // optional int32 area_index = 3;
    if (has_area_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_index());
    }

    // optional int32 pos_index = 4;
    if (has_pos_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_index());
    }

    // optional .pb.InitSkillInfo default_skill = 5;
    if (has_default_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_skill());
    }

    // optional .pb.InitSkillInfo legend_skill = 6;
    if (has_legend_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legend_skill());
    }

    // optional .pb.InitSkillInfo xp_skill = 7;
    if (has_xp_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xp_skill());
    }

    // optional .pb.InitSkillInfo combine_skill = 8;
    if (has_combine_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->combine_skill());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 hp = 12;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 xp = 13;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp());
    }

    // optional int32 activeRound = 14;
    if (has_activeround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeround());
    }

    // optional int32 fashionId = 15;
    if (has_fashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashionid());
    }

    // optional int32 level = 16;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 awake = 17;
    if (has_awake()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awake());
    }

    // optional int32 advance = 18;
    if (has_advance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advance());
    }

    // optional int32 halo = 19;
    if (has_halo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->halo());
    }

  }
  // repeated .pb.AttrInfo attr_infos = 9;
  total_size += 1 * this->attr_infos_size();
  for (int i = 0; i < this->attr_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_infos(i));
  }

  // repeated .pb.BuffInfo buff_infos = 10;
  total_size += 1 * this->buff_infos_size();
  for (int i = 0; i < this->buff_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitActorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitActorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitActorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitActorInfo::MergeFrom(const InitActorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_infos_.MergeFrom(from.attr_infos_);
  buff_infos_.MergeFrom(from.buff_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_meta_id()) {
      set_meta_id(from.meta_id());
    }
    if (from.has_area_index()) {
      set_area_index(from.area_index());
    }
    if (from.has_pos_index()) {
      set_pos_index(from.pos_index());
    }
    if (from.has_default_skill()) {
      mutable_default_skill()->::pb::InitSkillInfo::MergeFrom(from.default_skill());
    }
    if (from.has_legend_skill()) {
      mutable_legend_skill()->::pb::InitSkillInfo::MergeFrom(from.legend_skill());
    }
    if (from.has_xp_skill()) {
      mutable_xp_skill()->::pb::InitSkillInfo::MergeFrom(from.xp_skill());
    }
    if (from.has_combine_skill()) {
      mutable_combine_skill()->::pb::InitSkillInfo::MergeFrom(from.combine_skill());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_xp()) {
      set_xp(from.xp());
    }
    if (from.has_activeround()) {
      set_activeround(from.activeround());
    }
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_awake()) {
      set_awake(from.awake());
    }
    if (from.has_advance()) {
      set_advance(from.advance());
    }
    if (from.has_halo()) {
      set_halo(from.halo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitActorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitActorInfo::CopyFrom(const InitActorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitActorInfo::IsInitialized() const {

  return true;
}

void InitActorInfo::Swap(InitActorInfo* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(meta_id_, other->meta_id_);
    std::swap(area_index_, other->area_index_);
    std::swap(pos_index_, other->pos_index_);
    std::swap(default_skill_, other->default_skill_);
    std::swap(legend_skill_, other->legend_skill_);
    std::swap(xp_skill_, other->xp_skill_);
    std::swap(combine_skill_, other->combine_skill_);
    attr_infos_.Swap(&other->attr_infos_);
    buff_infos_.Swap(&other->buff_infos_);
    std::swap(name_, other->name_);
    std::swap(hp_, other->hp_);
    std::swap(xp_, other->xp_);
    std::swap(activeround_, other->activeround_);
    std::swap(fashionid_, other->fashionid_);
    std::swap(level_, other->level_);
    std::swap(awake_, other->awake_);
    std::swap(advance_, other->advance_);
    std::swap(halo_, other->halo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitActorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitActorInfo_descriptor_;
  metadata.reflection = InitActorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitBattleAreaInfo::kActorInfosFieldNumber;
#endif  // !_MSC_VER

InitBattleAreaInfo::InitBattleAreaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InitBattleAreaInfo)
}

void InitBattleAreaInfo::InitAsDefaultInstance() {
}

InitBattleAreaInfo::InitBattleAreaInfo(const InitBattleAreaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.InitBattleAreaInfo)
}

void InitBattleAreaInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitBattleAreaInfo::~InitBattleAreaInfo() {
  // @@protoc_insertion_point(destructor:pb.InitBattleAreaInfo)
  SharedDtor();
}

void InitBattleAreaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitBattleAreaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitBattleAreaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitBattleAreaInfo_descriptor_;
}

const InitBattleAreaInfo& InitBattleAreaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleParams_2eproto();
  return *default_instance_;
}

InitBattleAreaInfo* InitBattleAreaInfo::default_instance_ = NULL;

InitBattleAreaInfo* InitBattleAreaInfo::New() const {
  return new InitBattleAreaInfo;
}

void InitBattleAreaInfo::Clear() {
  actor_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitBattleAreaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InitBattleAreaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.InitActorInfo actor_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_actor_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actor_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_actor_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InitBattleAreaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InitBattleAreaInfo)
  return false;
#undef DO_
}

void InitBattleAreaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InitBattleAreaInfo)
  // repeated .pb.InitActorInfo actor_infos = 1;
  for (int i = 0; i < this->actor_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actor_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.InitBattleAreaInfo)
}

::google::protobuf::uint8* InitBattleAreaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InitBattleAreaInfo)
  // repeated .pb.InitActorInfo actor_infos = 1;
  for (int i = 0; i < this->actor_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actor_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InitBattleAreaInfo)
  return target;
}

int InitBattleAreaInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.InitActorInfo actor_infos = 1;
  total_size += 1 * this->actor_infos_size();
  for (int i = 0; i < this->actor_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actor_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitBattleAreaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitBattleAreaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitBattleAreaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitBattleAreaInfo::MergeFrom(const InitBattleAreaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  actor_infos_.MergeFrom(from.actor_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitBattleAreaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitBattleAreaInfo::CopyFrom(const InitBattleAreaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitBattleAreaInfo::IsInitialized() const {

  return true;
}

void InitBattleAreaInfo::Swap(InitBattleAreaInfo* other) {
  if (other != this) {
    actor_infos_.Swap(&other->actor_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitBattleAreaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitBattleAreaInfo_descriptor_;
  metadata.reflection = InitBattleAreaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleParams::kMaxRoundFieldNumber;
const int BattleParams::kFirstAttackFieldNumber;
const int BattleParams::kBattleTypeFieldNumber;
const int BattleParams::kOwnAreaFieldNumber;
const int BattleParams::kOppAreaFieldNumber;
const int BattleParams::kCommandsFieldNumber;
const int BattleParams::kPowerFieldNumber;
const int BattleParams::kNameFieldNumber;
const int BattleParams::kTemplateIdFieldNumber;
const int BattleParams::kRandomSeedFieldNumber;
const int BattleParams::kStageIdFieldNumber;
const int BattleParams::kUserInfoFieldNumber;
#endif  // !_MSC_VER

BattleParams::BattleParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BattleParams)
}

void BattleParams::InitAsDefaultInstance() {
  own_area_ = const_cast< ::pb::InitBattleAreaInfo*>(&::pb::InitBattleAreaInfo::default_instance());
}

BattleParams::BattleParams(const BattleParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BattleParams)
}

void BattleParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_round_ = 0;
  first_attack_ = 0;
  battle_type_ = 0;
  own_area_ = NULL;
  randomseed_ = 0;
  stage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleParams::~BattleParams() {
  // @@protoc_insertion_point(destructor:pb.BattleParams)
  SharedDtor();
}

void BattleParams::SharedDtor() {
  if (this != default_instance_) {
    delete own_area_;
  }
}

void BattleParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleParams_descriptor_;
}

const BattleParams& BattleParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleParams_2eproto();
  return *default_instance_;
}

BattleParams* BattleParams::default_instance_ = NULL;

BattleParams* BattleParams::New() const {
  return new BattleParams;
}

void BattleParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(max_round_, first_attack_);
    battle_type_ = 0;
    if (has_own_area()) {
      if (own_area_ != NULL) own_area_->::pb::InitBattleAreaInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1536) {
    randomseed_ = 0;
    stage_id_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  opp_area_.Clear();
  commands_.Clear();
  power_.Clear();
  name_.Clear();
  templateid_.Clear();
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BattleParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_round_)));
          set_has_max_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_first_attack;
        break;
      }

      // optional int32 first_attack = 2;
      case 2: {
        if (tag == 16) {
         parse_first_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_attack_)));
          set_has_first_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_battle_type;
        break;
      }

      // optional int32 battle_type = 3;
      case 3: {
        if (tag == 24) {
         parse_battle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_type_)));
          set_has_battle_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_own_area;
        break;
      }

      // optional .pb.InitBattleAreaInfo own_area = 4;
      case 4: {
        if (tag == 34) {
         parse_own_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_own_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_opp_area;
        break;
      }

      // repeated .pb.InitBattleAreaInfo opp_area = 5;
      case 5: {
        if (tag == 42) {
         parse_opp_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opp_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_opp_area;
        if (input->ExpectTag(50)) goto parse_Commands;
        break;
      }

      // repeated .pb.UserCommand Commands = 6;
      case 6: {
        if (tag == 50) {
         parse_Commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Commands;
        if (input->ExpectTag(56)) goto parse_power;
        break;
      }

      // repeated int32 power = 7;
      case 7: {
        if (tag == 56) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_power())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_power())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_power;
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // repeated string name = 8;
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        if (input->ExpectTag(72)) goto parse_templateId;
        break;
      }

      // repeated int32 templateId = 9;
      case 9: {
        if (tag == 72) {
         parse_templateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_templateid())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_templateid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_templateId;
        if (input->ExpectTag(80)) goto parse_randomSeed;
        break;
      }

      // optional int32 randomSeed = 10;
      case 10: {
        if (tag == 80) {
         parse_randomSeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randomseed_)));
          set_has_randomseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_stage_id;
        break;
      }

      // optional int32 stage_id = 11;
      case 11: {
        if (tag == 88) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_userInfo;
        break;
      }

      // repeated .pb.BattleUserInfo userInfo = 12;
      case 12: {
        if (tag == 98) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_userInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BattleParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BattleParams)
  return false;
#undef DO_
}

void BattleParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BattleParams)
  // optional int32 max_round = 1;
  if (has_max_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_round(), output);
  }

  // optional int32 first_attack = 2;
  if (has_first_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->first_attack(), output);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_type(), output);
  }

  // optional .pb.InitBattleAreaInfo own_area = 4;
  if (has_own_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->own_area(), output);
  }

  // repeated .pb.InitBattleAreaInfo opp_area = 5;
  for (int i = 0; i < this->opp_area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->opp_area(i), output);
  }

  // repeated .pb.UserCommand Commands = 6;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->commands(i), output);
  }

  // repeated int32 power = 7;
  for (int i = 0; i < this->power_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->power(i), output);
  }

  // repeated string name = 8;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->name(i), output);
  }

  // repeated int32 templateId = 9;
  for (int i = 0; i < this->templateid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->templateid(i), output);
  }

  // optional int32 randomSeed = 10;
  if (has_randomseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->randomseed(), output);
  }

  // optional int32 stage_id = 11;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->stage_id(), output);
  }

  // repeated .pb.BattleUserInfo userInfo = 12;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->userinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BattleParams)
}

::google::protobuf::uint8* BattleParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BattleParams)
  // optional int32 max_round = 1;
  if (has_max_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_round(), target);
  }

  // optional int32 first_attack = 2;
  if (has_first_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->first_attack(), target);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_type(), target);
  }

  // optional .pb.InitBattleAreaInfo own_area = 4;
  if (has_own_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->own_area(), target);
  }

  // repeated .pb.InitBattleAreaInfo opp_area = 5;
  for (int i = 0; i < this->opp_area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->opp_area(i), target);
  }

  // repeated .pb.UserCommand Commands = 6;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->commands(i), target);
  }

  // repeated int32 power = 7;
  for (int i = 0; i < this->power_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->power(i), target);
  }

  // repeated string name = 8;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->name(i), target);
  }

  // repeated int32 templateId = 9;
  for (int i = 0; i < this->templateid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->templateid(i), target);
  }

  // optional int32 randomSeed = 10;
  if (has_randomseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->randomseed(), target);
  }

  // optional int32 stage_id = 11;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->stage_id(), target);
  }

  // repeated .pb.BattleUserInfo userInfo = 12;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->userinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BattleParams)
  return target;
}

int BattleParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_round = 1;
    if (has_max_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_round());
    }

    // optional int32 first_attack = 2;
    if (has_first_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_attack());
    }

    // optional int32 battle_type = 3;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_type());
    }

    // optional .pb.InitBattleAreaInfo own_area = 4;
    if (has_own_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->own_area());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 randomSeed = 10;
    if (has_randomseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randomseed());
    }

    // optional int32 stage_id = 11;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

  }
  // repeated .pb.InitBattleAreaInfo opp_area = 5;
  total_size += 1 * this->opp_area_size();
  for (int i = 0; i < this->opp_area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opp_area(i));
  }

  // repeated .pb.UserCommand Commands = 6;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  // repeated int32 power = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->power_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->power(i));
    }
    total_size += 1 * this->power_size() + data_size;
  }

  // repeated string name = 8;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // repeated int32 templateId = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->templateid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->templateid(i));
    }
    total_size += 1 * this->templateid_size() + data_size;
  }

  // repeated .pb.BattleUserInfo userInfo = 12;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleParams::MergeFrom(const BattleParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  opp_area_.MergeFrom(from.opp_area_);
  commands_.MergeFrom(from.commands_);
  power_.MergeFrom(from.power_);
  name_.MergeFrom(from.name_);
  templateid_.MergeFrom(from.templateid_);
  userinfo_.MergeFrom(from.userinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_round()) {
      set_max_round(from.max_round());
    }
    if (from.has_first_attack()) {
      set_first_attack(from.first_attack());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_own_area()) {
      mutable_own_area()->::pb::InitBattleAreaInfo::MergeFrom(from.own_area());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_randomseed()) {
      set_randomseed(from.randomseed());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleParams::CopyFrom(const BattleParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleParams::IsInitialized() const {

  return true;
}

void BattleParams::Swap(BattleParams* other) {
  if (other != this) {
    std::swap(max_round_, other->max_round_);
    std::swap(first_attack_, other->first_attack_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(own_area_, other->own_area_);
    opp_area_.Swap(&other->opp_area_);
    commands_.Swap(&other->commands_);
    power_.Swap(&other->power_);
    name_.Swap(&other->name_);
    templateid_.Swap(&other->templateid_);
    std::swap(randomseed_, other->randomseed_);
    std::swap(stage_id_, other->stage_id_);
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleParams_descriptor_;
  metadata.reflection = BattleParams_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
