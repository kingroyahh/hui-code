// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleCommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace pb {

void protobuf_ShutdownFile_BattleCommand_2eproto() {
  delete AttackRecord::default_instance_;
  delete RoundRecord::default_instance_;
  delete BattleRecord::default_instance_;
  delete UserCommand::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_BattleCommand_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_BattleCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AttackRecord::default_instance_ = new AttackRecord();
  RoundRecord::default_instance_ = new RoundRecord();
  BattleRecord::default_instance_ = new BattleRecord();
  UserCommand::default_instance_ = new UserCommand();
  AttackRecord::default_instance_->InitAsDefaultInstance();
  RoundRecord::default_instance_->InitAsDefaultInstance();
  BattleRecord::default_instance_->InitAsDefaultInstance();
  UserCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleCommand_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_BattleCommand_2eproto_once_);
void protobuf_AddDesc_BattleCommand_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_BattleCommand_2eproto_once_,
                 &protobuf_AddDesc_BattleCommand_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleCommand_2eproto {
  StaticDescriptorInitializer_BattleCommand_2eproto() {
    protobuf_AddDesc_BattleCommand_2eproto();
  }
} static_descriptor_initializer_BattleCommand_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int AttackRecord::kSkillFieldNumber;
const int AttackRecord::kAtkAreaIndexFieldNumber;
const int AttackRecord::kAtkPosIndexFieldNumber;
const int AttackRecord::kTargetAreaIndexFieldNumber;
const int AttackRecord::kTargetPosIndexFieldNumber;
const int AttackRecord::kAttackTimeFieldNumber;
#endif  // !_MSC_VER

AttackRecord::AttackRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AttackRecord)
}

void AttackRecord::InitAsDefaultInstance() {
}

AttackRecord::AttackRecord(const AttackRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AttackRecord)
}

void AttackRecord::SharedCtor() {
  _cached_size_ = 0;
  skill_ = false;
  atk_area_index_ = 0;
  atk_pos_index_ = 0;
  target_area_index_ = 0;
  target_pos_index_ = 0;
  attacktime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackRecord::~AttackRecord() {
  // @@protoc_insertion_point(destructor:pb.AttackRecord)
  SharedDtor();
}

void AttackRecord::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AttackRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AttackRecord& AttackRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleCommand_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCommand_2eproto();
#endif
  return *default_instance_;
}

AttackRecord* AttackRecord::default_instance_ = NULL;

AttackRecord* AttackRecord::New() const {
  return new AttackRecord;
}

void AttackRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AttackRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(skill_, attacktime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AttackRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:pb.AttackRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool skill = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_atk_area_index;
        break;
      }

      // optional int32 atk_area_index = 2;
      case 2: {
        if (tag == 16) {
         parse_atk_area_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_area_index_)));
          set_has_atk_area_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_atk_pos_index;
        break;
      }

      // optional int32 atk_pos_index = 3;
      case 3: {
        if (tag == 24) {
         parse_atk_pos_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_pos_index_)));
          set_has_atk_pos_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_area_index;
        break;
      }

      // optional int32 target_area_index = 4;
      case 4: {
        if (tag == 32) {
         parse_target_area_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_area_index_)));
          set_has_target_area_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_target_pos_index;
        break;
      }

      // optional int32 target_pos_index = 5;
      case 5: {
        if (tag == 40) {
         parse_target_pos_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_pos_index_)));
          set_has_target_pos_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_attackTime;
        break;
      }

      // optional int32 attackTime = 6;
      case 6: {
        if (tag == 48) {
         parse_attackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacktime_)));
          set_has_attacktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AttackRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AttackRecord)
  return false;
#undef DO_
}

void AttackRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AttackRecord)
  // optional bool skill = 1;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->skill(), output);
  }

  // optional int32 atk_area_index = 2;
  if (has_atk_area_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atk_area_index(), output);
  }

  // optional int32 atk_pos_index = 3;
  if (has_atk_pos_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->atk_pos_index(), output);
  }

  // optional int32 target_area_index = 4;
  if (has_target_area_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_area_index(), output);
  }

  // optional int32 target_pos_index = 5;
  if (has_target_pos_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->target_pos_index(), output);
  }

  // optional int32 attackTime = 6;
  if (has_attacktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attacktime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:pb.AttackRecord)
}

int AttackRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool skill = 1;
    if (has_skill()) {
      total_size += 1 + 1;
    }

    // optional int32 atk_area_index = 2;
    if (has_atk_area_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_area_index());
    }

    // optional int32 atk_pos_index = 3;
    if (has_atk_pos_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_pos_index());
    }

    // optional int32 target_area_index = 4;
    if (has_target_area_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_area_index());
    }

    // optional int32 target_pos_index = 5;
    if (has_target_pos_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_pos_index());
    }

    // optional int32 attackTime = 6;
    if (has_attacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacktime());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AttackRecord*>(&from));
}

void AttackRecord::MergeFrom(const AttackRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_atk_area_index()) {
      set_atk_area_index(from.atk_area_index());
    }
    if (from.has_atk_pos_index()) {
      set_atk_pos_index(from.atk_pos_index());
    }
    if (from.has_target_area_index()) {
      set_target_area_index(from.target_area_index());
    }
    if (from.has_target_pos_index()) {
      set_target_pos_index(from.target_pos_index());
    }
    if (from.has_attacktime()) {
      set_attacktime(from.attacktime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AttackRecord::CopyFrom(const AttackRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackRecord::IsInitialized() const {

  return true;
}

void AttackRecord::Swap(AttackRecord* other) {
  if (other != this) {
    std::swap(skill_, other->skill_);
    std::swap(atk_area_index_, other->atk_area_index_);
    std::swap(atk_pos_index_, other->atk_pos_index_);
    std::swap(target_area_index_, other->target_area_index_);
    std::swap(target_pos_index_, other->target_pos_index_);
    std::swap(attacktime_, other->attacktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AttackRecord::GetTypeName() const {
  return "pb.AttackRecord";
}


// ===================================================================

#ifndef _MSC_VER
const int RoundRecord::kAttackRecordFieldNumber;
#endif  // !_MSC_VER

RoundRecord::RoundRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoundRecord)
}

void RoundRecord::InitAsDefaultInstance() {
}

RoundRecord::RoundRecord(const RoundRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RoundRecord)
}

void RoundRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoundRecord::~RoundRecord() {
  // @@protoc_insertion_point(destructor:pb.RoundRecord)
  SharedDtor();
}

void RoundRecord::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoundRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoundRecord& RoundRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleCommand_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCommand_2eproto();
#endif
  return *default_instance_;
}

RoundRecord* RoundRecord::default_instance_ = NULL;

RoundRecord* RoundRecord::New() const {
  return new RoundRecord;
}

void RoundRecord::Clear() {
  attackrecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RoundRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:pb.RoundRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.AttackRecord attackRecord = 1;
      case 1: {
        if (tag == 10) {
         parse_attackRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackrecord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attackRecord;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoundRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoundRecord)
  return false;
#undef DO_
}

void RoundRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoundRecord)
  // repeated .pb.AttackRecord attackRecord = 1;
  for (int i = 0; i < this->attackrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->attackrecord(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:pb.RoundRecord)
}

int RoundRecord::ByteSize() const {
  int total_size = 0;

  // repeated .pb.AttackRecord attackRecord = 1;
  total_size += 1 * this->attackrecord_size();
  for (int i = 0; i < this->attackrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackrecord(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoundRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoundRecord*>(&from));
}

void RoundRecord::MergeFrom(const RoundRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackrecord_.MergeFrom(from.attackrecord_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RoundRecord::CopyFrom(const RoundRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundRecord::IsInitialized() const {

  return true;
}

void RoundRecord::Swap(RoundRecord* other) {
  if (other != this) {
    attackrecord_.Swap(&other->attackrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoundRecord::GetTypeName() const {
  return "pb.RoundRecord";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRecord::kRoundRecordFieldNumber;
const int BattleRecord::kClientLoseFieldNumber;
#endif  // !_MSC_VER

BattleRecord::BattleRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BattleRecord)
}

void BattleRecord::InitAsDefaultInstance() {
}

BattleRecord::BattleRecord(const BattleRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BattleRecord)
}

void BattleRecord::SharedCtor() {
  _cached_size_ = 0;
  clientlose_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRecord::~BattleRecord() {
  // @@protoc_insertion_point(destructor:pb.BattleRecord)
  SharedDtor();
}

void BattleRecord::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleRecord& BattleRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleCommand_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCommand_2eproto();
#endif
  return *default_instance_;
}

BattleRecord* BattleRecord::default_instance_ = NULL;

BattleRecord* BattleRecord::New() const {
  return new BattleRecord;
}

void BattleRecord::Clear() {
  clientlose_ = false;
  roundrecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:pb.BattleRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.RoundRecord roundRecord = 1;
      case 1: {
        if (tag == 10) {
         parse_roundRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roundrecord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_roundRecord;
        if (input->ExpectTag(16)) goto parse_clientLose;
        break;
      }

      // optional bool clientLose = 2;
      case 2: {
        if (tag == 16) {
         parse_clientLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientlose_)));
          set_has_clientlose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BattleRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BattleRecord)
  return false;
#undef DO_
}

void BattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BattleRecord)
  // repeated .pb.RoundRecord roundRecord = 1;
  for (int i = 0; i < this->roundrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->roundrecord(i), output);
  }

  // optional bool clientLose = 2;
  if (has_clientlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientlose(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:pb.BattleRecord)
}

int BattleRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool clientLose = 2;
    if (has_clientlose()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.RoundRecord roundRecord = 1;
  total_size += 1 * this->roundrecord_size();
  for (int i = 0; i < this->roundrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roundrecord(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleRecord*>(&from));
}

void BattleRecord::MergeFrom(const BattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundrecord_.MergeFrom(from.roundrecord_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_clientlose()) {
      set_clientlose(from.clientlose());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BattleRecord::CopyFrom(const BattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRecord::IsInitialized() const {

  return true;
}

void BattleRecord::Swap(BattleRecord* other) {
  if (other != this) {
    roundrecord_.Swap(&other->roundrecord_);
    std::swap(clientlose_, other->clientlose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleRecord::GetTypeName() const {
  return "pb.BattleRecord";
}


// ===================================================================

#ifndef _MSC_VER
const int UserCommand::kBattleRecordFieldNumber;
#endif  // !_MSC_VER

UserCommand::UserCommand()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.UserCommand)
}

void UserCommand::InitAsDefaultInstance() {
}

UserCommand::UserCommand(const UserCommand& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.UserCommand)
}

void UserCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCommand::~UserCommand() {
  // @@protoc_insertion_point(destructor:pb.UserCommand)
  SharedDtor();
}

void UserCommand::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserCommand& UserCommand::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleCommand_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCommand_2eproto();
#endif
  return *default_instance_;
}

UserCommand* UserCommand::default_instance_ = NULL;

UserCommand* UserCommand::New() const {
  return new UserCommand;
}

void UserCommand::Clear() {
  battlerecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:pb.UserCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.BattleRecord battleRecord = 1;
      case 1: {
        if (tag == 10) {
         parse_battleRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlerecord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_battleRecord;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.UserCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.UserCommand)
  return false;
#undef DO_
}

void UserCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.UserCommand)
  // repeated .pb.BattleRecord battleRecord = 1;
  for (int i = 0; i < this->battlerecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->battlerecord(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:pb.UserCommand)
}

int UserCommand::ByteSize() const {
  int total_size = 0;

  // repeated .pb.BattleRecord battleRecord = 1;
  total_size += 1 * this->battlerecord_size();
  for (int i = 0; i < this->battlerecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlerecord(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserCommand*>(&from));
}

void UserCommand::MergeFrom(const UserCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlerecord_.MergeFrom(from.battlerecord_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserCommand::CopyFrom(const UserCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCommand::IsInitialized() const {

  return true;
}

void UserCommand::Swap(UserCommand* other) {
  if (other != this) {
    battlerecord_.Swap(&other->battlerecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserCommand::GetTypeName() const {
  return "pb.UserCommand";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
