// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleStatistics.proto

#ifndef PROTOBUF_BattleStatistics_2eproto__INCLUDED
#define PROTOBUF_BattleStatistics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BattleStatistics_2eproto();
void protobuf_AssignDesc_BattleStatistics_2eproto();
void protobuf_ShutdownFile_BattleStatistics_2eproto();

class StActorInfo;
class StAreaInfo;
class StDoubleHitInfo;
class BattleStatistics;

// ===================================================================

/*FOR2LUA
<Record>
	<name>StActorInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleStatistics.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class StActorInfo : public ::google::protobuf::Message {
 public:
  StActorInfo();
  virtual ~StActorInfo();

  StActorInfo(const StActorInfo& from);

  inline StActorInfo& operator=(const StActorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StActorInfo& default_instance();

  void Swap(StActorInfo* other);

  // implements Message ----------------------------------------------

  StActorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StActorInfo& from);
  void MergeFrom(const StActorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 actorId = 1;
  inline bool has_actorid() const;
  inline void clear_actorid();
  static const int kActorIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>StActorInfo</name>
  	<Function>
  		<name>actorid</name>
  		<replaceName>actorId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actorid</name>
  		<replaceName>actorId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actorid</name>
  		<replaceName>actorId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 actorid() const;
  inline void set_actorid(::google::protobuf::int32 value);

  // optional int32 hpNum = 2;
  inline bool has_hpnum() const;
  inline void clear_hpnum();
  static const int kHpNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>StActorInfo</name>
  	<Function>
  		<name>hpnum</name>
  		<replaceName>hpNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hpnum</name>
  		<replaceName>hpNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hpnum</name>
  		<replaceName>hpNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hpnum() const;
  inline void set_hpnum(::google::protobuf::int32 value);

  // optional float hpPercent = 3;
  inline bool has_hppercent() const;
  inline void clear_hppercent();
  static const int kHpPercentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>StActorInfo</name>
  	<Function>
  		<name>hppercent</name>
  		<replaceName>hpPercent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hppercent</name>
  		<replaceName>hpPercent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hppercent</name>
  		<replaceName>hpPercent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float hppercent() const;
  inline void set_hppercent(float value);

  // optional int32 xpNum = 4;
  inline bool has_xpnum() const;
  inline void clear_xpnum();
  static const int kXpNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>StActorInfo</name>
  	<Function>
  		<name>xpnum</name>
  		<replaceName>xpNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_xpnum</name>
  		<replaceName>xpNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_xpnum</name>
  		<replaceName>xpNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 xpnum() const;
  inline void set_xpnum(::google::protobuf::int32 value);

  // optional int32 deltaHp = 5;
  inline bool has_deltahp() const;
  inline void clear_deltahp();
  static const int kDeltaHpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>StActorInfo</name>
  	<Function>
  		<name>deltahp</name>
  		<replaceName>deltaHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deltahp</name>
  		<replaceName>deltaHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deltahp</name>
  		<replaceName>deltaHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 deltahp() const;
  inline void set_deltahp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.StActorInfo)
 private:
  inline void set_has_actorid();
  inline void clear_has_actorid();
  inline void set_has_hpnum();
  inline void clear_has_hpnum();
  inline void set_has_hppercent();
  inline void clear_has_hppercent();
  inline void set_has_xpnum();
  inline void clear_has_xpnum();
  inline void set_has_deltahp();
  inline void clear_has_deltahp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 actorid_;
  ::google::protobuf::int32 hpnum_;
  float hppercent_;
  ::google::protobuf::int32 xpnum_;
  ::google::protobuf::int32 deltahp_;
  friend void  protobuf_AddDesc_BattleStatistics_2eproto();
  friend void protobuf_AssignDesc_BattleStatistics_2eproto();
  friend void protobuf_ShutdownFile_BattleStatistics_2eproto();

  void InitAsDefaultInstance();
  static StActorInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>StAreaInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleStatistics.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class StAreaInfo : public ::google::protobuf::Message {
 public:
  StAreaInfo();
  virtual ~StAreaInfo();

  StAreaInfo(const StAreaInfo& from);

  inline StAreaInfo& operator=(const StAreaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StAreaInfo& default_instance();

  void Swap(StAreaInfo* other);

  // implements Message ----------------------------------------------

  StAreaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StAreaInfo& from);
  void MergeFrom(const StAreaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 areaIndex = 1;
  inline bool has_areaindex() const;
  inline void clear_areaindex();
  static const int kAreaIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>StAreaInfo</name>
  	<Function>
  		<name>areaindex</name>
  		<replaceName>areaIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_areaindex</name>
  		<replaceName>areaIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areaindex</name>
  		<replaceName>areaIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 areaindex() const;
  inline void set_areaindex(::google::protobuf::int32 value);

  // optional int32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>StAreaInfo</name>
  	<Function>
  		<name>damage</name>
  		<replaceName>damage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage</name>
  		<replaceName>damage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage</name>
  		<replaceName>damage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // optional float hpPercent = 3;
  inline bool has_hppercent() const;
  inline void clear_hppercent();
  static const int kHpPercentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>StAreaInfo</name>
  	<Function>
  		<name>hppercent</name>
  		<replaceName>hpPercent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hppercent</name>
  		<replaceName>hpPercent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hppercent</name>
  		<replaceName>hpPercent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float hppercent() const;
  inline void set_hppercent(float value);

  // repeated .pb.StActorInfo actorInfo = 4;
  inline int actorinfo_size() const;
  inline void clear_actorinfo();
  static const int kActorInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>StAreaInfo</name>
  	<Function>
  		<name>actorinfo</name>
  		<replaceName>actorInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_actorinfo</name>
  		<replaceName>actorInfo</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_actorinfo</name>
  		<replaceName>actorInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>actorinfo_size</name>
  		<replaceName>actorInfo</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::StActorInfo& actorinfo(int index) const;
  inline ::pb::StActorInfo* mutable_actorinfo(int index);
  inline ::pb::StActorInfo* add_actorinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StActorInfo >&
      actorinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StActorInfo >*
      mutable_actorinfo();

  // @@protoc_insertion_point(class_scope:pb.StAreaInfo)
 private:
  inline void set_has_areaindex();
  inline void clear_has_areaindex();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_hppercent();
  inline void clear_has_hppercent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 areaindex_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::RepeatedPtrField< ::pb::StActorInfo > actorinfo_;
  float hppercent_;
  friend void  protobuf_AddDesc_BattleStatistics_2eproto();
  friend void protobuf_AssignDesc_BattleStatistics_2eproto();
  friend void protobuf_ShutdownFile_BattleStatistics_2eproto();

  void InitAsDefaultInstance();
  static StAreaInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>StDoubleHitInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleStatistics.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class StDoubleHitInfo : public ::google::protobuf::Message {
 public:
  StDoubleHitInfo();
  virtual ~StDoubleHitInfo();

  StDoubleHitInfo(const StDoubleHitInfo& from);

  inline StDoubleHitInfo& operator=(const StDoubleHitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StDoubleHitInfo& default_instance();

  void Swap(StDoubleHitInfo* other);

  // implements Message ----------------------------------------------

  StDoubleHitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StDoubleHitInfo& from);
  void MergeFrom(const StDoubleHitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fair = 1;
  inline bool has_fair() const;
  inline void clear_fair();
  static const int kFairFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>StDoubleHitInfo</name>
  	<Function>
  		<name>fair</name>
  		<replaceName>fair</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fair</name>
  		<replaceName>fair</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fair</name>
  		<replaceName>fair</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 fair() const;
  inline void set_fair(::google::protobuf::int32 value);

  // optional int32 good = 2;
  inline bool has_good() const;
  inline void clear_good();
  static const int kGoodFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>StDoubleHitInfo</name>
  	<Function>
  		<name>good</name>
  		<replaceName>good</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_good</name>
  		<replaceName>good</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_good</name>
  		<replaceName>good</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 good() const;
  inline void set_good(::google::protobuf::int32 value);

  // optional int32 fine = 3;
  inline bool has_fine() const;
  inline void clear_fine();
  static const int kFineFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>StDoubleHitInfo</name>
  	<Function>
  		<name>fine</name>
  		<replaceName>fine</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fine</name>
  		<replaceName>fine</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fine</name>
  		<replaceName>fine</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 fine() const;
  inline void set_fine(::google::protobuf::int32 value);

  // optional int32 excellent = 4;
  inline bool has_excellent() const;
  inline void clear_excellent();
  static const int kExcellentFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>StDoubleHitInfo</name>
  	<Function>
  		<name>excellent</name>
  		<replaceName>excellent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_excellent</name>
  		<replaceName>excellent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_excellent</name>
  		<replaceName>excellent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 excellent() const;
  inline void set_excellent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.StDoubleHitInfo)
 private:
  inline void set_has_fair();
  inline void clear_has_fair();
  inline void set_has_good();
  inline void clear_has_good();
  inline void set_has_fine();
  inline void clear_has_fine();
  inline void set_has_excellent();
  inline void clear_has_excellent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 fair_;
  ::google::protobuf::int32 good_;
  ::google::protobuf::int32 fine_;
  ::google::protobuf::int32 excellent_;
  friend void  protobuf_AddDesc_BattleStatistics_2eproto();
  friend void protobuf_AssignDesc_BattleStatistics_2eproto();
  friend void protobuf_ShutdownFile_BattleStatistics_2eproto();

  void InitAsDefaultInstance();
  static StDoubleHitInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BattleStatistics</name>
	<Function>
		<name>new</name>
		<replaceName>BattleStatistics.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BattleStatistics : public ::google::protobuf::Message {
 public:
  BattleStatistics();
  virtual ~BattleStatistics();

  BattleStatistics(const BattleStatistics& from);

  inline BattleStatistics& operator=(const BattleStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleStatistics& default_instance();

  void Swap(BattleStatistics* other);

  // implements Message ----------------------------------------------

  BattleStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleStatistics& from);
  void MergeFrom(const BattleStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 winner = 1;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BattleStatistics</name>
  	<Function>
  		<name>winner</name>
  		<replaceName>winner</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winner</name>
  		<replaceName>winner</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winner</name>
  		<replaceName>winner</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 winner() const;
  inline void set_winner(::google::protobuf::int32 value);

  // optional int32 round_count = 2;
  inline bool has_round_count() const;
  inline void clear_round_count();
  static const int kRoundCountFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BattleStatistics</name>
  	<Function>
  		<name>round_count</name>
  		<replaceName>round_count</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_round_count</name>
  		<replaceName>round_count</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_round_count</name>
  		<replaceName>round_count</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 round_count() const;
  inline void set_round_count(::google::protobuf::int32 value);

  // repeated .pb.StAreaInfo areaInfo = 3;
  inline int areainfo_size() const;
  inline void clear_areainfo();
  static const int kAreaInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BattleStatistics</name>
  	<Function>
  		<name>areainfo</name>
  		<replaceName>areaInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_areainfo</name>
  		<replaceName>areaInfo</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_areainfo</name>
  		<replaceName>areaInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>areainfo_size</name>
  		<replaceName>areaInfo</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::StAreaInfo& areainfo(int index) const;
  inline ::pb::StAreaInfo* mutable_areainfo(int index);
  inline ::pb::StAreaInfo* add_areainfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StAreaInfo >&
      areainfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StAreaInfo >*
      mutable_areainfo();

  // optional int32 fail_code = 4;
  inline bool has_fail_code() const;
  inline void clear_fail_code();
  static const int kFailCodeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BattleStatistics</name>
  	<Function>
  		<name>fail_code</name>
  		<replaceName>fail_code</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fail_code</name>
  		<replaceName>fail_code</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fail_code</name>
  		<replaceName>fail_code</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 fail_code() const;
  inline void set_fail_code(::google::protobuf::int32 value);

  // optional .pb.StDoubleHitInfo doubleHit = 5;
  inline bool has_doublehit() const;
  inline void clear_doublehit();
  static const int kDoubleHitFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BattleStatistics</name>
  	<Function>
  		<name>doublehit</name>
  		<replaceName>doubleHit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_doublehit</name>
  		<replaceName>doubleHit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_doublehit</name>
  		<replaceName>doubleHit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::StDoubleHitInfo& doublehit() const;
  inline ::pb::StDoubleHitInfo* mutable_doublehit();
  inline ::pb::StDoubleHitInfo* release_doublehit();
  inline void set_allocated_doublehit(::pb::StDoubleHitInfo* doublehit);

  // @@protoc_insertion_point(class_scope:pb.BattleStatistics)
 private:
  inline void set_has_winner();
  inline void clear_has_winner();
  inline void set_has_round_count();
  inline void clear_has_round_count();
  inline void set_has_fail_code();
  inline void clear_has_fail_code();
  inline void set_has_doublehit();
  inline void clear_has_doublehit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 winner_;
  ::google::protobuf::int32 round_count_;
  ::google::protobuf::RepeatedPtrField< ::pb::StAreaInfo > areainfo_;
  ::pb::StDoubleHitInfo* doublehit_;
  ::google::protobuf::int32 fail_code_;
  friend void  protobuf_AddDesc_BattleStatistics_2eproto();
  friend void protobuf_AssignDesc_BattleStatistics_2eproto();
  friend void protobuf_ShutdownFile_BattleStatistics_2eproto();

  void InitAsDefaultInstance();
  static BattleStatistics* default_instance_;
};
// ===================================================================


// ===================================================================

// StActorInfo

// optional int32 actorId = 1;
inline bool StActorInfo::has_actorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StActorInfo::set_has_actorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StActorInfo::clear_has_actorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StActorInfo::clear_actorid() {
  actorid_ = 0;
  clear_has_actorid();
}
inline ::google::protobuf::int32 StActorInfo::actorid() const {
  // @@protoc_insertion_point(field_get:pb.StActorInfo.actorId)
  return actorid_;
}
inline void StActorInfo::set_actorid(::google::protobuf::int32 value) {
  set_has_actorid();
  actorid_ = value;
  // @@protoc_insertion_point(field_set:pb.StActorInfo.actorId)
}

// optional int32 hpNum = 2;
inline bool StActorInfo::has_hpnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StActorInfo::set_has_hpnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StActorInfo::clear_has_hpnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StActorInfo::clear_hpnum() {
  hpnum_ = 0;
  clear_has_hpnum();
}
inline ::google::protobuf::int32 StActorInfo::hpnum() const {
  // @@protoc_insertion_point(field_get:pb.StActorInfo.hpNum)
  return hpnum_;
}
inline void StActorInfo::set_hpnum(::google::protobuf::int32 value) {
  set_has_hpnum();
  hpnum_ = value;
  // @@protoc_insertion_point(field_set:pb.StActorInfo.hpNum)
}

// optional float hpPercent = 3;
inline bool StActorInfo::has_hppercent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StActorInfo::set_has_hppercent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StActorInfo::clear_has_hppercent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StActorInfo::clear_hppercent() {
  hppercent_ = 0;
  clear_has_hppercent();
}
inline float StActorInfo::hppercent() const {
  // @@protoc_insertion_point(field_get:pb.StActorInfo.hpPercent)
  return hppercent_;
}
inline void StActorInfo::set_hppercent(float value) {
  set_has_hppercent();
  hppercent_ = value;
  // @@protoc_insertion_point(field_set:pb.StActorInfo.hpPercent)
}

// optional int32 xpNum = 4;
inline bool StActorInfo::has_xpnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StActorInfo::set_has_xpnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StActorInfo::clear_has_xpnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StActorInfo::clear_xpnum() {
  xpnum_ = 0;
  clear_has_xpnum();
}
inline ::google::protobuf::int32 StActorInfo::xpnum() const {
  // @@protoc_insertion_point(field_get:pb.StActorInfo.xpNum)
  return xpnum_;
}
inline void StActorInfo::set_xpnum(::google::protobuf::int32 value) {
  set_has_xpnum();
  xpnum_ = value;
  // @@protoc_insertion_point(field_set:pb.StActorInfo.xpNum)
}

// optional int32 deltaHp = 5;
inline bool StActorInfo::has_deltahp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StActorInfo::set_has_deltahp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StActorInfo::clear_has_deltahp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StActorInfo::clear_deltahp() {
  deltahp_ = 0;
  clear_has_deltahp();
}
inline ::google::protobuf::int32 StActorInfo::deltahp() const {
  // @@protoc_insertion_point(field_get:pb.StActorInfo.deltaHp)
  return deltahp_;
}
inline void StActorInfo::set_deltahp(::google::protobuf::int32 value) {
  set_has_deltahp();
  deltahp_ = value;
  // @@protoc_insertion_point(field_set:pb.StActorInfo.deltaHp)
}

// -------------------------------------------------------------------

// StAreaInfo

// optional int32 areaIndex = 1;
inline bool StAreaInfo::has_areaindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StAreaInfo::set_has_areaindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StAreaInfo::clear_has_areaindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StAreaInfo::clear_areaindex() {
  areaindex_ = 0;
  clear_has_areaindex();
}
inline ::google::protobuf::int32 StAreaInfo::areaindex() const {
  // @@protoc_insertion_point(field_get:pb.StAreaInfo.areaIndex)
  return areaindex_;
}
inline void StAreaInfo::set_areaindex(::google::protobuf::int32 value) {
  set_has_areaindex();
  areaindex_ = value;
  // @@protoc_insertion_point(field_set:pb.StAreaInfo.areaIndex)
}

// optional int32 damage = 2;
inline bool StAreaInfo::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StAreaInfo::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StAreaInfo::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StAreaInfo::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 StAreaInfo::damage() const {
  // @@protoc_insertion_point(field_get:pb.StAreaInfo.damage)
  return damage_;
}
inline void StAreaInfo::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:pb.StAreaInfo.damage)
}

// optional float hpPercent = 3;
inline bool StAreaInfo::has_hppercent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StAreaInfo::set_has_hppercent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StAreaInfo::clear_has_hppercent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StAreaInfo::clear_hppercent() {
  hppercent_ = 0;
  clear_has_hppercent();
}
inline float StAreaInfo::hppercent() const {
  // @@protoc_insertion_point(field_get:pb.StAreaInfo.hpPercent)
  return hppercent_;
}
inline void StAreaInfo::set_hppercent(float value) {
  set_has_hppercent();
  hppercent_ = value;
  // @@protoc_insertion_point(field_set:pb.StAreaInfo.hpPercent)
}

// repeated .pb.StActorInfo actorInfo = 4;
inline int StAreaInfo::actorinfo_size() const {
  return actorinfo_.size();
}
inline void StAreaInfo::clear_actorinfo() {
  actorinfo_.Clear();
}
inline const ::pb::StActorInfo& StAreaInfo::actorinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.StAreaInfo.actorInfo)
  return actorinfo_.Get(index);
}
inline ::pb::StActorInfo* StAreaInfo::mutable_actorinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.StAreaInfo.actorInfo)
  return actorinfo_.Mutable(index);
}
inline ::pb::StActorInfo* StAreaInfo::add_actorinfo() {
  // @@protoc_insertion_point(field_add:pb.StAreaInfo.actorInfo)
  return actorinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StActorInfo >&
StAreaInfo::actorinfo() const {
  // @@protoc_insertion_point(field_list:pb.StAreaInfo.actorInfo)
  return actorinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StActorInfo >*
StAreaInfo::mutable_actorinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.StAreaInfo.actorInfo)
  return &actorinfo_;
}

// -------------------------------------------------------------------

// StDoubleHitInfo

// optional int32 fair = 1;
inline bool StDoubleHitInfo::has_fair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StDoubleHitInfo::set_has_fair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StDoubleHitInfo::clear_has_fair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StDoubleHitInfo::clear_fair() {
  fair_ = 0;
  clear_has_fair();
}
inline ::google::protobuf::int32 StDoubleHitInfo::fair() const {
  // @@protoc_insertion_point(field_get:pb.StDoubleHitInfo.fair)
  return fair_;
}
inline void StDoubleHitInfo::set_fair(::google::protobuf::int32 value) {
  set_has_fair();
  fair_ = value;
  // @@protoc_insertion_point(field_set:pb.StDoubleHitInfo.fair)
}

// optional int32 good = 2;
inline bool StDoubleHitInfo::has_good() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StDoubleHitInfo::set_has_good() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StDoubleHitInfo::clear_has_good() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StDoubleHitInfo::clear_good() {
  good_ = 0;
  clear_has_good();
}
inline ::google::protobuf::int32 StDoubleHitInfo::good() const {
  // @@protoc_insertion_point(field_get:pb.StDoubleHitInfo.good)
  return good_;
}
inline void StDoubleHitInfo::set_good(::google::protobuf::int32 value) {
  set_has_good();
  good_ = value;
  // @@protoc_insertion_point(field_set:pb.StDoubleHitInfo.good)
}

// optional int32 fine = 3;
inline bool StDoubleHitInfo::has_fine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StDoubleHitInfo::set_has_fine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StDoubleHitInfo::clear_has_fine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StDoubleHitInfo::clear_fine() {
  fine_ = 0;
  clear_has_fine();
}
inline ::google::protobuf::int32 StDoubleHitInfo::fine() const {
  // @@protoc_insertion_point(field_get:pb.StDoubleHitInfo.fine)
  return fine_;
}
inline void StDoubleHitInfo::set_fine(::google::protobuf::int32 value) {
  set_has_fine();
  fine_ = value;
  // @@protoc_insertion_point(field_set:pb.StDoubleHitInfo.fine)
}

// optional int32 excellent = 4;
inline bool StDoubleHitInfo::has_excellent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StDoubleHitInfo::set_has_excellent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StDoubleHitInfo::clear_has_excellent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StDoubleHitInfo::clear_excellent() {
  excellent_ = 0;
  clear_has_excellent();
}
inline ::google::protobuf::int32 StDoubleHitInfo::excellent() const {
  // @@protoc_insertion_point(field_get:pb.StDoubleHitInfo.excellent)
  return excellent_;
}
inline void StDoubleHitInfo::set_excellent(::google::protobuf::int32 value) {
  set_has_excellent();
  excellent_ = value;
  // @@protoc_insertion_point(field_set:pb.StDoubleHitInfo.excellent)
}

// -------------------------------------------------------------------

// BattleStatistics

// optional int32 winner = 1;
inline bool BattleStatistics::has_winner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleStatistics::set_has_winner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleStatistics::clear_has_winner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleStatistics::clear_winner() {
  winner_ = 0;
  clear_has_winner();
}
inline ::google::protobuf::int32 BattleStatistics::winner() const {
  // @@protoc_insertion_point(field_get:pb.BattleStatistics.winner)
  return winner_;
}
inline void BattleStatistics::set_winner(::google::protobuf::int32 value) {
  set_has_winner();
  winner_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleStatistics.winner)
}

// optional int32 round_count = 2;
inline bool BattleStatistics::has_round_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleStatistics::set_has_round_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleStatistics::clear_has_round_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleStatistics::clear_round_count() {
  round_count_ = 0;
  clear_has_round_count();
}
inline ::google::protobuf::int32 BattleStatistics::round_count() const {
  // @@protoc_insertion_point(field_get:pb.BattleStatistics.round_count)
  return round_count_;
}
inline void BattleStatistics::set_round_count(::google::protobuf::int32 value) {
  set_has_round_count();
  round_count_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleStatistics.round_count)
}

// repeated .pb.StAreaInfo areaInfo = 3;
inline int BattleStatistics::areainfo_size() const {
  return areainfo_.size();
}
inline void BattleStatistics::clear_areainfo() {
  areainfo_.Clear();
}
inline const ::pb::StAreaInfo& BattleStatistics::areainfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleStatistics.areaInfo)
  return areainfo_.Get(index);
}
inline ::pb::StAreaInfo* BattleStatistics::mutable_areainfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleStatistics.areaInfo)
  return areainfo_.Mutable(index);
}
inline ::pb::StAreaInfo* BattleStatistics::add_areainfo() {
  // @@protoc_insertion_point(field_add:pb.BattleStatistics.areaInfo)
  return areainfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StAreaInfo >&
BattleStatistics::areainfo() const {
  // @@protoc_insertion_point(field_list:pb.BattleStatistics.areaInfo)
  return areainfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StAreaInfo >*
BattleStatistics::mutable_areainfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleStatistics.areaInfo)
  return &areainfo_;
}

// optional int32 fail_code = 4;
inline bool BattleStatistics::has_fail_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleStatistics::set_has_fail_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleStatistics::clear_has_fail_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleStatistics::clear_fail_code() {
  fail_code_ = 0;
  clear_has_fail_code();
}
inline ::google::protobuf::int32 BattleStatistics::fail_code() const {
  // @@protoc_insertion_point(field_get:pb.BattleStatistics.fail_code)
  return fail_code_;
}
inline void BattleStatistics::set_fail_code(::google::protobuf::int32 value) {
  set_has_fail_code();
  fail_code_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleStatistics.fail_code)
}

// optional .pb.StDoubleHitInfo doubleHit = 5;
inline bool BattleStatistics::has_doublehit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleStatistics::set_has_doublehit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleStatistics::clear_has_doublehit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleStatistics::clear_doublehit() {
  if (doublehit_ != NULL) doublehit_->::pb::StDoubleHitInfo::Clear();
  clear_has_doublehit();
}
inline const ::pb::StDoubleHitInfo& BattleStatistics::doublehit() const {
  // @@protoc_insertion_point(field_get:pb.BattleStatistics.doubleHit)
  return doublehit_ != NULL ? *doublehit_ : *default_instance_->doublehit_;
}
inline ::pb::StDoubleHitInfo* BattleStatistics::mutable_doublehit() {
  set_has_doublehit();
  if (doublehit_ == NULL) doublehit_ = new ::pb::StDoubleHitInfo;
  // @@protoc_insertion_point(field_mutable:pb.BattleStatistics.doubleHit)
  return doublehit_;
}
inline ::pb::StDoubleHitInfo* BattleStatistics::release_doublehit() {
  clear_has_doublehit();
  ::pb::StDoubleHitInfo* temp = doublehit_;
  doublehit_ = NULL;
  return temp;
}
inline void BattleStatistics::set_allocated_doublehit(::pb::StDoubleHitInfo* doublehit) {
  delete doublehit_;
  doublehit_ = doublehit;
  if (doublehit) {
    set_has_doublehit();
  } else {
    clear_has_doublehit();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BattleStatistics.doubleHit)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BattleStatistics_2eproto__INCLUDED
