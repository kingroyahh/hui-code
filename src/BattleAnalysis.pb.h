// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleAnalysis.proto

#ifndef PROTOBUF_BattleAnalysis_2eproto__INCLUDED
#define PROTOBUF_BattleAnalysis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BattleAnalysis_2eproto();
void protobuf_AssignDesc_BattleAnalysis_2eproto();
void protobuf_ShutdownFile_BattleAnalysis_2eproto();

class BattleAnalysisActorInfo;
class BattleAnalysis;

// ===================================================================

/*FOR2LUA
<Record>
	<name>BattleAnalysisActorInfo</name>
	<Function>
		<name>new</name>
		<replaceName>BattleAnalysis.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BattleAnalysisActorInfo : public ::google::protobuf::MessageLite {
 public:
  BattleAnalysisActorInfo();
  virtual ~BattleAnalysisActorInfo();

  BattleAnalysisActorInfo(const BattleAnalysisActorInfo& from);

  inline BattleAnalysisActorInfo& operator=(const BattleAnalysisActorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BattleAnalysisActorInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BattleAnalysisActorInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BattleAnalysisActorInfo* other);

  // implements Message ----------------------------------------------

  BattleAnalysisActorInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BattleAnalysisActorInfo& from);
  void MergeFrom(const BattleAnalysisActorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lastField = 1;
  inline bool has_lastfield() const;
  inline void clear_lastfield();
  static const int kLastFieldFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>lastfield</name>
  		<replaceName>lastField</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastfield</name>
  		<replaceName>lastField</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastfield</name>
  		<replaceName>lastField</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lastfield() const;
  inline void set_lastfield(::google::protobuf::int32 value);

  // optional int32 pos_index = 2;
  inline bool has_pos_index() const;
  inline void clear_pos_index();
  static const int kPosIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>pos_index</name>
  		<replaceName>pos_index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos_index</name>
  		<replaceName>pos_index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos_index</name>
  		<replaceName>pos_index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 pos_index() const;
  inline void set_pos_index(::google::protobuf::int32 value);

  // optional int32 area_index = 3;
  inline bool has_area_index() const;
  inline void clear_area_index();
  static const int kAreaIndexFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>area_index</name>
  		<replaceName>area_index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_area_index</name>
  		<replaceName>area_index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_area_index</name>
  		<replaceName>area_index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 area_index() const;
  inline void set_area_index(::google::protobuf::int32 value);

  // optional int32 hp_init = 4;
  inline bool has_hp_init() const;
  inline void clear_hp_init();
  static const int kHpInitFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>hp_init</name>
  		<replaceName>hp_init</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hp_init</name>
  		<replaceName>hp_init</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hp_init</name>
  		<replaceName>hp_init</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hp_init() const;
  inline void set_hp_init(::google::protobuf::int32 value);

  // optional int32 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>hp</name>
  		<replaceName>hp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hp</name>
  		<replaceName>hp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hp</name>
  		<replaceName>hp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 damage = 6;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>damage</name>
  		<replaceName>damage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage</name>
  		<replaceName>damage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage</name>
  		<replaceName>damage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // optional int32 times_damage = 7;
  inline bool has_times_damage() const;
  inline void clear_times_damage();
  static const int kTimesDamageFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_damage</name>
  		<replaceName>times_damage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_damage</name>
  		<replaceName>times_damage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_damage</name>
  		<replaceName>times_damage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_damage() const;
  inline void set_times_damage(::google::protobuf::int32 value);

  // optional int32 times_damaged = 8;
  inline bool has_times_damaged() const;
  inline void clear_times_damaged();
  static const int kTimesDamagedFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_damaged</name>
  		<replaceName>times_damaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_damaged</name>
  		<replaceName>times_damaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_damaged</name>
  		<replaceName>times_damaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_damaged() const;
  inline void set_times_damaged(::google::protobuf::int32 value);

  // optional int32 heal = 9;
  inline bool has_heal() const;
  inline void clear_heal();
  static const int kHealFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>heal</name>
  		<replaceName>heal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_heal</name>
  		<replaceName>heal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heal</name>
  		<replaceName>heal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 heal() const;
  inline void set_heal(::google::protobuf::int32 value);

  // optional int32 damage_default = 10;
  inline bool has_damage_default() const;
  inline void clear_damage_default();
  static const int kDamageDefaultFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>damage_default</name>
  		<replaceName>damage_default</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage_default</name>
  		<replaceName>damage_default</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage_default</name>
  		<replaceName>damage_default</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damage_default() const;
  inline void set_damage_default(::google::protobuf::int32 value);

  // optional int32 times_default = 11;
  inline bool has_times_default() const;
  inline void clear_times_default();
  static const int kTimesDefaultFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_default</name>
  		<replaceName>times_default</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_default</name>
  		<replaceName>times_default</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_default</name>
  		<replaceName>times_default</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_default() const;
  inline void set_times_default(::google::protobuf::int32 value);

  // optional int32 damage_legend = 12;
  inline bool has_damage_legend() const;
  inline void clear_damage_legend();
  static const int kDamageLegendFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>damage_legend</name>
  		<replaceName>damage_legend</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage_legend</name>
  		<replaceName>damage_legend</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage_legend</name>
  		<replaceName>damage_legend</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damage_legend() const;
  inline void set_damage_legend(::google::protobuf::int32 value);

  // optional int32 times_legend = 13;
  inline bool has_times_legend() const;
  inline void clear_times_legend();
  static const int kTimesLegendFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_legend</name>
  		<replaceName>times_legend</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_legend</name>
  		<replaceName>times_legend</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_legend</name>
  		<replaceName>times_legend</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_legend() const;
  inline void set_times_legend(::google::protobuf::int32 value);

  // optional int32 damage_xp = 14;
  inline bool has_damage_xp() const;
  inline void clear_damage_xp();
  static const int kDamageXpFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>damage_xp</name>
  		<replaceName>damage_xp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage_xp</name>
  		<replaceName>damage_xp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage_xp</name>
  		<replaceName>damage_xp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damage_xp() const;
  inline void set_damage_xp(::google::protobuf::int32 value);

  // optional int32 times_xp = 15;
  inline bool has_times_xp() const;
  inline void clear_times_xp();
  static const int kTimesXpFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_xp</name>
  		<replaceName>times_xp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_xp</name>
  		<replaceName>times_xp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_xp</name>
  		<replaceName>times_xp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_xp() const;
  inline void set_times_xp(::google::protobuf::int32 value);

  // optional int32 damage_combine = 16;
  inline bool has_damage_combine() const;
  inline void clear_damage_combine();
  static const int kDamageCombineFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>damage_combine</name>
  		<replaceName>damage_combine</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage_combine</name>
  		<replaceName>damage_combine</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage_combine</name>
  		<replaceName>damage_combine</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damage_combine() const;
  inline void set_damage_combine(::google::protobuf::int32 value);

  // optional int32 times_combine = 17;
  inline bool has_times_combine() const;
  inline void clear_times_combine();
  static const int kTimesCombineFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_combine</name>
  		<replaceName>times_combine</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_combine</name>
  		<replaceName>times_combine</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_combine</name>
  		<replaceName>times_combine</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_combine() const;
  inline void set_times_combine(::google::protobuf::int32 value);

  // optional int32 times_strike = 18;
  inline bool has_times_strike() const;
  inline void clear_times_strike();
  static const int kTimesStrikeFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_strike</name>
  		<replaceName>times_strike</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_strike</name>
  		<replaceName>times_strike</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_strike</name>
  		<replaceName>times_strike</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_strike() const;
  inline void set_times_strike(::google::protobuf::int32 value);

  // optional int32 times_dodge = 19;
  inline bool has_times_dodge() const;
  inline void clear_times_dodge();
  static const int kTimesDodgeFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_dodge</name>
  		<replaceName>times_dodge</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_dodge</name>
  		<replaceName>times_dodge</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_dodge</name>
  		<replaceName>times_dodge</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_dodge() const;
  inline void set_times_dodge(::google::protobuf::int32 value);

  // optional int32 times_block = 20;
  inline bool has_times_block() const;
  inline void clear_times_block();
  static const int kTimesBlockFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_block</name>
  		<replaceName>times_block</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_block</name>
  		<replaceName>times_block</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_block</name>
  		<replaceName>times_block</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_block() const;
  inline void set_times_block(::google::protobuf::int32 value);

  // optional int32 times_lifesteal = 21;
  inline bool has_times_lifesteal() const;
  inline void clear_times_lifesteal();
  static const int kTimesLifestealFieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_lifesteal</name>
  		<replaceName>times_lifesteal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_lifesteal</name>
  		<replaceName>times_lifesteal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_lifesteal</name>
  		<replaceName>times_lifesteal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_lifesteal() const;
  inline void set_times_lifesteal(::google::protobuf::int32 value);

  // optional int32 times_kill = 22;
  inline bool has_times_kill() const;
  inline void clear_times_kill();
  static const int kTimesKillFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>times_kill</name>
  		<replaceName>times_kill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_times_kill</name>
  		<replaceName>times_kill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_times_kill</name>
  		<replaceName>times_kill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 times_kill() const;
  inline void set_times_kill(::google::protobuf::int32 value);

  // optional int32 dead_round = 23;
  inline bool has_dead_round() const;
  inline void clear_dead_round();
  static const int kDeadRoundFieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysisActorInfo</name>
  	<Function>
  		<name>dead_round</name>
  		<replaceName>dead_round</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dead_round</name>
  		<replaceName>dead_round</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dead_round</name>
  		<replaceName>dead_round</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 dead_round() const;
  inline void set_dead_round(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BattleAnalysisActorInfo)
 private:
  inline void set_has_lastfield();
  inline void clear_has_lastfield();
  inline void set_has_pos_index();
  inline void clear_has_pos_index();
  inline void set_has_area_index();
  inline void clear_has_area_index();
  inline void set_has_hp_init();
  inline void clear_has_hp_init();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_times_damage();
  inline void clear_has_times_damage();
  inline void set_has_times_damaged();
  inline void clear_has_times_damaged();
  inline void set_has_heal();
  inline void clear_has_heal();
  inline void set_has_damage_default();
  inline void clear_has_damage_default();
  inline void set_has_times_default();
  inline void clear_has_times_default();
  inline void set_has_damage_legend();
  inline void clear_has_damage_legend();
  inline void set_has_times_legend();
  inline void clear_has_times_legend();
  inline void set_has_damage_xp();
  inline void clear_has_damage_xp();
  inline void set_has_times_xp();
  inline void clear_has_times_xp();
  inline void set_has_damage_combine();
  inline void clear_has_damage_combine();
  inline void set_has_times_combine();
  inline void clear_has_times_combine();
  inline void set_has_times_strike();
  inline void clear_has_times_strike();
  inline void set_has_times_dodge();
  inline void clear_has_times_dodge();
  inline void set_has_times_block();
  inline void clear_has_times_block();
  inline void set_has_times_lifesteal();
  inline void clear_has_times_lifesteal();
  inline void set_has_times_kill();
  inline void clear_has_times_kill();
  inline void set_has_dead_round();
  inline void clear_has_dead_round();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 lastfield_;
  ::google::protobuf::int32 pos_index_;
  ::google::protobuf::int32 area_index_;
  ::google::protobuf::int32 hp_init_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 times_damage_;
  ::google::protobuf::int32 times_damaged_;
  ::google::protobuf::int32 heal_;
  ::google::protobuf::int32 damage_default_;
  ::google::protobuf::int32 times_default_;
  ::google::protobuf::int32 damage_legend_;
  ::google::protobuf::int32 times_legend_;
  ::google::protobuf::int32 damage_xp_;
  ::google::protobuf::int32 times_xp_;
  ::google::protobuf::int32 damage_combine_;
  ::google::protobuf::int32 times_combine_;
  ::google::protobuf::int32 times_strike_;
  ::google::protobuf::int32 times_dodge_;
  ::google::protobuf::int32 times_block_;
  ::google::protobuf::int32 times_lifesteal_;
  ::google::protobuf::int32 times_kill_;
  ::google::protobuf::int32 dead_round_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_BattleAnalysis_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_BattleAnalysis_2eproto();
  #endif
  friend void protobuf_AssignDesc_BattleAnalysis_2eproto();
  friend void protobuf_ShutdownFile_BattleAnalysis_2eproto();

  void InitAsDefaultInstance();
  static BattleAnalysisActorInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BattleAnalysis</name>
	<Function>
		<name>new</name>
		<replaceName>BattleAnalysis.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BattleAnalysis : public ::google::protobuf::MessageLite {
 public:
  BattleAnalysis();
  virtual ~BattleAnalysis();

  BattleAnalysis(const BattleAnalysis& from);

  inline BattleAnalysis& operator=(const BattleAnalysis& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BattleAnalysis& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BattleAnalysis* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BattleAnalysis* other);

  // implements Message ----------------------------------------------

  BattleAnalysis* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BattleAnalysis& from);
  void MergeFrom(const BattleAnalysis& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.BattleAnalysisActorInfo actor_infos = 1;
  inline int actor_infos_size() const;
  inline void clear_actor_infos();
  static const int kActorInfosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BattleAnalysis</name>
  	<Function>
  		<name>actor_infos</name>
  		<replaceName>actor_infos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_actor_infos</name>
  		<replaceName>actor_infos</replaceName>
  		<handler>descripter = pb_cpp_repeated_add()</handler>
  	</Function>
  	<Function>
  		<name>has_actor_infos</name>
  		<replaceName>actor_infos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>actor_infos_size</name>
  		<replaceName>actor_infos</replaceName>
  		<handler>descripter = pb_cpp_repeated_size()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BattleAnalysisActorInfo& actor_infos(int index) const;
  inline ::pb::BattleAnalysisActorInfo* mutable_actor_infos(int index);
  inline ::pb::BattleAnalysisActorInfo* add_actor_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BattleAnalysisActorInfo >&
      actor_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BattleAnalysisActorInfo >*
      mutable_actor_infos();

  // @@protoc_insertion_point(class_scope:pb.BattleAnalysis)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::BattleAnalysisActorInfo > actor_infos_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_BattleAnalysis_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_BattleAnalysis_2eproto();
  #endif
  friend void protobuf_AssignDesc_BattleAnalysis_2eproto();
  friend void protobuf_ShutdownFile_BattleAnalysis_2eproto();

  void InitAsDefaultInstance();
  static BattleAnalysis* default_instance_;
};
// ===================================================================


// ===================================================================

// BattleAnalysisActorInfo

// optional int32 lastField = 1;
inline bool BattleAnalysisActorInfo::has_lastfield() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_lastfield() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleAnalysisActorInfo::clear_has_lastfield() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleAnalysisActorInfo::clear_lastfield() {
  lastfield_ = 0;
  clear_has_lastfield();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::lastfield() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.lastField)
  return lastfield_;
}
inline void BattleAnalysisActorInfo::set_lastfield(::google::protobuf::int32 value) {
  set_has_lastfield();
  lastfield_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.lastField)
}

// optional int32 pos_index = 2;
inline bool BattleAnalysisActorInfo::has_pos_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_pos_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleAnalysisActorInfo::clear_has_pos_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleAnalysisActorInfo::clear_pos_index() {
  pos_index_ = 0;
  clear_has_pos_index();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::pos_index() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.pos_index)
  return pos_index_;
}
inline void BattleAnalysisActorInfo::set_pos_index(::google::protobuf::int32 value) {
  set_has_pos_index();
  pos_index_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.pos_index)
}

// optional int32 area_index = 3;
inline bool BattleAnalysisActorInfo::has_area_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_area_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleAnalysisActorInfo::clear_has_area_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleAnalysisActorInfo::clear_area_index() {
  area_index_ = 0;
  clear_has_area_index();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::area_index() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.area_index)
  return area_index_;
}
inline void BattleAnalysisActorInfo::set_area_index(::google::protobuf::int32 value) {
  set_has_area_index();
  area_index_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.area_index)
}

// optional int32 hp_init = 4;
inline bool BattleAnalysisActorInfo::has_hp_init() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_hp_init() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleAnalysisActorInfo::clear_has_hp_init() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleAnalysisActorInfo::clear_hp_init() {
  hp_init_ = 0;
  clear_has_hp_init();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::hp_init() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.hp_init)
  return hp_init_;
}
inline void BattleAnalysisActorInfo::set_hp_init(::google::protobuf::int32 value) {
  set_has_hp_init();
  hp_init_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.hp_init)
}

// optional int32 hp = 5;
inline bool BattleAnalysisActorInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleAnalysisActorInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleAnalysisActorInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::hp() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.hp)
  return hp_;
}
inline void BattleAnalysisActorInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.hp)
}

// optional int32 damage = 6;
inline bool BattleAnalysisActorInfo::has_damage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_damage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleAnalysisActorInfo::clear_has_damage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleAnalysisActorInfo::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::damage() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.damage)
  return damage_;
}
inline void BattleAnalysisActorInfo::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.damage)
}

// optional int32 times_damage = 7;
inline bool BattleAnalysisActorInfo::has_times_damage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_damage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleAnalysisActorInfo::clear_has_times_damage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleAnalysisActorInfo::clear_times_damage() {
  times_damage_ = 0;
  clear_has_times_damage();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_damage() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_damage)
  return times_damage_;
}
inline void BattleAnalysisActorInfo::set_times_damage(::google::protobuf::int32 value) {
  set_has_times_damage();
  times_damage_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_damage)
}

// optional int32 times_damaged = 8;
inline bool BattleAnalysisActorInfo::has_times_damaged() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_damaged() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleAnalysisActorInfo::clear_has_times_damaged() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleAnalysisActorInfo::clear_times_damaged() {
  times_damaged_ = 0;
  clear_has_times_damaged();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_damaged() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_damaged)
  return times_damaged_;
}
inline void BattleAnalysisActorInfo::set_times_damaged(::google::protobuf::int32 value) {
  set_has_times_damaged();
  times_damaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_damaged)
}

// optional int32 heal = 9;
inline bool BattleAnalysisActorInfo::has_heal() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_heal() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BattleAnalysisActorInfo::clear_has_heal() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BattleAnalysisActorInfo::clear_heal() {
  heal_ = 0;
  clear_has_heal();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::heal() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.heal)
  return heal_;
}
inline void BattleAnalysisActorInfo::set_heal(::google::protobuf::int32 value) {
  set_has_heal();
  heal_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.heal)
}

// optional int32 damage_default = 10;
inline bool BattleAnalysisActorInfo::has_damage_default() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_damage_default() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BattleAnalysisActorInfo::clear_has_damage_default() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BattleAnalysisActorInfo::clear_damage_default() {
  damage_default_ = 0;
  clear_has_damage_default();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::damage_default() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.damage_default)
  return damage_default_;
}
inline void BattleAnalysisActorInfo::set_damage_default(::google::protobuf::int32 value) {
  set_has_damage_default();
  damage_default_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.damage_default)
}

// optional int32 times_default = 11;
inline bool BattleAnalysisActorInfo::has_times_default() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_default() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BattleAnalysisActorInfo::clear_has_times_default() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BattleAnalysisActorInfo::clear_times_default() {
  times_default_ = 0;
  clear_has_times_default();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_default() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_default)
  return times_default_;
}
inline void BattleAnalysisActorInfo::set_times_default(::google::protobuf::int32 value) {
  set_has_times_default();
  times_default_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_default)
}

// optional int32 damage_legend = 12;
inline bool BattleAnalysisActorInfo::has_damage_legend() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_damage_legend() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BattleAnalysisActorInfo::clear_has_damage_legend() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BattleAnalysisActorInfo::clear_damage_legend() {
  damage_legend_ = 0;
  clear_has_damage_legend();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::damage_legend() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.damage_legend)
  return damage_legend_;
}
inline void BattleAnalysisActorInfo::set_damage_legend(::google::protobuf::int32 value) {
  set_has_damage_legend();
  damage_legend_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.damage_legend)
}

// optional int32 times_legend = 13;
inline bool BattleAnalysisActorInfo::has_times_legend() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_legend() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BattleAnalysisActorInfo::clear_has_times_legend() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BattleAnalysisActorInfo::clear_times_legend() {
  times_legend_ = 0;
  clear_has_times_legend();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_legend() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_legend)
  return times_legend_;
}
inline void BattleAnalysisActorInfo::set_times_legend(::google::protobuf::int32 value) {
  set_has_times_legend();
  times_legend_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_legend)
}

// optional int32 damage_xp = 14;
inline bool BattleAnalysisActorInfo::has_damage_xp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_damage_xp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BattleAnalysisActorInfo::clear_has_damage_xp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BattleAnalysisActorInfo::clear_damage_xp() {
  damage_xp_ = 0;
  clear_has_damage_xp();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::damage_xp() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.damage_xp)
  return damage_xp_;
}
inline void BattleAnalysisActorInfo::set_damage_xp(::google::protobuf::int32 value) {
  set_has_damage_xp();
  damage_xp_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.damage_xp)
}

// optional int32 times_xp = 15;
inline bool BattleAnalysisActorInfo::has_times_xp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_xp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BattleAnalysisActorInfo::clear_has_times_xp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BattleAnalysisActorInfo::clear_times_xp() {
  times_xp_ = 0;
  clear_has_times_xp();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_xp() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_xp)
  return times_xp_;
}
inline void BattleAnalysisActorInfo::set_times_xp(::google::protobuf::int32 value) {
  set_has_times_xp();
  times_xp_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_xp)
}

// optional int32 damage_combine = 16;
inline bool BattleAnalysisActorInfo::has_damage_combine() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_damage_combine() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BattleAnalysisActorInfo::clear_has_damage_combine() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BattleAnalysisActorInfo::clear_damage_combine() {
  damage_combine_ = 0;
  clear_has_damage_combine();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::damage_combine() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.damage_combine)
  return damage_combine_;
}
inline void BattleAnalysisActorInfo::set_damage_combine(::google::protobuf::int32 value) {
  set_has_damage_combine();
  damage_combine_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.damage_combine)
}

// optional int32 times_combine = 17;
inline bool BattleAnalysisActorInfo::has_times_combine() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_combine() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BattleAnalysisActorInfo::clear_has_times_combine() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BattleAnalysisActorInfo::clear_times_combine() {
  times_combine_ = 0;
  clear_has_times_combine();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_combine() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_combine)
  return times_combine_;
}
inline void BattleAnalysisActorInfo::set_times_combine(::google::protobuf::int32 value) {
  set_has_times_combine();
  times_combine_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_combine)
}

// optional int32 times_strike = 18;
inline bool BattleAnalysisActorInfo::has_times_strike() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_strike() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BattleAnalysisActorInfo::clear_has_times_strike() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BattleAnalysisActorInfo::clear_times_strike() {
  times_strike_ = 0;
  clear_has_times_strike();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_strike() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_strike)
  return times_strike_;
}
inline void BattleAnalysisActorInfo::set_times_strike(::google::protobuf::int32 value) {
  set_has_times_strike();
  times_strike_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_strike)
}

// optional int32 times_dodge = 19;
inline bool BattleAnalysisActorInfo::has_times_dodge() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_dodge() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BattleAnalysisActorInfo::clear_has_times_dodge() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BattleAnalysisActorInfo::clear_times_dodge() {
  times_dodge_ = 0;
  clear_has_times_dodge();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_dodge() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_dodge)
  return times_dodge_;
}
inline void BattleAnalysisActorInfo::set_times_dodge(::google::protobuf::int32 value) {
  set_has_times_dodge();
  times_dodge_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_dodge)
}

// optional int32 times_block = 20;
inline bool BattleAnalysisActorInfo::has_times_block() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_block() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BattleAnalysisActorInfo::clear_has_times_block() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BattleAnalysisActorInfo::clear_times_block() {
  times_block_ = 0;
  clear_has_times_block();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_block() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_block)
  return times_block_;
}
inline void BattleAnalysisActorInfo::set_times_block(::google::protobuf::int32 value) {
  set_has_times_block();
  times_block_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_block)
}

// optional int32 times_lifesteal = 21;
inline bool BattleAnalysisActorInfo::has_times_lifesteal() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_lifesteal() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BattleAnalysisActorInfo::clear_has_times_lifesteal() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BattleAnalysisActorInfo::clear_times_lifesteal() {
  times_lifesteal_ = 0;
  clear_has_times_lifesteal();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_lifesteal() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_lifesteal)
  return times_lifesteal_;
}
inline void BattleAnalysisActorInfo::set_times_lifesteal(::google::protobuf::int32 value) {
  set_has_times_lifesteal();
  times_lifesteal_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_lifesteal)
}

// optional int32 times_kill = 22;
inline bool BattleAnalysisActorInfo::has_times_kill() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_times_kill() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BattleAnalysisActorInfo::clear_has_times_kill() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BattleAnalysisActorInfo::clear_times_kill() {
  times_kill_ = 0;
  clear_has_times_kill();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::times_kill() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.times_kill)
  return times_kill_;
}
inline void BattleAnalysisActorInfo::set_times_kill(::google::protobuf::int32 value) {
  set_has_times_kill();
  times_kill_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.times_kill)
}

// optional int32 dead_round = 23;
inline bool BattleAnalysisActorInfo::has_dead_round() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BattleAnalysisActorInfo::set_has_dead_round() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BattleAnalysisActorInfo::clear_has_dead_round() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BattleAnalysisActorInfo::clear_dead_round() {
  dead_round_ = 0;
  clear_has_dead_round();
}
inline ::google::protobuf::int32 BattleAnalysisActorInfo::dead_round() const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysisActorInfo.dead_round)
  return dead_round_;
}
inline void BattleAnalysisActorInfo::set_dead_round(::google::protobuf::int32 value) {
  set_has_dead_round();
  dead_round_ = value;
  // @@protoc_insertion_point(field_set:pb.BattleAnalysisActorInfo.dead_round)
}

// -------------------------------------------------------------------

// BattleAnalysis

// repeated .pb.BattleAnalysisActorInfo actor_infos = 1;
inline int BattleAnalysis::actor_infos_size() const {
  return actor_infos_.size();
}
inline void BattleAnalysis::clear_actor_infos() {
  actor_infos_.Clear();
}
inline const ::pb::BattleAnalysisActorInfo& BattleAnalysis::actor_infos(int index) const {
  // @@protoc_insertion_point(field_get:pb.BattleAnalysis.actor_infos)
  return actor_infos_.Get(index);
}
inline ::pb::BattleAnalysisActorInfo* BattleAnalysis::mutable_actor_infos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BattleAnalysis.actor_infos)
  return actor_infos_.Mutable(index);
}
inline ::pb::BattleAnalysisActorInfo* BattleAnalysis::add_actor_infos() {
  // @@protoc_insertion_point(field_add:pb.BattleAnalysis.actor_infos)
  return actor_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BattleAnalysisActorInfo >&
BattleAnalysis::actor_infos() const {
  // @@protoc_insertion_point(field_list:pb.BattleAnalysis.actor_infos)
  return actor_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BattleAnalysisActorInfo >*
BattleAnalysis::mutable_actor_infos() {
  // @@protoc_insertion_point(field_mutable_list:pb.BattleAnalysis.actor_infos)
  return &actor_infos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BattleAnalysis_2eproto__INCLUDED
