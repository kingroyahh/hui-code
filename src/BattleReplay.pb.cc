// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleReplay.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleReplay.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* EffectDetachBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectDetachBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* EffectAttachBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectAttachBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* EffectUpdateXp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectUpdateXp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EffectShield_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectShield_reflection_ = NULL;
const ::google::protobuf::Descriptor* EffectUpdateHp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectUpdateHp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EffectCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplayCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplayCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoundCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoundCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleReplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleReplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleReplayList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleReplayList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* XpRecoveryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EffectType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleReplay_2eproto() {
  protobuf_AddDesc_BattleReplay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleReplay.proto");
  GOOGLE_CHECK(file != NULL);
  EffectDetachBuff_descriptor_ = file->message_type(0);
  static const int EffectDetachBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectDetachBuff, buff_meta_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectDetachBuff, vanish_type_),
  };
  EffectDetachBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectDetachBuff_descriptor_,
      EffectDetachBuff::default_instance_,
      EffectDetachBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectDetachBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectDetachBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectDetachBuff));
  EffectAttachBuff_descriptor_ = file->message_type(1);
  static const int EffectAttachBuff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAttachBuff, buff_meta_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAttachBuff, layer_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAttachBuff, result_),
  };
  EffectAttachBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectAttachBuff_descriptor_,
      EffectAttachBuff::default_instance_,
      EffectAttachBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAttachBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAttachBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectAttachBuff));
  EffectUpdateXp_descriptor_ = file->message_type(2);
  static const int EffectUpdateXp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateXp, update_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateXp, is_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateXp, recoverytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateXp, slainactorid_),
  };
  EffectUpdateXp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectUpdateXp_descriptor_,
      EffectUpdateXp::default_instance_,
      EffectUpdateXp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateXp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateXp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectUpdateXp));
  EffectShield_descriptor_ = file->message_type(3);
  static const int EffectShield_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectShield, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectShield, damage_absorb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectShield, is_over_),
  };
  EffectShield_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectShield_descriptor_,
      EffectShield::default_instance_,
      EffectShield_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectShield, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectShield, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectShield));
  EffectUpdateHp_descriptor_ = file->message_type(4);
  static const int EffectUpdateHp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, update_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, is_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, resilience_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, blood_drinking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, shield_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, blocktherapy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, striketherapy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, s_damagetherapy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, s_blocktherapy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, s_striketherapy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, is_show_),
  };
  EffectUpdateHp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectUpdateHp_descriptor_,
      EffectUpdateHp::default_instance_,
      EffectUpdateHp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUpdateHp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectUpdateHp));
  EffectCmd_descriptor_ = file->message_type(5);
  static const int EffectCmd_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, subeffect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, buff_meta_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, effect_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, update_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, update_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, attach_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, detach_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, triggerevt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, triggercaster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, trigger_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, triggerdeadactor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, caster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, only_trigger_),
  };
  EffectCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectCmd_descriptor_,
      EffectCmd::default_instance_,
      EffectCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectCmd));
  SkillCmd_descriptor_ = file->message_type(6);
  static const int SkillCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCmd, caster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCmd, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCmd, skill_meta_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCmd, doublehitrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCmd, effect_cmds_),
  };
  SkillCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCmd_descriptor_,
      SkillCmd::default_instance_,
      SkillCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCmd));
  ReplayCmd_descriptor_ = file->message_type(7);
  static const int ReplayCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayCmd, skill_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayCmd, triggertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayCmd, redo_),
  };
  ReplayCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplayCmd_descriptor_,
      ReplayCmd::default_instance_,
      ReplayCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplayCmd));
  RoundCmd_descriptor_ = file->message_type(8);
  static const int RoundCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundCmd, prev_effect_cmds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundCmd, replaylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundCmd, post_effect_cmds_),
  };
  RoundCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoundCmd_descriptor_,
      RoundCmd::default_instance_,
      RoundCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoundCmd));
  ActorInfo_descriptor_ = file->message_type(9);
  static const int ActorInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, meta_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, pos_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, area_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, xpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, activeround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, awake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, halo_),
  };
  ActorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorInfo_descriptor_,
      ActorInfo::default_instance_,
      ActorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorInfo));
  BattleReplay_descriptor_ = file->message_type(10);
  static const int BattleReplay_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, init_cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, over_cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, round_cmds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, fail_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, first_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, max_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, userinfo_),
  };
  BattleReplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleReplay_descriptor_,
      BattleReplay::default_instance_,
      BattleReplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleReplay));
  BattleReplayList_descriptor_ = file->message_type(11);
  static const int BattleReplayList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplayList, battle_replays_),
  };
  BattleReplayList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleReplayList_descriptor_,
      BattleReplayList::default_instance_,
      BattleReplayList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplayList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReplayList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleReplayList));
  XpRecoveryType_descriptor_ = file->enum_type(0);
  EffectType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleReplay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectDetachBuff_descriptor_, &EffectDetachBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectAttachBuff_descriptor_, &EffectAttachBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectUpdateXp_descriptor_, &EffectUpdateXp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectShield_descriptor_, &EffectShield::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectUpdateHp_descriptor_, &EffectUpdateHp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectCmd_descriptor_, &EffectCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCmd_descriptor_, &SkillCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplayCmd_descriptor_, &ReplayCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoundCmd_descriptor_, &RoundCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorInfo_descriptor_, &ActorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleReplay_descriptor_, &BattleReplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleReplayList_descriptor_, &BattleReplayList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleReplay_2eproto() {
  delete EffectDetachBuff::default_instance_;
  delete EffectDetachBuff_reflection_;
  delete EffectAttachBuff::default_instance_;
  delete EffectAttachBuff_reflection_;
  delete EffectUpdateXp::default_instance_;
  delete EffectUpdateXp_reflection_;
  delete EffectShield::default_instance_;
  delete EffectShield_reflection_;
  delete EffectUpdateHp::default_instance_;
  delete EffectUpdateHp_reflection_;
  delete EffectCmd::default_instance_;
  delete EffectCmd_reflection_;
  delete SkillCmd::default_instance_;
  delete SkillCmd_reflection_;
  delete ReplayCmd::default_instance_;
  delete ReplayCmd_reflection_;
  delete RoundCmd::default_instance_;
  delete RoundCmd_reflection_;
  delete ActorInfo::default_instance_;
  delete ActorInfo_reflection_;
  delete BattleReplay::default_instance_;
  delete BattleReplay_reflection_;
  delete BattleReplayList::default_instance_;
  delete BattleReplayList_reflection_;
}

void protobuf_AddDesc_BattleReplay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_BattleParams_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022BattleReplay.proto\022\002pb\032\022BattleParams.p"
    "roto\"=\n\020EffectDetachBuff\022\024\n\014buff_meta_id"
    "\030\001 \001(\005\022\023\n\013vanish_Type\030\002 \001(\005\"M\n\020EffectAtt"
    "achBuff\022\024\n\014buff_meta_id\030\001 \001(\005\022\023\n\013layer_c"
    "ount\030\002 \001(\005\022\016\n\006result\030\003 \001(\010\"t\n\016EffectUpda"
    "teXp\022\021\n\tupdate_xp\030\001 \001(\005\022\017\n\007is_show\030\002 \001(\010"
    "\022(\n\014recoveryType\030\003 \001(\0162\022.pb.XpRecoveryTy"
    "pe\022\024\n\014slainActorID\030\004 \001(\005\"G\n\014EffectShield"
    "\022\017\n\007buff_id\030\001 \001(\005\022\025\n\rdamage_absorb\030\002 \001(\005"
    "\022\017\n\007is_over\030\003 \001(\010\"\223\002\n\016EffectUpdateHp\022\021\n\t"
    "update_hp\030\001 \001(\005\022\017\n\007is_dead\030\002 \001(\010\022\025\n\rresi"
    "lience_hp\030\003 \001(\005\022\026\n\016blood_drinking\030\004 \001(\005\022"
    "&\n\014shield_infos\030\005 \003(\0132\020.pb.EffectShield\022"
    "\024\n\014blockTherapy\030\006 \001(\005\022\025\n\rstrikeTherapy\030\007"
    " \001(\005\022\027\n\017s_damageTherapy\030\010 \001(\005\022\026\n\016s_block"
    "Therapy\030\t \001(\005\022\027\n\017s_strikeTherapy\030\n \001(\005\022\017"
    "\n\007is_show\030\013 \001(\010\"\252\003\n\tEffectCmd\022\021\n\ttarget_"
    "id\030\001 \001(\005\022\024\n\014subEffect_id\030\002 \001(\005\022\r\n\005order\030"
    "\003 \001(\005\022\024\n\014buff_meta_id\030\004 \001(\005\022#\n\013effect_ty"
    "pe\030\005 \001(\0162\016.pb.EffectType\022%\n\tupdate_xp\030\006 "
    "\001(\0132\022.pb.EffectUpdateXp\022%\n\tupdate_hp\030\007 \001"
    "(\0132\022.pb.EffectUpdateHp\022)\n\013attach_buff\030\010 "
    "\001(\0132\024.pb.EffectAttachBuff\022)\n\013detach_buff"
    "\030\t \001(\0132\024.pb.EffectDetachBuff\022\022\n\ntriggerE"
    "vt\030\n \001(\005\022\030\n\020triggerCaster_id\030\013 \001(\005\022\022\n\ntr"
    "igger_id\030\014 \001(\005\022\033\n\023triggerDeadActor_id\030\r "
    "\001(\005\022\021\n\tcaster_id\030\016 \001(\005\022\024\n\014only_trigger\030\017"
    " \001(\010\"\202\001\n\010SkillCmd\022\021\n\tcaster_id\030\001 \001(\005\022\021\n\t"
    "target_id\030\002 \001(\005\022\025\n\rskill_meta_id\030\003 \001(\005\022\025"
    "\n\rdoubleHitRank\030\004 \001(\005\022\"\n\013effect_cmds\030\005 \003"
    "(\0132\r.pb.EffectCmd\"O\n\tReplayCmd\022\037\n\tskill_"
    "cmd\030\001 \001(\0132\014.pb.SkillCmd\022\023\n\013triggerTime\030\002"
    " \001(\005\022\014\n\004redo\030\003 \001(\010\"\177\n\010RoundCmd\022\'\n\020prev_e"
    "ffect_cmds\030\001 \003(\0132\r.pb.EffectCmd\022!\n\nrepla"
    "yList\030\002 \003(\0132\r.pb.ReplayCmd\022\'\n\020post_effec"
    "t_cmds\030\003 \003(\0132\r.pb.EffectCmd\"\217\002\n\tActorInf"
    "o\022\020\n\010actor_id\030\001 \001(\005\022\017\n\007meta_id\030\002 \001(\005\022\021\n\t"
    "pos_index\030\003 \001(\005\022\022\n\narea_index\030\004 \001(\005\022\n\n\002h"
    "p\030\005 \001(\005\022\n\n\002xp\030\006 \001(\005\022\014\n\004name\030\007 \001(\t\022\r\n\005hpM"
    "ax\030\010 \001(\005\022\017\n\007hero_id\030\t \001(\005\022\r\n\005xpMax\030\n \001(\005"
    "\022\023\n\013activeRound\030\013 \001(\005\022\021\n\tfashionId\030\014 \001(\005"
    "\022\r\n\005level\030\r \001(\005\022\r\n\005awake\030\016 \001(\005\022\017\n\007advanc"
    "e\030\017 \001(\005\022\014\n\004halo\030\020 \001(\005\"\372\001\n\014BattleReplay\022\016"
    "\n\006winner\030\001 \001(\005\022!\n\ninit_cells\030\002 \003(\0132\r.pb."
    "ActorInfo\022!\n\nover_cells\030\003 \003(\0132\r.pb.Actor"
    "Info\022 \n\nround_cmds\030\004 \003(\0132\014.pb.RoundCmd\022\021"
    "\n\tfail_code\030\005 \001(\005\022\024\n\014first_attack\030\006 \001(\005\022"
    "\021\n\tmax_round\030\007 \001(\005\022\020\n\010stage_id\030\010 \001(\005\022$\n\010"
    "userInfo\030\t \003(\0132\022.pb.BattleUserInfo\"<\n\020Ba"
    "ttleReplayList\022(\n\016battle_replays\030\001 \003(\0132\020"
    ".pb.BattleReplay*\220\001\n\016XpRecoveryType\022\n\n\006N"
    "ormal\020\001\022\010\n\004Heal\020\002\022\n\n\006Damage\020\003\022\007\n\003Hit\020\004\022\016"
    "\n\nEnemySlain\020\005\022\r\n\tAllySlain\020\006\022\r\n\tKillEne"
    "my\020\007\022\016\n\nRoundBegin\020\010\022\t\n\005Skill\020\t\022\n\n\006Attac"
    "k\020\n*G\n\nEffectType\022\013\n\007Default\020\001\022\n\n\006Strike"
    "\020\002\022\t\n\005Dodge\020\003\022\t\n\005Block\020\004\022\n\n\006Immune\020\005", 2236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleReplay.proto", &protobuf_RegisterTypes);
  EffectDetachBuff::default_instance_ = new EffectDetachBuff();
  EffectAttachBuff::default_instance_ = new EffectAttachBuff();
  EffectUpdateXp::default_instance_ = new EffectUpdateXp();
  EffectShield::default_instance_ = new EffectShield();
  EffectUpdateHp::default_instance_ = new EffectUpdateHp();
  EffectCmd::default_instance_ = new EffectCmd();
  SkillCmd::default_instance_ = new SkillCmd();
  ReplayCmd::default_instance_ = new ReplayCmd();
  RoundCmd::default_instance_ = new RoundCmd();
  ActorInfo::default_instance_ = new ActorInfo();
  BattleReplay::default_instance_ = new BattleReplay();
  BattleReplayList::default_instance_ = new BattleReplayList();
  EffectDetachBuff::default_instance_->InitAsDefaultInstance();
  EffectAttachBuff::default_instance_->InitAsDefaultInstance();
  EffectUpdateXp::default_instance_->InitAsDefaultInstance();
  EffectShield::default_instance_->InitAsDefaultInstance();
  EffectUpdateHp::default_instance_->InitAsDefaultInstance();
  EffectCmd::default_instance_->InitAsDefaultInstance();
  SkillCmd::default_instance_->InitAsDefaultInstance();
  ReplayCmd::default_instance_->InitAsDefaultInstance();
  RoundCmd::default_instance_->InitAsDefaultInstance();
  ActorInfo::default_instance_->InitAsDefaultInstance();
  BattleReplay::default_instance_->InitAsDefaultInstance();
  BattleReplayList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleReplay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleReplay_2eproto {
  StaticDescriptorInitializer_BattleReplay_2eproto() {
    protobuf_AddDesc_BattleReplay_2eproto();
  }
} static_descriptor_initializer_BattleReplay_2eproto_;
const ::google::protobuf::EnumDescriptor* XpRecoveryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XpRecoveryType_descriptor_;
}
bool XpRecoveryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectType_descriptor_;
}
bool EffectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int EffectDetachBuff::kBuffMetaIdFieldNumber;
const int EffectDetachBuff::kVanishTypeFieldNumber;
#endif  // !_MSC_VER

EffectDetachBuff::EffectDetachBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EffectDetachBuff)
}

void EffectDetachBuff::InitAsDefaultInstance() {
}

EffectDetachBuff::EffectDetachBuff(const EffectDetachBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EffectDetachBuff)
}

void EffectDetachBuff::SharedCtor() {
  _cached_size_ = 0;
  buff_meta_id_ = 0;
  vanish_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectDetachBuff::~EffectDetachBuff() {
  // @@protoc_insertion_point(destructor:pb.EffectDetachBuff)
  SharedDtor();
}

void EffectDetachBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EffectDetachBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectDetachBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectDetachBuff_descriptor_;
}

const EffectDetachBuff& EffectDetachBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

EffectDetachBuff* EffectDetachBuff::default_instance_ = NULL;

EffectDetachBuff* EffectDetachBuff::New() const {
  return new EffectDetachBuff;
}

void EffectDetachBuff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EffectDetachBuff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buff_meta_id_, vanish_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectDetachBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EffectDetachBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_meta_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_meta_id_)));
          set_has_buff_meta_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vanish_Type;
        break;
      }

      // optional int32 vanish_Type = 2;
      case 2: {
        if (tag == 16) {
         parse_vanish_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vanish_type_)));
          set_has_vanish_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EffectDetachBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EffectDetachBuff)
  return false;
#undef DO_
}

void EffectDetachBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EffectDetachBuff)
  // optional int32 buff_meta_id = 1;
  if (has_buff_meta_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_meta_id(), output);
  }

  // optional int32 vanish_Type = 2;
  if (has_vanish_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vanish_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EffectDetachBuff)
}

::google::protobuf::uint8* EffectDetachBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EffectDetachBuff)
  // optional int32 buff_meta_id = 1;
  if (has_buff_meta_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_meta_id(), target);
  }

  // optional int32 vanish_Type = 2;
  if (has_vanish_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vanish_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EffectDetachBuff)
  return target;
}

int EffectDetachBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buff_meta_id = 1;
    if (has_buff_meta_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_meta_id());
    }

    // optional int32 vanish_Type = 2;
    if (has_vanish_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vanish_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectDetachBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectDetachBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectDetachBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectDetachBuff::MergeFrom(const EffectDetachBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_meta_id()) {
      set_buff_meta_id(from.buff_meta_id());
    }
    if (from.has_vanish_type()) {
      set_vanish_type(from.vanish_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectDetachBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectDetachBuff::CopyFrom(const EffectDetachBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectDetachBuff::IsInitialized() const {

  return true;
}

void EffectDetachBuff::Swap(EffectDetachBuff* other) {
  if (other != this) {
    std::swap(buff_meta_id_, other->buff_meta_id_);
    std::swap(vanish_type_, other->vanish_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectDetachBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectDetachBuff_descriptor_;
  metadata.reflection = EffectDetachBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EffectAttachBuff::kBuffMetaIdFieldNumber;
const int EffectAttachBuff::kLayerCountFieldNumber;
const int EffectAttachBuff::kResultFieldNumber;
#endif  // !_MSC_VER

EffectAttachBuff::EffectAttachBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EffectAttachBuff)
}

void EffectAttachBuff::InitAsDefaultInstance() {
}

EffectAttachBuff::EffectAttachBuff(const EffectAttachBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EffectAttachBuff)
}

void EffectAttachBuff::SharedCtor() {
  _cached_size_ = 0;
  buff_meta_id_ = 0;
  layer_count_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectAttachBuff::~EffectAttachBuff() {
  // @@protoc_insertion_point(destructor:pb.EffectAttachBuff)
  SharedDtor();
}

void EffectAttachBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EffectAttachBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectAttachBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectAttachBuff_descriptor_;
}

const EffectAttachBuff& EffectAttachBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

EffectAttachBuff* EffectAttachBuff::default_instance_ = NULL;

EffectAttachBuff* EffectAttachBuff::New() const {
  return new EffectAttachBuff;
}

void EffectAttachBuff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EffectAttachBuff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buff_meta_id_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectAttachBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EffectAttachBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_meta_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_meta_id_)));
          set_has_buff_meta_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_layer_count;
        break;
      }

      // optional int32 layer_count = 2;
      case 2: {
        if (tag == 16) {
         parse_layer_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_count_)));
          set_has_layer_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional bool result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EffectAttachBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EffectAttachBuff)
  return false;
#undef DO_
}

void EffectAttachBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EffectAttachBuff)
  // optional int32 buff_meta_id = 1;
  if (has_buff_meta_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_meta_id(), output);
  }

  // optional int32 layer_count = 2;
  if (has_layer_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->layer_count(), output);
  }

  // optional bool result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EffectAttachBuff)
}

::google::protobuf::uint8* EffectAttachBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EffectAttachBuff)
  // optional int32 buff_meta_id = 1;
  if (has_buff_meta_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_meta_id(), target);
  }

  // optional int32 layer_count = 2;
  if (has_layer_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->layer_count(), target);
  }

  // optional bool result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EffectAttachBuff)
  return target;
}

int EffectAttachBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buff_meta_id = 1;
    if (has_buff_meta_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_meta_id());
    }

    // optional int32 layer_count = 2;
    if (has_layer_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer_count());
    }

    // optional bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectAttachBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectAttachBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectAttachBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectAttachBuff::MergeFrom(const EffectAttachBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_meta_id()) {
      set_buff_meta_id(from.buff_meta_id());
    }
    if (from.has_layer_count()) {
      set_layer_count(from.layer_count());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectAttachBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectAttachBuff::CopyFrom(const EffectAttachBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectAttachBuff::IsInitialized() const {

  return true;
}

void EffectAttachBuff::Swap(EffectAttachBuff* other) {
  if (other != this) {
    std::swap(buff_meta_id_, other->buff_meta_id_);
    std::swap(layer_count_, other->layer_count_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectAttachBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectAttachBuff_descriptor_;
  metadata.reflection = EffectAttachBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EffectUpdateXp::kUpdateXpFieldNumber;
const int EffectUpdateXp::kIsShowFieldNumber;
const int EffectUpdateXp::kRecoveryTypeFieldNumber;
const int EffectUpdateXp::kSlainActorIDFieldNumber;
#endif  // !_MSC_VER

EffectUpdateXp::EffectUpdateXp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EffectUpdateXp)
}

void EffectUpdateXp::InitAsDefaultInstance() {
}

EffectUpdateXp::EffectUpdateXp(const EffectUpdateXp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EffectUpdateXp)
}

void EffectUpdateXp::SharedCtor() {
  _cached_size_ = 0;
  update_xp_ = 0;
  is_show_ = false;
  recoverytype_ = 1;
  slainactorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectUpdateXp::~EffectUpdateXp() {
  // @@protoc_insertion_point(destructor:pb.EffectUpdateXp)
  SharedDtor();
}

void EffectUpdateXp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EffectUpdateXp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectUpdateXp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectUpdateXp_descriptor_;
}

const EffectUpdateXp& EffectUpdateXp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

EffectUpdateXp* EffectUpdateXp::default_instance_ = NULL;

EffectUpdateXp* EffectUpdateXp::New() const {
  return new EffectUpdateXp;
}

void EffectUpdateXp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EffectUpdateXp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(update_xp_, is_show_);
    recoverytype_ = 1;
    slainactorid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectUpdateXp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EffectUpdateXp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 update_xp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_xp_)));
          set_has_update_xp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_show;
        break;
      }

      // optional bool is_show = 2;
      case 2: {
        if (tag == 16) {
         parse_is_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_)));
          set_has_is_show();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recoveryType;
        break;
      }

      // optional .pb.XpRecoveryType recoveryType = 3;
      case 3: {
        if (tag == 24) {
         parse_recoveryType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::XpRecoveryType_IsValid(value)) {
            set_recoverytype(static_cast< ::pb::XpRecoveryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_slainActorID;
        break;
      }

      // optional int32 slainActorID = 4;
      case 4: {
        if (tag == 32) {
         parse_slainActorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slainactorid_)));
          set_has_slainactorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EffectUpdateXp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EffectUpdateXp)
  return false;
#undef DO_
}

void EffectUpdateXp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EffectUpdateXp)
  // optional int32 update_xp = 1;
  if (has_update_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->update_xp(), output);
  }

  // optional bool is_show = 2;
  if (has_is_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_show(), output);
  }

  // optional .pb.XpRecoveryType recoveryType = 3;
  if (has_recoverytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->recoverytype(), output);
  }

  // optional int32 slainActorID = 4;
  if (has_slainactorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slainactorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EffectUpdateXp)
}

::google::protobuf::uint8* EffectUpdateXp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EffectUpdateXp)
  // optional int32 update_xp = 1;
  if (has_update_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->update_xp(), target);
  }

  // optional bool is_show = 2;
  if (has_is_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_show(), target);
  }

  // optional .pb.XpRecoveryType recoveryType = 3;
  if (has_recoverytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->recoverytype(), target);
  }

  // optional int32 slainActorID = 4;
  if (has_slainactorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slainactorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EffectUpdateXp)
  return target;
}

int EffectUpdateXp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 update_xp = 1;
    if (has_update_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_xp());
    }

    // optional bool is_show = 2;
    if (has_is_show()) {
      total_size += 1 + 1;
    }

    // optional .pb.XpRecoveryType recoveryType = 3;
    if (has_recoverytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recoverytype());
    }

    // optional int32 slainActorID = 4;
    if (has_slainactorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slainactorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectUpdateXp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectUpdateXp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectUpdateXp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectUpdateXp::MergeFrom(const EffectUpdateXp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_xp()) {
      set_update_xp(from.update_xp());
    }
    if (from.has_is_show()) {
      set_is_show(from.is_show());
    }
    if (from.has_recoverytype()) {
      set_recoverytype(from.recoverytype());
    }
    if (from.has_slainactorid()) {
      set_slainactorid(from.slainactorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectUpdateXp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectUpdateXp::CopyFrom(const EffectUpdateXp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectUpdateXp::IsInitialized() const {

  return true;
}

void EffectUpdateXp::Swap(EffectUpdateXp* other) {
  if (other != this) {
    std::swap(update_xp_, other->update_xp_);
    std::swap(is_show_, other->is_show_);
    std::swap(recoverytype_, other->recoverytype_);
    std::swap(slainactorid_, other->slainactorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectUpdateXp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectUpdateXp_descriptor_;
  metadata.reflection = EffectUpdateXp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EffectShield::kBuffIdFieldNumber;
const int EffectShield::kDamageAbsorbFieldNumber;
const int EffectShield::kIsOverFieldNumber;
#endif  // !_MSC_VER

EffectShield::EffectShield()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EffectShield)
}

void EffectShield::InitAsDefaultInstance() {
}

EffectShield::EffectShield(const EffectShield& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EffectShield)
}

void EffectShield::SharedCtor() {
  _cached_size_ = 0;
  buff_id_ = 0;
  damage_absorb_ = 0;
  is_over_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectShield::~EffectShield() {
  // @@protoc_insertion_point(destructor:pb.EffectShield)
  SharedDtor();
}

void EffectShield::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EffectShield::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectShield::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectShield_descriptor_;
}

const EffectShield& EffectShield::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

EffectShield* EffectShield::default_instance_ = NULL;

EffectShield* EffectShield::New() const {
  return new EffectShield;
}

void EffectShield::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EffectShield*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buff_id_, is_over_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectShield::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EffectShield)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_damage_absorb;
        break;
      }

      // optional int32 damage_absorb = 2;
      case 2: {
        if (tag == 16) {
         parse_damage_absorb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_absorb_)));
          set_has_damage_absorb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_over;
        break;
      }

      // optional bool is_over = 3;
      case 3: {
        if (tag == 24) {
         parse_is_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_over_)));
          set_has_is_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EffectShield)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EffectShield)
  return false;
#undef DO_
}

void EffectShield::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EffectShield)
  // optional int32 buff_id = 1;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_id(), output);
  }

  // optional int32 damage_absorb = 2;
  if (has_damage_absorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage_absorb(), output);
  }

  // optional bool is_over = 3;
  if (has_is_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_over(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EffectShield)
}

::google::protobuf::uint8* EffectShield::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EffectShield)
  // optional int32 buff_id = 1;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_id(), target);
  }

  // optional int32 damage_absorb = 2;
  if (has_damage_absorb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage_absorb(), target);
  }

  // optional bool is_over = 3;
  if (has_is_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_over(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EffectShield)
  return target;
}

int EffectShield::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buff_id = 1;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_id());
    }

    // optional int32 damage_absorb = 2;
    if (has_damage_absorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_absorb());
    }

    // optional bool is_over = 3;
    if (has_is_over()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectShield::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectShield* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectShield*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectShield::MergeFrom(const EffectShield& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_damage_absorb()) {
      set_damage_absorb(from.damage_absorb());
    }
    if (from.has_is_over()) {
      set_is_over(from.is_over());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectShield::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectShield::CopyFrom(const EffectShield& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectShield::IsInitialized() const {

  return true;
}

void EffectShield::Swap(EffectShield* other) {
  if (other != this) {
    std::swap(buff_id_, other->buff_id_);
    std::swap(damage_absorb_, other->damage_absorb_);
    std::swap(is_over_, other->is_over_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectShield::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectShield_descriptor_;
  metadata.reflection = EffectShield_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EffectUpdateHp::kUpdateHpFieldNumber;
const int EffectUpdateHp::kIsDeadFieldNumber;
const int EffectUpdateHp::kResilienceHpFieldNumber;
const int EffectUpdateHp::kBloodDrinkingFieldNumber;
const int EffectUpdateHp::kShieldInfosFieldNumber;
const int EffectUpdateHp::kBlockTherapyFieldNumber;
const int EffectUpdateHp::kStrikeTherapyFieldNumber;
const int EffectUpdateHp::kSDamageTherapyFieldNumber;
const int EffectUpdateHp::kSBlockTherapyFieldNumber;
const int EffectUpdateHp::kSStrikeTherapyFieldNumber;
const int EffectUpdateHp::kIsShowFieldNumber;
#endif  // !_MSC_VER

EffectUpdateHp::EffectUpdateHp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EffectUpdateHp)
}

void EffectUpdateHp::InitAsDefaultInstance() {
}

EffectUpdateHp::EffectUpdateHp(const EffectUpdateHp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EffectUpdateHp)
}

void EffectUpdateHp::SharedCtor() {
  _cached_size_ = 0;
  update_hp_ = 0;
  is_dead_ = false;
  resilience_hp_ = 0;
  blood_drinking_ = 0;
  blocktherapy_ = 0;
  striketherapy_ = 0;
  s_damagetherapy_ = 0;
  s_blocktherapy_ = 0;
  s_striketherapy_ = 0;
  is_show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectUpdateHp::~EffectUpdateHp() {
  // @@protoc_insertion_point(destructor:pb.EffectUpdateHp)
  SharedDtor();
}

void EffectUpdateHp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EffectUpdateHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectUpdateHp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectUpdateHp_descriptor_;
}

const EffectUpdateHp& EffectUpdateHp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

EffectUpdateHp* EffectUpdateHp::default_instance_ = NULL;

EffectUpdateHp* EffectUpdateHp::New() const {
  return new EffectUpdateHp;
}

void EffectUpdateHp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EffectUpdateHp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(update_hp_, resilience_hp_);
    ZR_(blood_drinking_, is_dead_);
    ZR_(striketherapy_, s_damagetherapy_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(s_blocktherapy_, s_striketherapy_);
    is_show_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  shield_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectUpdateHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EffectUpdateHp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 update_hp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_hp_)));
          set_has_update_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_dead;
        break;
      }

      // optional bool is_dead = 2;
      case 2: {
        if (tag == 16) {
         parse_is_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));
          set_has_is_dead();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resilience_hp;
        break;
      }

      // optional int32 resilience_hp = 3;
      case 3: {
        if (tag == 24) {
         parse_resilience_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resilience_hp_)));
          set_has_resilience_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blood_drinking;
        break;
      }

      // optional int32 blood_drinking = 4;
      case 4: {
        if (tag == 32) {
         parse_blood_drinking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_drinking_)));
          set_has_blood_drinking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_shield_infos;
        break;
      }

      // repeated .pb.EffectShield shield_infos = 5;
      case 5: {
        if (tag == 42) {
         parse_shield_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shield_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_shield_infos;
        if (input->ExpectTag(48)) goto parse_blockTherapy;
        break;
      }

      // optional int32 blockTherapy = 6;
      case 6: {
        if (tag == 48) {
         parse_blockTherapy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocktherapy_)));
          set_has_blocktherapy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_strikeTherapy;
        break;
      }

      // optional int32 strikeTherapy = 7;
      case 7: {
        if (tag == 56) {
         parse_strikeTherapy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &striketherapy_)));
          set_has_striketherapy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_s_damageTherapy;
        break;
      }

      // optional int32 s_damageTherapy = 8;
      case 8: {
        if (tag == 64) {
         parse_s_damageTherapy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_damagetherapy_)));
          set_has_s_damagetherapy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_s_blockTherapy;
        break;
      }

      // optional int32 s_blockTherapy = 9;
      case 9: {
        if (tag == 72) {
         parse_s_blockTherapy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_blocktherapy_)));
          set_has_s_blocktherapy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_s_strikeTherapy;
        break;
      }

      // optional int32 s_strikeTherapy = 10;
      case 10: {
        if (tag == 80) {
         parse_s_strikeTherapy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_striketherapy_)));
          set_has_s_striketherapy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_show;
        break;
      }

      // optional bool is_show = 11;
      case 11: {
        if (tag == 88) {
         parse_is_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_)));
          set_has_is_show();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EffectUpdateHp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EffectUpdateHp)
  return false;
#undef DO_
}

void EffectUpdateHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EffectUpdateHp)
  // optional int32 update_hp = 1;
  if (has_update_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->update_hp(), output);
  }

  // optional bool is_dead = 2;
  if (has_is_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_dead(), output);
  }

  // optional int32 resilience_hp = 3;
  if (has_resilience_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resilience_hp(), output);
  }

  // optional int32 blood_drinking = 4;
  if (has_blood_drinking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blood_drinking(), output);
  }

  // repeated .pb.EffectShield shield_infos = 5;
  for (int i = 0; i < this->shield_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shield_infos(i), output);
  }

  // optional int32 blockTherapy = 6;
  if (has_blocktherapy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->blocktherapy(), output);
  }

  // optional int32 strikeTherapy = 7;
  if (has_striketherapy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->striketherapy(), output);
  }

  // optional int32 s_damageTherapy = 8;
  if (has_s_damagetherapy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->s_damagetherapy(), output);
  }

  // optional int32 s_blockTherapy = 9;
  if (has_s_blocktherapy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->s_blocktherapy(), output);
  }

  // optional int32 s_strikeTherapy = 10;
  if (has_s_striketherapy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->s_striketherapy(), output);
  }

  // optional bool is_show = 11;
  if (has_is_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EffectUpdateHp)
}

::google::protobuf::uint8* EffectUpdateHp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EffectUpdateHp)
  // optional int32 update_hp = 1;
  if (has_update_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->update_hp(), target);
  }

  // optional bool is_dead = 2;
  if (has_is_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_dead(), target);
  }

  // optional int32 resilience_hp = 3;
  if (has_resilience_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resilience_hp(), target);
  }

  // optional int32 blood_drinking = 4;
  if (has_blood_drinking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->blood_drinking(), target);
  }

  // repeated .pb.EffectShield shield_infos = 5;
  for (int i = 0; i < this->shield_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shield_infos(i), target);
  }

  // optional int32 blockTherapy = 6;
  if (has_blocktherapy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->blocktherapy(), target);
  }

  // optional int32 strikeTherapy = 7;
  if (has_striketherapy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->striketherapy(), target);
  }

  // optional int32 s_damageTherapy = 8;
  if (has_s_damagetherapy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->s_damagetherapy(), target);
  }

  // optional int32 s_blockTherapy = 9;
  if (has_s_blocktherapy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->s_blocktherapy(), target);
  }

  // optional int32 s_strikeTherapy = 10;
  if (has_s_striketherapy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->s_striketherapy(), target);
  }

  // optional bool is_show = 11;
  if (has_is_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EffectUpdateHp)
  return target;
}

int EffectUpdateHp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 update_hp = 1;
    if (has_update_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_hp());
    }

    // optional bool is_dead = 2;
    if (has_is_dead()) {
      total_size += 1 + 1;
    }

    // optional int32 resilience_hp = 3;
    if (has_resilience_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resilience_hp());
    }

    // optional int32 blood_drinking = 4;
    if (has_blood_drinking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood_drinking());
    }

    // optional int32 blockTherapy = 6;
    if (has_blocktherapy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocktherapy());
    }

    // optional int32 strikeTherapy = 7;
    if (has_striketherapy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->striketherapy());
    }

    // optional int32 s_damageTherapy = 8;
    if (has_s_damagetherapy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s_damagetherapy());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 s_blockTherapy = 9;
    if (has_s_blocktherapy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s_blocktherapy());
    }

    // optional int32 s_strikeTherapy = 10;
    if (has_s_striketherapy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s_striketherapy());
    }

    // optional bool is_show = 11;
    if (has_is_show()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.EffectShield shield_infos = 5;
  total_size += 1 * this->shield_infos_size();
  for (int i = 0; i < this->shield_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shield_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectUpdateHp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectUpdateHp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectUpdateHp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectUpdateHp::MergeFrom(const EffectUpdateHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  shield_infos_.MergeFrom(from.shield_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_hp()) {
      set_update_hp(from.update_hp());
    }
    if (from.has_is_dead()) {
      set_is_dead(from.is_dead());
    }
    if (from.has_resilience_hp()) {
      set_resilience_hp(from.resilience_hp());
    }
    if (from.has_blood_drinking()) {
      set_blood_drinking(from.blood_drinking());
    }
    if (from.has_blocktherapy()) {
      set_blocktherapy(from.blocktherapy());
    }
    if (from.has_striketherapy()) {
      set_striketherapy(from.striketherapy());
    }
    if (from.has_s_damagetherapy()) {
      set_s_damagetherapy(from.s_damagetherapy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_s_blocktherapy()) {
      set_s_blocktherapy(from.s_blocktherapy());
    }
    if (from.has_s_striketherapy()) {
      set_s_striketherapy(from.s_striketherapy());
    }
    if (from.has_is_show()) {
      set_is_show(from.is_show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectUpdateHp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectUpdateHp::CopyFrom(const EffectUpdateHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectUpdateHp::IsInitialized() const {

  return true;
}

void EffectUpdateHp::Swap(EffectUpdateHp* other) {
  if (other != this) {
    std::swap(update_hp_, other->update_hp_);
    std::swap(is_dead_, other->is_dead_);
    std::swap(resilience_hp_, other->resilience_hp_);
    std::swap(blood_drinking_, other->blood_drinking_);
    shield_infos_.Swap(&other->shield_infos_);
    std::swap(blocktherapy_, other->blocktherapy_);
    std::swap(striketherapy_, other->striketherapy_);
    std::swap(s_damagetherapy_, other->s_damagetherapy_);
    std::swap(s_blocktherapy_, other->s_blocktherapy_);
    std::swap(s_striketherapy_, other->s_striketherapy_);
    std::swap(is_show_, other->is_show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectUpdateHp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectUpdateHp_descriptor_;
  metadata.reflection = EffectUpdateHp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EffectCmd::kTargetIdFieldNumber;
const int EffectCmd::kSubEffectIdFieldNumber;
const int EffectCmd::kOrderFieldNumber;
const int EffectCmd::kBuffMetaIdFieldNumber;
const int EffectCmd::kEffectTypeFieldNumber;
const int EffectCmd::kUpdateXpFieldNumber;
const int EffectCmd::kUpdateHpFieldNumber;
const int EffectCmd::kAttachBuffFieldNumber;
const int EffectCmd::kDetachBuffFieldNumber;
const int EffectCmd::kTriggerEvtFieldNumber;
const int EffectCmd::kTriggerCasterIdFieldNumber;
const int EffectCmd::kTriggerIdFieldNumber;
const int EffectCmd::kTriggerDeadActorIdFieldNumber;
const int EffectCmd::kCasterIdFieldNumber;
const int EffectCmd::kOnlyTriggerFieldNumber;
#endif  // !_MSC_VER

EffectCmd::EffectCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EffectCmd)
}

void EffectCmd::InitAsDefaultInstance() {
  update_xp_ = const_cast< ::pb::EffectUpdateXp*>(&::pb::EffectUpdateXp::default_instance());
  update_hp_ = const_cast< ::pb::EffectUpdateHp*>(&::pb::EffectUpdateHp::default_instance());
  attach_buff_ = const_cast< ::pb::EffectAttachBuff*>(&::pb::EffectAttachBuff::default_instance());
  detach_buff_ = const_cast< ::pb::EffectDetachBuff*>(&::pb::EffectDetachBuff::default_instance());
}

EffectCmd::EffectCmd(const EffectCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EffectCmd)
}

void EffectCmd::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = 0;
  subeffect_id_ = 0;
  order_ = 0;
  buff_meta_id_ = 0;
  effect_type_ = 1;
  update_xp_ = NULL;
  update_hp_ = NULL;
  attach_buff_ = NULL;
  detach_buff_ = NULL;
  triggerevt_ = 0;
  triggercaster_id_ = 0;
  trigger_id_ = 0;
  triggerdeadactor_id_ = 0;
  caster_id_ = 0;
  only_trigger_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectCmd::~EffectCmd() {
  // @@protoc_insertion_point(destructor:pb.EffectCmd)
  SharedDtor();
}

void EffectCmd::SharedDtor() {
  if (this != default_instance_) {
    delete update_xp_;
    delete update_hp_;
    delete attach_buff_;
    delete detach_buff_;
  }
}

void EffectCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectCmd_descriptor_;
}

const EffectCmd& EffectCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

EffectCmd* EffectCmd::default_instance_ = NULL;

EffectCmd* EffectCmd::New() const {
  return new EffectCmd;
}

void EffectCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EffectCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(target_id_, buff_meta_id_);
    effect_type_ = 1;
    if (has_update_xp()) {
      if (update_xp_ != NULL) update_xp_->::pb::EffectUpdateXp::Clear();
    }
    if (has_update_hp()) {
      if (update_hp_ != NULL) update_hp_->::pb::EffectUpdateHp::Clear();
    }
    if (has_attach_buff()) {
      if (attach_buff_ != NULL) attach_buff_->::pb::EffectAttachBuff::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(triggercaster_id_, only_trigger_);
    if (has_detach_buff()) {
      if (detach_buff_ != NULL) detach_buff_->::pb::EffectDetachBuff::Clear();
    }
    triggerevt_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EffectCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_subEffect_id;
        break;
      }

      // optional int32 subEffect_id = 2;
      case 2: {
        if (tag == 16) {
         parse_subEffect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subeffect_id_)));
          set_has_subeffect_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (tag == 24) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buff_meta_id;
        break;
      }

      // optional int32 buff_meta_id = 4;
      case 4: {
        if (tag == 32) {
         parse_buff_meta_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_meta_id_)));
          set_has_buff_meta_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_effect_type;
        break;
      }

      // optional .pb.EffectType effect_type = 5;
      case 5: {
        if (tag == 40) {
         parse_effect_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EffectType_IsValid(value)) {
            set_effect_type(static_cast< ::pb::EffectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_update_xp;
        break;
      }

      // optional .pb.EffectUpdateXp update_xp = 6;
      case 6: {
        if (tag == 50) {
         parse_update_xp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_xp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_update_hp;
        break;
      }

      // optional .pb.EffectUpdateHp update_hp = 7;
      case 7: {
        if (tag == 58) {
         parse_update_hp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_hp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attach_buff;
        break;
      }

      // optional .pb.EffectAttachBuff attach_buff = 8;
      case 8: {
        if (tag == 66) {
         parse_attach_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attach_buff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_detach_buff;
        break;
      }

      // optional .pb.EffectDetachBuff detach_buff = 9;
      case 9: {
        if (tag == 74) {
         parse_detach_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detach_buff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_triggerEvt;
        break;
      }

      // optional int32 triggerEvt = 10;
      case 10: {
        if (tag == 80) {
         parse_triggerEvt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerevt_)));
          set_has_triggerevt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_triggerCaster_id;
        break;
      }

      // optional int32 triggerCaster_id = 11;
      case 11: {
        if (tag == 88) {
         parse_triggerCaster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggercaster_id_)));
          set_has_triggercaster_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_trigger_id;
        break;
      }

      // optional int32 trigger_id = 12;
      case 12: {
        if (tag == 96) {
         parse_trigger_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_id_)));
          set_has_trigger_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_triggerDeadActor_id;
        break;
      }

      // optional int32 triggerDeadActor_id = 13;
      case 13: {
        if (tag == 104) {
         parse_triggerDeadActor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerdeadactor_id_)));
          set_has_triggerdeadactor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_caster_id;
        break;
      }

      // optional int32 caster_id = 14;
      case 14: {
        if (tag == 112) {
         parse_caster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caster_id_)));
          set_has_caster_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_only_trigger;
        break;
      }

      // optional bool only_trigger = 15;
      case 15: {
        if (tag == 120) {
         parse_only_trigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_trigger_)));
          set_has_only_trigger();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EffectCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EffectCmd)
  return false;
#undef DO_
}

void EffectCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EffectCmd)
  // optional int32 target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target_id(), output);
  }

  // optional int32 subEffect_id = 2;
  if (has_subeffect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subeffect_id(), output);
  }

  // optional int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // optional int32 buff_meta_id = 4;
  if (has_buff_meta_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buff_meta_id(), output);
  }

  // optional .pb.EffectType effect_type = 5;
  if (has_effect_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->effect_type(), output);
  }

  // optional .pb.EffectUpdateXp update_xp = 6;
  if (has_update_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->update_xp(), output);
  }

  // optional .pb.EffectUpdateHp update_hp = 7;
  if (has_update_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->update_hp(), output);
  }

  // optional .pb.EffectAttachBuff attach_buff = 8;
  if (has_attach_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attach_buff(), output);
  }

  // optional .pb.EffectDetachBuff detach_buff = 9;
  if (has_detach_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->detach_buff(), output);
  }

  // optional int32 triggerEvt = 10;
  if (has_triggerevt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->triggerevt(), output);
  }

  // optional int32 triggerCaster_id = 11;
  if (has_triggercaster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->triggercaster_id(), output);
  }

  // optional int32 trigger_id = 12;
  if (has_trigger_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->trigger_id(), output);
  }

  // optional int32 triggerDeadActor_id = 13;
  if (has_triggerdeadactor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->triggerdeadactor_id(), output);
  }

  // optional int32 caster_id = 14;
  if (has_caster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->caster_id(), output);
  }

  // optional bool only_trigger = 15;
  if (has_only_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->only_trigger(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EffectCmd)
}

::google::protobuf::uint8* EffectCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EffectCmd)
  // optional int32 target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target_id(), target);
  }

  // optional int32 subEffect_id = 2;
  if (has_subeffect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subeffect_id(), target);
  }

  // optional int32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  // optional int32 buff_meta_id = 4;
  if (has_buff_meta_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buff_meta_id(), target);
  }

  // optional .pb.EffectType effect_type = 5;
  if (has_effect_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->effect_type(), target);
  }

  // optional .pb.EffectUpdateXp update_xp = 6;
  if (has_update_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->update_xp(), target);
  }

  // optional .pb.EffectUpdateHp update_hp = 7;
  if (has_update_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->update_hp(), target);
  }

  // optional .pb.EffectAttachBuff attach_buff = 8;
  if (has_attach_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attach_buff(), target);
  }

  // optional .pb.EffectDetachBuff detach_buff = 9;
  if (has_detach_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->detach_buff(), target);
  }

  // optional int32 triggerEvt = 10;
  if (has_triggerevt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->triggerevt(), target);
  }

  // optional int32 triggerCaster_id = 11;
  if (has_triggercaster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->triggercaster_id(), target);
  }

  // optional int32 trigger_id = 12;
  if (has_trigger_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->trigger_id(), target);
  }

  // optional int32 triggerDeadActor_id = 13;
  if (has_triggerdeadactor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->triggerdeadactor_id(), target);
  }

  // optional int32 caster_id = 14;
  if (has_caster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->caster_id(), target);
  }

  // optional bool only_trigger = 15;
  if (has_only_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->only_trigger(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EffectCmd)
  return target;
}

int EffectCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_id());
    }

    // optional int32 subEffect_id = 2;
    if (has_subeffect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subeffect_id());
    }

    // optional int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional int32 buff_meta_id = 4;
    if (has_buff_meta_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_meta_id());
    }

    // optional .pb.EffectType effect_type = 5;
    if (has_effect_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect_type());
    }

    // optional .pb.EffectUpdateXp update_xp = 6;
    if (has_update_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_xp());
    }

    // optional .pb.EffectUpdateHp update_hp = 7;
    if (has_update_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_hp());
    }

    // optional .pb.EffectAttachBuff attach_buff = 8;
    if (has_attach_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attach_buff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.EffectDetachBuff detach_buff = 9;
    if (has_detach_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detach_buff());
    }

    // optional int32 triggerEvt = 10;
    if (has_triggerevt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerevt());
    }

    // optional int32 triggerCaster_id = 11;
    if (has_triggercaster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggercaster_id());
    }

    // optional int32 trigger_id = 12;
    if (has_trigger_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_id());
    }

    // optional int32 triggerDeadActor_id = 13;
    if (has_triggerdeadactor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerdeadactor_id());
    }

    // optional int32 caster_id = 14;
    if (has_caster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caster_id());
    }

    // optional bool only_trigger = 15;
    if (has_only_trigger()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectCmd::MergeFrom(const EffectCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_subeffect_id()) {
      set_subeffect_id(from.subeffect_id());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_buff_meta_id()) {
      set_buff_meta_id(from.buff_meta_id());
    }
    if (from.has_effect_type()) {
      set_effect_type(from.effect_type());
    }
    if (from.has_update_xp()) {
      mutable_update_xp()->::pb::EffectUpdateXp::MergeFrom(from.update_xp());
    }
    if (from.has_update_hp()) {
      mutable_update_hp()->::pb::EffectUpdateHp::MergeFrom(from.update_hp());
    }
    if (from.has_attach_buff()) {
      mutable_attach_buff()->::pb::EffectAttachBuff::MergeFrom(from.attach_buff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_detach_buff()) {
      mutable_detach_buff()->::pb::EffectDetachBuff::MergeFrom(from.detach_buff());
    }
    if (from.has_triggerevt()) {
      set_triggerevt(from.triggerevt());
    }
    if (from.has_triggercaster_id()) {
      set_triggercaster_id(from.triggercaster_id());
    }
    if (from.has_trigger_id()) {
      set_trigger_id(from.trigger_id());
    }
    if (from.has_triggerdeadactor_id()) {
      set_triggerdeadactor_id(from.triggerdeadactor_id());
    }
    if (from.has_caster_id()) {
      set_caster_id(from.caster_id());
    }
    if (from.has_only_trigger()) {
      set_only_trigger(from.only_trigger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectCmd::CopyFrom(const EffectCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectCmd::IsInitialized() const {

  return true;
}

void EffectCmd::Swap(EffectCmd* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(subeffect_id_, other->subeffect_id_);
    std::swap(order_, other->order_);
    std::swap(buff_meta_id_, other->buff_meta_id_);
    std::swap(effect_type_, other->effect_type_);
    std::swap(update_xp_, other->update_xp_);
    std::swap(update_hp_, other->update_hp_);
    std::swap(attach_buff_, other->attach_buff_);
    std::swap(detach_buff_, other->detach_buff_);
    std::swap(triggerevt_, other->triggerevt_);
    std::swap(triggercaster_id_, other->triggercaster_id_);
    std::swap(trigger_id_, other->trigger_id_);
    std::swap(triggerdeadactor_id_, other->triggerdeadactor_id_);
    std::swap(caster_id_, other->caster_id_);
    std::swap(only_trigger_, other->only_trigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectCmd_descriptor_;
  metadata.reflection = EffectCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCmd::kCasterIdFieldNumber;
const int SkillCmd::kTargetIdFieldNumber;
const int SkillCmd::kSkillMetaIdFieldNumber;
const int SkillCmd::kDoubleHitRankFieldNumber;
const int SkillCmd::kEffectCmdsFieldNumber;
#endif  // !_MSC_VER

SkillCmd::SkillCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillCmd)
}

void SkillCmd::InitAsDefaultInstance() {
}

SkillCmd::SkillCmd(const SkillCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillCmd)
}

void SkillCmd::SharedCtor() {
  _cached_size_ = 0;
  caster_id_ = 0;
  target_id_ = 0;
  skill_meta_id_ = 0;
  doublehitrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCmd::~SkillCmd() {
  // @@protoc_insertion_point(destructor:pb.SkillCmd)
  SharedDtor();
}

void SkillCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCmd_descriptor_;
}

const SkillCmd& SkillCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

SkillCmd* SkillCmd::default_instance_ = NULL;

SkillCmd* SkillCmd::New() const {
  return new SkillCmd;
}

void SkillCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(caster_id_, doublehitrank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  effect_cmds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 caster_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caster_id_)));
          set_has_caster_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional int32 target_id = 2;
      case 2: {
        if (tag == 16) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skill_meta_id;
        break;
      }

      // optional int32 skill_meta_id = 3;
      case 3: {
        if (tag == 24) {
         parse_skill_meta_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_meta_id_)));
          set_has_skill_meta_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_doubleHitRank;
        break;
      }

      // optional int32 doubleHitRank = 4;
      case 4: {
        if (tag == 32) {
         parse_doubleHitRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doublehitrank_)));
          set_has_doublehitrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_effect_cmds;
        break;
      }

      // repeated .pb.EffectCmd effect_cmds = 5;
      case 5: {
        if (tag == 42) {
         parse_effect_cmds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect_cmds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_effect_cmds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillCmd)
  return false;
#undef DO_
}

void SkillCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillCmd)
  // optional int32 caster_id = 1;
  if (has_caster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->caster_id(), output);
  }

  // optional int32 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_id(), output);
  }

  // optional int32 skill_meta_id = 3;
  if (has_skill_meta_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_meta_id(), output);
  }

  // optional int32 doubleHitRank = 4;
  if (has_doublehitrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->doublehitrank(), output);
  }

  // repeated .pb.EffectCmd effect_cmds = 5;
  for (int i = 0; i < this->effect_cmds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->effect_cmds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillCmd)
}

::google::protobuf::uint8* SkillCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillCmd)
  // optional int32 caster_id = 1;
  if (has_caster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->caster_id(), target);
  }

  // optional int32 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_id(), target);
  }

  // optional int32 skill_meta_id = 3;
  if (has_skill_meta_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_meta_id(), target);
  }

  // optional int32 doubleHitRank = 4;
  if (has_doublehitrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->doublehitrank(), target);
  }

  // repeated .pb.EffectCmd effect_cmds = 5;
  for (int i = 0; i < this->effect_cmds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->effect_cmds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillCmd)
  return target;
}

int SkillCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 caster_id = 1;
    if (has_caster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caster_id());
    }

    // optional int32 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_id());
    }

    // optional int32 skill_meta_id = 3;
    if (has_skill_meta_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_meta_id());
    }

    // optional int32 doubleHitRank = 4;
    if (has_doublehitrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doublehitrank());
    }

  }
  // repeated .pb.EffectCmd effect_cmds = 5;
  total_size += 1 * this->effect_cmds_size();
  for (int i = 0; i < this->effect_cmds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect_cmds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCmd::MergeFrom(const SkillCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  effect_cmds_.MergeFrom(from.effect_cmds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caster_id()) {
      set_caster_id(from.caster_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_skill_meta_id()) {
      set_skill_meta_id(from.skill_meta_id());
    }
    if (from.has_doublehitrank()) {
      set_doublehitrank(from.doublehitrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCmd::CopyFrom(const SkillCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCmd::IsInitialized() const {

  return true;
}

void SkillCmd::Swap(SkillCmd* other) {
  if (other != this) {
    std::swap(caster_id_, other->caster_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(skill_meta_id_, other->skill_meta_id_);
    std::swap(doublehitrank_, other->doublehitrank_);
    effect_cmds_.Swap(&other->effect_cmds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCmd_descriptor_;
  metadata.reflection = SkillCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplayCmd::kSkillCmdFieldNumber;
const int ReplayCmd::kTriggerTimeFieldNumber;
const int ReplayCmd::kRedoFieldNumber;
#endif  // !_MSC_VER

ReplayCmd::ReplayCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReplayCmd)
}

void ReplayCmd::InitAsDefaultInstance() {
  skill_cmd_ = const_cast< ::pb::SkillCmd*>(&::pb::SkillCmd::default_instance());
}

ReplayCmd::ReplayCmd(const ReplayCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ReplayCmd)
}

void ReplayCmd::SharedCtor() {
  _cached_size_ = 0;
  skill_cmd_ = NULL;
  triggertime_ = 0;
  redo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayCmd::~ReplayCmd() {
  // @@protoc_insertion_point(destructor:pb.ReplayCmd)
  SharedDtor();
}

void ReplayCmd::SharedDtor() {
  if (this != default_instance_) {
    delete skill_cmd_;
  }
}

void ReplayCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplayCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayCmd_descriptor_;
}

const ReplayCmd& ReplayCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

ReplayCmd* ReplayCmd::default_instance_ = NULL;

ReplayCmd* ReplayCmd::New() const {
  return new ReplayCmd;
}

void ReplayCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplayCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(triggertime_, redo_);
    if (has_skill_cmd()) {
      if (skill_cmd_ != NULL) skill_cmd_->::pb::SkillCmd::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplayCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReplayCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.SkillCmd skill_cmd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_triggerTime;
        break;
      }

      // optional int32 triggerTime = 2;
      case 2: {
        if (tag == 16) {
         parse_triggerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggertime_)));
          set_has_triggertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_redo;
        break;
      }

      // optional bool redo = 3;
      case 3: {
        if (tag == 24) {
         parse_redo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &redo_)));
          set_has_redo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReplayCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReplayCmd)
  return false;
#undef DO_
}

void ReplayCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReplayCmd)
  // optional .pb.SkillCmd skill_cmd = 1;
  if (has_skill_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_cmd(), output);
  }

  // optional int32 triggerTime = 2;
  if (has_triggertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->triggertime(), output);
  }

  // optional bool redo = 3;
  if (has_redo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->redo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ReplayCmd)
}

::google::protobuf::uint8* ReplayCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReplayCmd)
  // optional .pb.SkillCmd skill_cmd = 1;
  if (has_skill_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill_cmd(), target);
  }

  // optional int32 triggerTime = 2;
  if (has_triggertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->triggertime(), target);
  }

  // optional bool redo = 3;
  if (has_redo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->redo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReplayCmd)
  return target;
}

int ReplayCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.SkillCmd skill_cmd = 1;
    if (has_skill_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_cmd());
    }

    // optional int32 triggerTime = 2;
    if (has_triggertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggertime());
    }

    // optional bool redo = 3;
    if (has_redo()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplayCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplayCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplayCmd::MergeFrom(const ReplayCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_cmd()) {
      mutable_skill_cmd()->::pb::SkillCmd::MergeFrom(from.skill_cmd());
    }
    if (from.has_triggertime()) {
      set_triggertime(from.triggertime());
    }
    if (from.has_redo()) {
      set_redo(from.redo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplayCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayCmd::CopyFrom(const ReplayCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayCmd::IsInitialized() const {

  return true;
}

void ReplayCmd::Swap(ReplayCmd* other) {
  if (other != this) {
    std::swap(skill_cmd_, other->skill_cmd_);
    std::swap(triggertime_, other->triggertime_);
    std::swap(redo_, other->redo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplayCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplayCmd_descriptor_;
  metadata.reflection = ReplayCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoundCmd::kPrevEffectCmdsFieldNumber;
const int RoundCmd::kReplayListFieldNumber;
const int RoundCmd::kPostEffectCmdsFieldNumber;
#endif  // !_MSC_VER

RoundCmd::RoundCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoundCmd)
}

void RoundCmd::InitAsDefaultInstance() {
}

RoundCmd::RoundCmd(const RoundCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RoundCmd)
}

void RoundCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoundCmd::~RoundCmd() {
  // @@protoc_insertion_point(destructor:pb.RoundCmd)
  SharedDtor();
}

void RoundCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoundCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoundCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoundCmd_descriptor_;
}

const RoundCmd& RoundCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

RoundCmd* RoundCmd::default_instance_ = NULL;

RoundCmd* RoundCmd::New() const {
  return new RoundCmd;
}

void RoundCmd::Clear() {
  prev_effect_cmds_.Clear();
  replaylist_.Clear();
  post_effect_cmds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoundCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoundCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.EffectCmd prev_effect_cmds = 1;
      case 1: {
        if (tag == 10) {
         parse_prev_effect_cmds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prev_effect_cmds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_prev_effect_cmds;
        if (input->ExpectTag(18)) goto parse_replayList;
        break;
      }

      // repeated .pb.ReplayCmd replayList = 2;
      case 2: {
        if (tag == 18) {
         parse_replayList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replaylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_replayList;
        if (input->ExpectTag(26)) goto parse_post_effect_cmds;
        break;
      }

      // repeated .pb.EffectCmd post_effect_cmds = 3;
      case 3: {
        if (tag == 26) {
         parse_post_effect_cmds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post_effect_cmds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_post_effect_cmds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoundCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoundCmd)
  return false;
#undef DO_
}

void RoundCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoundCmd)
  // repeated .pb.EffectCmd prev_effect_cmds = 1;
  for (int i = 0; i < this->prev_effect_cmds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prev_effect_cmds(i), output);
  }

  // repeated .pb.ReplayCmd replayList = 2;
  for (int i = 0; i < this->replaylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->replaylist(i), output);
  }

  // repeated .pb.EffectCmd post_effect_cmds = 3;
  for (int i = 0; i < this->post_effect_cmds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->post_effect_cmds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoundCmd)
}

::google::protobuf::uint8* RoundCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoundCmd)
  // repeated .pb.EffectCmd prev_effect_cmds = 1;
  for (int i = 0; i < this->prev_effect_cmds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prev_effect_cmds(i), target);
  }

  // repeated .pb.ReplayCmd replayList = 2;
  for (int i = 0; i < this->replaylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->replaylist(i), target);
  }

  // repeated .pb.EffectCmd post_effect_cmds = 3;
  for (int i = 0; i < this->post_effect_cmds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->post_effect_cmds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoundCmd)
  return target;
}

int RoundCmd::ByteSize() const {
  int total_size = 0;

  // repeated .pb.EffectCmd prev_effect_cmds = 1;
  total_size += 1 * this->prev_effect_cmds_size();
  for (int i = 0; i < this->prev_effect_cmds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prev_effect_cmds(i));
  }

  // repeated .pb.ReplayCmd replayList = 2;
  total_size += 1 * this->replaylist_size();
  for (int i = 0; i < this->replaylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replaylist(i));
  }

  // repeated .pb.EffectCmd post_effect_cmds = 3;
  total_size += 1 * this->post_effect_cmds_size();
  for (int i = 0; i < this->post_effect_cmds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->post_effect_cmds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoundCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoundCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoundCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoundCmd::MergeFrom(const RoundCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  prev_effect_cmds_.MergeFrom(from.prev_effect_cmds_);
  replaylist_.MergeFrom(from.replaylist_);
  post_effect_cmds_.MergeFrom(from.post_effect_cmds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoundCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundCmd::CopyFrom(const RoundCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundCmd::IsInitialized() const {

  return true;
}

void RoundCmd::Swap(RoundCmd* other) {
  if (other != this) {
    prev_effect_cmds_.Swap(&other->prev_effect_cmds_);
    replaylist_.Swap(&other->replaylist_);
    post_effect_cmds_.Swap(&other->post_effect_cmds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoundCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoundCmd_descriptor_;
  metadata.reflection = RoundCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorInfo::kActorIdFieldNumber;
const int ActorInfo::kMetaIdFieldNumber;
const int ActorInfo::kPosIndexFieldNumber;
const int ActorInfo::kAreaIndexFieldNumber;
const int ActorInfo::kHpFieldNumber;
const int ActorInfo::kXpFieldNumber;
const int ActorInfo::kNameFieldNumber;
const int ActorInfo::kHpMaxFieldNumber;
const int ActorInfo::kHeroIdFieldNumber;
const int ActorInfo::kXpMaxFieldNumber;
const int ActorInfo::kActiveRoundFieldNumber;
const int ActorInfo::kFashionIdFieldNumber;
const int ActorInfo::kLevelFieldNumber;
const int ActorInfo::kAwakeFieldNumber;
const int ActorInfo::kAdvanceFieldNumber;
const int ActorInfo::kHaloFieldNumber;
#endif  // !_MSC_VER

ActorInfo::ActorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ActorInfo)
}

void ActorInfo::InitAsDefaultInstance() {
}

ActorInfo::ActorInfo(const ActorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ActorInfo)
}

void ActorInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  actor_id_ = 0;
  meta_id_ = 0;
  pos_index_ = 0;
  area_index_ = 0;
  hp_ = 0;
  xp_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hpmax_ = 0;
  hero_id_ = 0;
  xpmax_ = 0;
  activeround_ = 0;
  fashionid_ = 0;
  level_ = 0;
  awake_ = 0;
  advance_ = 0;
  halo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorInfo::~ActorInfo() {
  // @@protoc_insertion_point(destructor:pb.ActorInfo)
  SharedDtor();
}

void ActorInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ActorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorInfo_descriptor_;
}

const ActorInfo& ActorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

ActorInfo* ActorInfo::default_instance_ = NULL;

ActorInfo* ActorInfo::New() const {
  return new ActorInfo;
}

void ActorInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActorInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(actor_id_, xp_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    hpmax_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(hero_id_, halo_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ActorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actor_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
          set_has_actor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_meta_id;
        break;
      }

      // optional int32 meta_id = 2;
      case 2: {
        if (tag == 16) {
         parse_meta_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meta_id_)));
          set_has_meta_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_index;
        break;
      }

      // optional int32 pos_index = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_index_)));
          set_has_pos_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_area_index;
        break;
      }

      // optional int32 area_index = 4;
      case 4: {
        if (tag == 32) {
         parse_area_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_index_)));
          set_has_area_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // optional int32 hp = 5;
      case 5: {
        if (tag == 40) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_xp;
        break;
      }

      // optional int32 xp = 6;
      case 6: {
        if (tag == 48) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_)));
          set_has_xp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hpMax;
        break;
      }

      // optional int32 hpMax = 8;
      case 8: {
        if (tag == 64) {
         parse_hpMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hero_id;
        break;
      }

      // optional int32 hero_id = 9;
      case 9: {
        if (tag == 72) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_xpMax;
        break;
      }

      // optional int32 xpMax = 10;
      case 10: {
        if (tag == 80) {
         parse_xpMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpmax_)));
          set_has_xpmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_activeRound;
        break;
      }

      // optional int32 activeRound = 11;
      case 11: {
        if (tag == 88) {
         parse_activeRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activeround_)));
          set_has_activeround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_fashionId;
        break;
      }

      // optional int32 fashionId = 12;
      case 12: {
        if (tag == 96) {
         parse_fashionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_level;
        break;
      }

      // optional int32 level = 13;
      case 13: {
        if (tag == 104) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_awake;
        break;
      }

      // optional int32 awake = 14;
      case 14: {
        if (tag == 112) {
         parse_awake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awake_)));
          set_has_awake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_advance;
        break;
      }

      // optional int32 advance = 15;
      case 15: {
        if (tag == 120) {
         parse_advance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_halo;
        break;
      }

      // optional int32 halo = 16;
      case 16: {
        if (tag == 128) {
         parse_halo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &halo_)));
          set_has_halo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ActorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ActorInfo)
  return false;
#undef DO_
}

void ActorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ActorInfo)
  // optional int32 actor_id = 1;
  if (has_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actor_id(), output);
  }

  // optional int32 meta_id = 2;
  if (has_meta_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->meta_id(), output);
  }

  // optional int32 pos_index = 3;
  if (has_pos_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_index(), output);
  }

  // optional int32 area_index = 4;
  if (has_area_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->area_index(), output);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // optional int32 xp = 6;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xp(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional int32 hpMax = 8;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hpmax(), output);
  }

  // optional int32 hero_id = 9;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hero_id(), output);
  }

  // optional int32 xpMax = 10;
  if (has_xpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->xpmax(), output);
  }

  // optional int32 activeRound = 11;
  if (has_activeround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->activeround(), output);
  }

  // optional int32 fashionId = 12;
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->fashionid(), output);
  }

  // optional int32 level = 13;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->level(), output);
  }

  // optional int32 awake = 14;
  if (has_awake()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->awake(), output);
  }

  // optional int32 advance = 15;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->advance(), output);
  }

  // optional int32 halo = 16;
  if (has_halo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->halo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ActorInfo)
}

::google::protobuf::uint8* ActorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ActorInfo)
  // optional int32 actor_id = 1;
  if (has_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actor_id(), target);
  }

  // optional int32 meta_id = 2;
  if (has_meta_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->meta_id(), target);
  }

  // optional int32 pos_index = 3;
  if (has_pos_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_index(), target);
  }

  // optional int32 area_index = 4;
  if (has_area_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->area_index(), target);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hp(), target);
  }

  // optional int32 xp = 6;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xp(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional int32 hpMax = 8;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hpmax(), target);
  }

  // optional int32 hero_id = 9;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hero_id(), target);
  }

  // optional int32 xpMax = 10;
  if (has_xpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->xpmax(), target);
  }

  // optional int32 activeRound = 11;
  if (has_activeround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->activeround(), target);
  }

  // optional int32 fashionId = 12;
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->fashionid(), target);
  }

  // optional int32 level = 13;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->level(), target);
  }

  // optional int32 awake = 14;
  if (has_awake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->awake(), target);
  }

  // optional int32 advance = 15;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->advance(), target);
  }

  // optional int32 halo = 16;
  if (has_halo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->halo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ActorInfo)
  return target;
}

int ActorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 actor_id = 1;
    if (has_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actor_id());
    }

    // optional int32 meta_id = 2;
    if (has_meta_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meta_id());
    }

    // optional int32 pos_index = 3;
    if (has_pos_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_index());
    }

    // optional int32 area_index = 4;
    if (has_area_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_index());
    }

    // optional int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 xp = 6;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 hpMax = 8;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hero_id = 9;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // optional int32 xpMax = 10;
    if (has_xpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpmax());
    }

    // optional int32 activeRound = 11;
    if (has_activeround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeround());
    }

    // optional int32 fashionId = 12;
    if (has_fashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashionid());
    }

    // optional int32 level = 13;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 awake = 14;
    if (has_awake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awake());
    }

    // optional int32 advance = 15;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advance());
    }

    // optional int32 halo = 16;
    if (has_halo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->halo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorInfo::MergeFrom(const ActorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_id()) {
      set_actor_id(from.actor_id());
    }
    if (from.has_meta_id()) {
      set_meta_id(from.meta_id());
    }
    if (from.has_pos_index()) {
      set_pos_index(from.pos_index());
    }
    if (from.has_area_index()) {
      set_area_index(from.area_index());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_xp()) {
      set_xp(from.xp());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_xpmax()) {
      set_xpmax(from.xpmax());
    }
    if (from.has_activeround()) {
      set_activeround(from.activeround());
    }
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_awake()) {
      set_awake(from.awake());
    }
    if (from.has_advance()) {
      set_advance(from.advance());
    }
    if (from.has_halo()) {
      set_halo(from.halo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorInfo::CopyFrom(const ActorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorInfo::IsInitialized() const {

  return true;
}

void ActorInfo::Swap(ActorInfo* other) {
  if (other != this) {
    std::swap(actor_id_, other->actor_id_);
    std::swap(meta_id_, other->meta_id_);
    std::swap(pos_index_, other->pos_index_);
    std::swap(area_index_, other->area_index_);
    std::swap(hp_, other->hp_);
    std::swap(xp_, other->xp_);
    std::swap(name_, other->name_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(xpmax_, other->xpmax_);
    std::swap(activeround_, other->activeround_);
    std::swap(fashionid_, other->fashionid_);
    std::swap(level_, other->level_);
    std::swap(awake_, other->awake_);
    std::swap(advance_, other->advance_);
    std::swap(halo_, other->halo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorInfo_descriptor_;
  metadata.reflection = ActorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleReplay::kWinnerFieldNumber;
const int BattleReplay::kInitCellsFieldNumber;
const int BattleReplay::kOverCellsFieldNumber;
const int BattleReplay::kRoundCmdsFieldNumber;
const int BattleReplay::kFailCodeFieldNumber;
const int BattleReplay::kFirstAttackFieldNumber;
const int BattleReplay::kMaxRoundFieldNumber;
const int BattleReplay::kStageIdFieldNumber;
const int BattleReplay::kUserInfoFieldNumber;
#endif  // !_MSC_VER

BattleReplay::BattleReplay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BattleReplay)
}

void BattleReplay::InitAsDefaultInstance() {
}

BattleReplay::BattleReplay(const BattleReplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BattleReplay)
}

void BattleReplay::SharedCtor() {
  _cached_size_ = 0;
  winner_ = 0;
  fail_code_ = 0;
  first_attack_ = 0;
  max_round_ = 0;
  stage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleReplay::~BattleReplay() {
  // @@protoc_insertion_point(destructor:pb.BattleReplay)
  SharedDtor();
}

void BattleReplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleReplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleReplay_descriptor_;
}

const BattleReplay& BattleReplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

BattleReplay* BattleReplay::default_instance_ = NULL;

BattleReplay* BattleReplay::New() const {
  return new BattleReplay;
}

void BattleReplay::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleReplay*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 241) {
    ZR_(winner_, fail_code_);
    ZR_(first_attack_, max_round_);
    stage_id_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  init_cells_.Clear();
  over_cells_.Clear();
  round_cmds_.Clear();
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BattleReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 winner = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_init_cells;
        break;
      }

      // repeated .pb.ActorInfo init_cells = 2;
      case 2: {
        if (tag == 18) {
         parse_init_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_init_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_init_cells;
        if (input->ExpectTag(26)) goto parse_over_cells;
        break;
      }

      // repeated .pb.ActorInfo over_cells = 3;
      case 3: {
        if (tag == 26) {
         parse_over_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_over_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_over_cells;
        if (input->ExpectTag(34)) goto parse_round_cmds;
        break;
      }

      // repeated .pb.RoundCmd round_cmds = 4;
      case 4: {
        if (tag == 34) {
         parse_round_cmds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_round_cmds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_round_cmds;
        if (input->ExpectTag(40)) goto parse_fail_code;
        break;
      }

      // optional int32 fail_code = 5;
      case 5: {
        if (tag == 40) {
         parse_fail_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_code_)));
          set_has_fail_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_first_attack;
        break;
      }

      // optional int32 first_attack = 6;
      case 6: {
        if (tag == 48) {
         parse_first_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_attack_)));
          set_has_first_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_round;
        break;
      }

      // optional int32 max_round = 7;
      case 7: {
        if (tag == 56) {
         parse_max_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_round_)));
          set_has_max_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_stage_id;
        break;
      }

      // optional int32 stage_id = 8;
      case 8: {
        if (tag == 64) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_userInfo;
        break;
      }

      // repeated .pb.BattleUserInfo userInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_userInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BattleReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BattleReplay)
  return false;
#undef DO_
}

void BattleReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BattleReplay)
  // optional int32 winner = 1;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winner(), output);
  }

  // repeated .pb.ActorInfo init_cells = 2;
  for (int i = 0; i < this->init_cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->init_cells(i), output);
  }

  // repeated .pb.ActorInfo over_cells = 3;
  for (int i = 0; i < this->over_cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->over_cells(i), output);
  }

  // repeated .pb.RoundCmd round_cmds = 4;
  for (int i = 0; i < this->round_cmds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->round_cmds(i), output);
  }

  // optional int32 fail_code = 5;
  if (has_fail_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fail_code(), output);
  }

  // optional int32 first_attack = 6;
  if (has_first_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->first_attack(), output);
  }

  // optional int32 max_round = 7;
  if (has_max_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_round(), output);
  }

  // optional int32 stage_id = 8;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->stage_id(), output);
  }

  // repeated .pb.BattleUserInfo userInfo = 9;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->userinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BattleReplay)
}

::google::protobuf::uint8* BattleReplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BattleReplay)
  // optional int32 winner = 1;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winner(), target);
  }

  // repeated .pb.ActorInfo init_cells = 2;
  for (int i = 0; i < this->init_cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->init_cells(i), target);
  }

  // repeated .pb.ActorInfo over_cells = 3;
  for (int i = 0; i < this->over_cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->over_cells(i), target);
  }

  // repeated .pb.RoundCmd round_cmds = 4;
  for (int i = 0; i < this->round_cmds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->round_cmds(i), target);
  }

  // optional int32 fail_code = 5;
  if (has_fail_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fail_code(), target);
  }

  // optional int32 first_attack = 6;
  if (has_first_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->first_attack(), target);
  }

  // optional int32 max_round = 7;
  if (has_max_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_round(), target);
  }

  // optional int32 stage_id = 8;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->stage_id(), target);
  }

  // repeated .pb.BattleUserInfo userInfo = 9;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->userinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BattleReplay)
  return target;
}

int BattleReplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 winner = 1;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner());
    }

    // optional int32 fail_code = 5;
    if (has_fail_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail_code());
    }

    // optional int32 first_attack = 6;
    if (has_first_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_attack());
    }

    // optional int32 max_round = 7;
    if (has_max_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_round());
    }

    // optional int32 stage_id = 8;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

  }
  // repeated .pb.ActorInfo init_cells = 2;
  total_size += 1 * this->init_cells_size();
  for (int i = 0; i < this->init_cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->init_cells(i));
  }

  // repeated .pb.ActorInfo over_cells = 3;
  total_size += 1 * this->over_cells_size();
  for (int i = 0; i < this->over_cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->over_cells(i));
  }

  // repeated .pb.RoundCmd round_cmds = 4;
  total_size += 1 * this->round_cmds_size();
  for (int i = 0; i < this->round_cmds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->round_cmds(i));
  }

  // repeated .pb.BattleUserInfo userInfo = 9;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleReplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleReplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleReplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleReplay::MergeFrom(const BattleReplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  init_cells_.MergeFrom(from.init_cells_);
  over_cells_.MergeFrom(from.over_cells_);
  round_cmds_.MergeFrom(from.round_cmds_);
  userinfo_.MergeFrom(from.userinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner()) {
      set_winner(from.winner());
    }
    if (from.has_fail_code()) {
      set_fail_code(from.fail_code());
    }
    if (from.has_first_attack()) {
      set_first_attack(from.first_attack());
    }
    if (from.has_max_round()) {
      set_max_round(from.max_round());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleReplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleReplay::CopyFrom(const BattleReplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleReplay::IsInitialized() const {

  return true;
}

void BattleReplay::Swap(BattleReplay* other) {
  if (other != this) {
    std::swap(winner_, other->winner_);
    init_cells_.Swap(&other->init_cells_);
    over_cells_.Swap(&other->over_cells_);
    round_cmds_.Swap(&other->round_cmds_);
    std::swap(fail_code_, other->fail_code_);
    std::swap(first_attack_, other->first_attack_);
    std::swap(max_round_, other->max_round_);
    std::swap(stage_id_, other->stage_id_);
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleReplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleReplay_descriptor_;
  metadata.reflection = BattleReplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleReplayList::kBattleReplaysFieldNumber;
#endif  // !_MSC_VER

BattleReplayList::BattleReplayList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BattleReplayList)
}

void BattleReplayList::InitAsDefaultInstance() {
}

BattleReplayList::BattleReplayList(const BattleReplayList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BattleReplayList)
}

void BattleReplayList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleReplayList::~BattleReplayList() {
  // @@protoc_insertion_point(destructor:pb.BattleReplayList)
  SharedDtor();
}

void BattleReplayList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleReplayList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleReplayList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleReplayList_descriptor_;
}

const BattleReplayList& BattleReplayList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleReplay_2eproto();
  return *default_instance_;
}

BattleReplayList* BattleReplayList::default_instance_ = NULL;

BattleReplayList* BattleReplayList::New() const {
  return new BattleReplayList;
}

void BattleReplayList::Clear() {
  battle_replays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleReplayList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BattleReplayList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.BattleReplay battle_replays = 1;
      case 1: {
        if (tag == 10) {
         parse_battle_replays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_replays()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_battle_replays;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BattleReplayList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BattleReplayList)
  return false;
#undef DO_
}

void BattleReplayList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BattleReplayList)
  // repeated .pb.BattleReplay battle_replays = 1;
  for (int i = 0; i < this->battle_replays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_replays(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BattleReplayList)
}

::google::protobuf::uint8* BattleReplayList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BattleReplayList)
  // repeated .pb.BattleReplay battle_replays = 1;
  for (int i = 0; i < this->battle_replays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_replays(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BattleReplayList)
  return target;
}

int BattleReplayList::ByteSize() const {
  int total_size = 0;

  // repeated .pb.BattleReplay battle_replays = 1;
  total_size += 1 * this->battle_replays_size();
  for (int i = 0; i < this->battle_replays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_replays(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleReplayList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleReplayList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleReplayList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleReplayList::MergeFrom(const BattleReplayList& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_replays_.MergeFrom(from.battle_replays_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleReplayList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleReplayList::CopyFrom(const BattleReplayList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleReplayList::IsInitialized() const {

  return true;
}

void BattleReplayList::Swap(BattleReplayList* other) {
  if (other != this) {
    battle_replays_.Swap(&other->battle_replays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleReplayList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleReplayList_descriptor_;
  metadata.reflection = BattleReplayList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
